{
	"id": "6d0de016085ca30f7a60f6cfd9063d1f",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.30",
	"solcLongVersion": "0.8.30+commit.73712a01",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Mock/CustomToken.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {ERC20Upgradeable} from \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ncontract CustomToken is ERC20Upgradeable, OwnableUpgradeable {\n    function initialize(string memory name, string memory symbol)\n        public\n        initializer\n    {\n        __Ownable_init(msg.sender);\n        __ERC20_init(name, symbol);\n        _mint(msg.sender, 200_000_000 * 10**decimals());\n    }\n\n    function mint() public onlyOwner {\n        super._mint(owner(), 200_000_000 * 10**decimals());\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\n    struct OwnableStorage {\n        address _owner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Ownable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\n\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\n        assembly {\n            $.slot := OwnableStorageLocation\n        }\n    }\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }\n\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        OwnableStorage storage $ = _getOwnableStorage();\n        return $._owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage $ = _getOwnableStorage();\n        address oldOwner = $._owner;\n        $._owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {ContextUpgradeable} from \"../../utils/ContextUpgradeable.sol\";\nimport {IERC20Errors} from \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\n    struct ERC20Storage {\n        mapping(address account => uint256) _balances;\n\n        mapping(address account => mapping(address spender => uint256)) _allowances;\n\n        uint256 _totalSupply;\n\n        string _name;\n        string _symbol;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ERC20\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\n\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\n        assembly {\n            $.slot := ERC20StorageLocation\n        }\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC20Storage storage $ = _getERC20Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            $._totalSupply += value;\n        } else {\n            uint256 fromBalance = $._balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                $._balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                $._totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                $._balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        $._allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\n     *\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\n     */\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\n        return INITIALIZABLE_STORAGE;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        bytes32 slot = _initializableStorageSlot();\n        assembly {\n            $.slot := slot\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"OwnableUpgradeable": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							],
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9706d43a0124053d9880f6e31a59f31bc0a6a3dc1acd66ce0a16e1111658c5f6\",\"dweb:/ipfs/QmUFmfowzkRwGtDu36cXV9SPTBHJ3n7dG9xQiK5B28jTf2\"]},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08\",\"dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"Initializable": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "constructor constructor() {     _disableInitializers(); } ``` ====",
						"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```",
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08\",\"dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
				"ERC20Upgradeable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC-20 applications.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC-20 applications.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":\"ERC20Upgradeable\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08\",\"dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0xa0e86b70fa5a7bd63795161c0882676fde6a18bbb1991938ef014fb0184b4b13\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1727a5d693a56ed6af48bace20d8ec26232f0a8f78ff482c5a691cc5c348a019\",\"dweb:/ipfs/QmdXaYmoETBqAv4YBnSmZyuoovjQMsDjfjnCnBFqXhhQEB\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ContextUpgradeable": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08\",\"dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"IERC1155Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC1155InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "idsLength",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "valuesLength",
									"type": "uint256"
								}
							],
							"name": "ERC1155InvalidArrayLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC1155MissingApprovalForAll",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC-1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.",
						"errors": {
							"ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC1155InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC1155InvalidArrayLength(uint256,uint256)": [
								{
									"details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
									"params": {
										"idsLength": "Length of the array of token identifiers",
										"valuesLength": "Length of the array of token amounts"
									}
								}
							],
							"ERC1155InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC1155InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC1155InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC1155MissingApprovalForAll(address,address)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"owner": "Address of the current owner of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC-20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC721Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC-721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-20 standard as defined in the ERC.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC-20 standard.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC-20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Mock/CustomToken.sol": {
				"CustomToken": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol",
									"type": "string"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "mint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							],
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Mock/CustomToken.sol\":263:675  contract CustomToken is ERC20Upgradeable, OwnableUpgradeable {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  revert(0x00, 0x00)\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Mock/CustomToken.sol\":263:675  contract CustomToken is ERC20Upgradeable, OwnableUpgradeable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      revert(0x00, 0x00)\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x70a08231\n      gt\n      tag_17\n      jumpi\n      dup1\n      0x95d89b41\n      gt\n      tag_18\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_16\n      jumpi\n      revert(0x00, 0x00)\n    tag_18:\n      dup1\n      0x70a08231\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_12\n      jumpi\n      revert(0x00, 0x00)\n    tag_17:\n      dup1\n      0x18160ddd\n      gt\n      tag_19\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x4cd88b76\n      eq\n      tag_9\n      jumpi\n      revert(0x00, 0x00)\n    tag_19:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x1249c58b\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      revert(0x00, 0x00)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2697:2841  function name() public view virtual returns (string memory) {... */\n    tag_3:\n      tag_20\n      tag_21\n      jump\t// in\n    tag_20:\n      mload(0x40)\n      tag_22\n      swap2\n      swap1\n      tag_23\n      jump\t// in\n    tag_22:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5191:5377  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_4:\n      tag_24\n      tag_25\n      calldatasize\n      0x04\n      tag_26\n      jump\t// in\n    tag_25:\n      tag_27\n      jump\t// in\n    tag_24:\n      mload(0x40)\n        /* \"#utility.yul\":1085:1099   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1078:1100   */\n      iszero\n        /* \"#utility.yul\":1060:1101   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1048:1050   */\n      0x20\n        /* \"#utility.yul\":1033:1051   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5191:5377  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n      tag_22\n        /* \"#utility.yul\":920:1107   */\n      jump\n        /* \"contracts/Mock/CustomToken.sol\":573:673  function mint() public onlyOwner {... */\n    tag_5:\n      tag_30\n      tag_31\n      jump\t// in\n    tag_30:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3877:4029  function totalSupply() public view virtual returns (uint256) {... */\n    tag_6:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4008:4022  $._totalSupply */\n      sload(0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace02)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3877:4029  function totalSupply() public view virtual returns (uint256) {... */\n    tag_32:\n      mload(0x40)\n        /* \"#utility.yul\":1258:1283   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1246:1248   */\n      0x20\n        /* \"#utility.yul\":1231:1249   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3877:4029  function totalSupply() public view virtual returns (uint256) {... */\n      tag_22\n        /* \"#utility.yul\":1112:1289   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5969:6213  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_7:\n      tag_24\n      tag_37\n      calldatasize\n      0x04\n      tag_38\n      jump\t// in\n    tag_37:\n      tag_39\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3735:3817  function decimals() public view virtual returns (uint8) {... */\n    tag_8:\n      mload(0x40)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3808:3810  18 */\n      0x12\n        /* \"#utility.yul\":1815:1851   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1803:1805   */\n      0x20\n        /* \"#utility.yul\":1788:1806   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3735:3817  function decimals() public view virtual returns (uint8) {... */\n      tag_22\n        /* \"#utility.yul\":1673:1857   */\n      jump\n        /* \"contracts/Mock/CustomToken.sol\":330:567  function initialize(string memory name, string memory symbol)... */\n    tag_9:\n      tag_30\n      tag_46\n      calldatasize\n      0x04\n      tag_47\n      jump\t// in\n    tag_46:\n      tag_48\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4087:4258  function balanceOf(address account) public view virtual returns (uint256) {... */\n    tag_10:\n      tag_32\n      tag_50\n      calldatasize\n      0x04\n      tag_51\n      jump\t// in\n    tag_50:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4231:4251  $._balances[account] */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4152:4159  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4231:4251  $._balances[account] */\n      swap1\n      dup2\n      mstore\n      mload(0x00)\n      codecopy(0x00, data_3874827173e8df9f34323b12b251d1d3c53926ce129e30a0d69f1d47c277041b, 0x20)\n      mload(0x00)\n      swap1\n      0x00\n      mstore\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4087:4258  function balanceOf(address account) public view virtual returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3155:3256  function renounceOwnership() public virtual onlyOwner {... */\n    tag_11:\n      tag_30\n      tag_55\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2441:2585  function owner() public view virtual returns (address) {... */\n    tag_12:\n      tag_56\n      tag_57\n      jump\t// in\n    tag_56:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3623:3655   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":3605:3656   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3593:3595   */\n      0x20\n        /* \"#utility.yul\":3578:3596   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2441:2585  function owner() public view virtual returns (address) {... */\n      tag_22\n        /* \"#utility.yul\":3459:3662   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2954:3102  function symbol() public view virtual returns (string memory) {... */\n    tag_13:\n      tag_20\n      tag_61\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4453:4631  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_14:\n      tag_24\n      tag_64\n      calldatasize\n      0x04\n      tag_26\n      jump\t// in\n    tag_64:\n      tag_65\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4689:4884  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n    tag_15:\n      tag_32\n      tag_68\n      calldatasize\n      0x04\n      tag_69\n      jump\t// in\n    tag_68:\n      tag_70\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3405:3620  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_16:\n      tag_30\n      tag_73\n      calldatasize\n      0x04\n      tag_51\n      jump\t// in\n    tag_73:\n      tag_74\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2697:2841  function name() public view virtual returns (string memory) {... */\n    tag_21:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2827:2834  $._name */\n      0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace03\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2820:2834  return $._name */\n      dup1\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2742:2755  string memory */\n      0x60\n      swap2\n      mload(0x00)\n      codecopy(0x00, data_3874827173e8df9f34323b12b251d1d3c53926ce129e30a0d69f1d47c277041b, 0x20)\n      mload(0x00)\n      swap1\n      0x00\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2064:2084  ERC20StorageLocation */\n      swap2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2820:2834  return $._name */\n      tag_78\n      swap1\n      tag_79\n      jump\t// in\n    tag_78:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_80\n      swap1\n      tag_79\n      jump\t// in\n    tag_80:\n      dup1\n      iszero\n      tag_81\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_82\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_81)\n    tag_82:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_83:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_83\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_81:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2697:2841  function name() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5191:5377  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_27:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5264:5268  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":966:976  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5318:5349  _approve(owner, spender, value) */\n      tag_87\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":966:976  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5334:5341  spender */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5343:5348  value */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5318:5326  _approve */\n      tag_88\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5318:5349  _approve(owner, spender, value) */\n      jump\t// in\n    tag_87:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5366:5370  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5359:5370  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5191:5377  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_84:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Mock/CustomToken.sol\":573:673  function mint() public onlyOwner {... */\n    tag_31:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      tag_90\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2345  _checkOwner */\n      tag_91\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      jump\t// in\n    tag_90:\n        /* \"contracts/Mock/CustomToken.sol\":616:666  super._mint(owner(), 200_000_000 * 10**decimals()) */\n      tag_93\n        /* \"contracts/Mock/CustomToken.sol\":628:635  owner() */\n      tag_94\n        /* \"contracts/Mock/CustomToken.sol\":628:633  owner */\n      tag_57\n        /* \"contracts/Mock/CustomToken.sol\":628:635  owner() */\n      jump\t// in\n    tag_94:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3808:3810  18 */\n      0x12\n        /* \"contracts/Mock/CustomToken.sol\":655:665  decimals() */\n    tag_95:\n        /* \"contracts/Mock/CustomToken.sol\":651:665  10**decimals() */\n      tag_96\n      swap1\n        /* \"contracts/Mock/CustomToken.sol\":651:653  10 */\n      0x0a\n        /* \"contracts/Mock/CustomToken.sol\":651:665  10**decimals() */\n      tag_97\n      jump\t// in\n    tag_96:\n        /* \"contracts/Mock/CustomToken.sol\":637:665  200_000_000 * 10**decimals() */\n      tag_98\n      swap1\n        /* \"contracts/Mock/CustomToken.sol\":637:648  200_000_000 */\n      0x0bebc200\n        /* \"contracts/Mock/CustomToken.sol\":637:665  200_000_000 * 10**decimals() */\n      tag_99\n      jump\t// in\n    tag_98:\n        /* \"contracts/Mock/CustomToken.sol\":616:627  super._mint */\n      tag_100\n        /* \"contracts/Mock/CustomToken.sol\":616:666  super._mint(owner(), 200_000_000 * 10**decimals()) */\n      jump\t// in\n    tag_93:\n        /* \"contracts/Mock/CustomToken.sol\":573:673  function mint() public onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5969:6213  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_39:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6056:6060  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":966:976  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6112:6149  _spendAllowance(from, spender, value) */\n      tag_105\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6128:6132  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":966:976  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6143:6148  value */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6112:6127  _spendAllowance */\n      tag_106\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6112:6149  _spendAllowance(from, spender, value) */\n      jump\t// in\n    tag_105:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6159:6185  _transfer(from, to, value) */\n      tag_107\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6169:6173  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6175:6177  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6179:6184  value */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6159:6168  _transfer */\n      tag_108\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6159:6185  _transfer(from, to, value) */\n      jump\t// in\n    tag_107:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6202:6206  true */\n      0x01\n      swap5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5969:6213  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/Mock/CustomToken.sol\":330:567  function initialize(string memory name, string memory symbol)... */\n    tag_48:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4158:4188  InitializableStorage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4191:4217  _getInitializableStorage() */\n      tag_111\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4191:4215  _getInitializableStorage */\n      tag_112\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4191:4217  _getInitializableStorage() */\n      jump\t// in\n    tag_111:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4302:4317  $._initializing */\n      dup1\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4158:4217  InitializableStorage storage $ = _getInitializableStorage() */\n      swap1\n      swap2\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4302:4317  $._initializing */\n      0xff\n      shl(0x40, 0x01)\n      dup3\n      div\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4301:4317  !$._initializing */\n      iszero\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4348:4362  $._initialized */\n      0xffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4279:4298  bool isTopLevelCall */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4724:4740  initialized == 0 */\n      dup2\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4724:4758  initialized == 0 && isTopLevelCall */\n      dup1\n      iszero\n      tag_113\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4744:4758  isTopLevelCall */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4724:4758  initialized == 0 && isTopLevelCall */\n    tag_113:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4704:4758  bool initialSetup = initialized == 0 && isTopLevelCall */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4768:4785  bool construction */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4788:4799  initialized */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4788:4804  initialized == 1 */\n      0xffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4803:4804  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4788:4804  initialized == 1 */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4788:4838  initialized == 1 && address(this).code.length == 0 */\n      dup1\n      iszero\n      tag_114\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4816:4820  this */\n      address\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4808:4833  address(this).code.length */\n      extcodesize\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4808:4838  address(this).code.length == 0 */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4788:4838  initialized == 1 && address(this).code.length == 0 */\n    tag_114:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4768:4838  bool construction = initialized == 1 && address(this).code.length == 0 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4854:4866  initialSetup */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4853:4866  !initialSetup */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4853:4883  !initialSetup && !construction */\n      dup1\n      iszero\n      tag_115\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4871:4883  construction */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4870:4883  !construction */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4853:4883  !initialSetup && !construction */\n    tag_115:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4849:4940  if (!initialSetup && !construction) {... */\n      iszero\n      tag_116\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4906:4929  InvalidInitialization() */\n      mload(0x40)\n      shl(0xe0, 0xf92ee8a9)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4849:4940  if (!initialSetup && !construction) {... */\n    tag_116:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4949:4967  $._initialized = 1 */\n      dup5\n      sload\n      not(0xffffffffffffffff)\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4966:4967  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4949:4967  $._initialized = 1 */\n      or\n      dup6\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4977:5044  if (isTopLevelCall) {... */\n      dup4\n      iszero\n      tag_117\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5011:5033  $._initializing = true */\n      dup5\n      sload\n      not(shl(0x40, 0xff))\n      and\n      shl(0x40, 0x01)\n      or\n      dup6\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4977:5044  if (isTopLevelCall) {... */\n    tag_117:\n        /* \"contracts/Mock/CustomToken.sol\":441:467  __Ownable_init(msg.sender) */\n      tag_119\n        /* \"contracts/Mock/CustomToken.sol\":456:466  msg.sender */\n      caller\n        /* \"contracts/Mock/CustomToken.sol\":441:455  __Ownable_init */\n      tag_120\n        /* \"contracts/Mock/CustomToken.sol\":441:467  __Ownable_init(msg.sender) */\n      jump\t// in\n    tag_119:\n        /* \"contracts/Mock/CustomToken.sol\":477:503  __ERC20_init(name, symbol) */\n      tag_121\n        /* \"contracts/Mock/CustomToken.sol\":490:494  name */\n      dup8\n        /* \"contracts/Mock/CustomToken.sol\":496:502  symbol */\n      dup8\n        /* \"contracts/Mock/CustomToken.sol\":477:489  __ERC20_init */\n      tag_122\n        /* \"contracts/Mock/CustomToken.sol\":477:503  __ERC20_init(name, symbol) */\n      jump\t// in\n    tag_121:\n        /* \"contracts/Mock/CustomToken.sol\":513:560  _mint(msg.sender, 200_000_000 * 10**decimals()) */\n      tag_123\n        /* \"contracts/Mock/CustomToken.sol\":519:529  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3808:3810  18 */\n      0x12\n        /* \"contracts/Mock/CustomToken.sol\":549:559  decimals() */\n      tag_95\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3735:3817  function decimals() public view virtual returns (uint8) {... */\n      jump\n        /* \"contracts/Mock/CustomToken.sol\":513:560  _mint(msg.sender, 200_000_000 * 10**decimals()) */\n    tag_123:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5068:5082  isTopLevelCall */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5064:5165  if (isTopLevelCall) {... */\n      iszero\n      tag_127\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5098:5121  $._initializing = false */\n      dup5\n      sload\n      not(shl(0x40, 0xff))\n      and\n      dup6\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5140:5154  Initialized(1) */\n      mload(0x40)\n      0x01\n        /* \"#utility.yul\":6207:6257   */\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5140:5154  Initialized(1) */\n      0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2\n      swap1\n        /* \"#utility.yul\":6195:6197   */\n      0x20\n        /* \"#utility.yul\":6180:6198   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5140:5154  Initialized(1) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5064:5165  if (isTopLevelCall) {... */\n    tag_127:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4092:5171  {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/Mock/CustomToken.sol\":330:567  function initialize(string memory name, string memory symbol)... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3155:3256  function renounceOwnership() public virtual onlyOwner {... */\n    tag_55:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      tag_133\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2345  _checkOwner */\n      tag_91\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      jump\t// in\n    tag_133:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3219:3249  _transferOwnership(address(0)) */\n      tag_93\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3246:3247  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3219:3237  _transferOwnership */\n      tag_136\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3219:3249  _transferOwnership(address(0)) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2441:2585  function owner() public view virtual returns (address) {... */\n    tag_57:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1313:1335  OwnableStorageLocation */\n      0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2570:2578  $._owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2441:2585  function owner() public view virtual returns (address) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2954:3102  function symbol() public view virtual returns (string memory) {... */\n    tag_61:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3086:3095  $._symbol */\n      0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace04\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3079:3095  return $._symbol */\n      dup1\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3001:3014  string memory */\n      0x60\n      swap2\n      mload(0x00)\n      codecopy(0x00, data_3874827173e8df9f34323b12b251d1d3c53926ce129e30a0d69f1d47c277041b, 0x20)\n      mload(0x00)\n      swap1\n      0x00\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2064:2084  ERC20StorageLocation */\n      swap2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3079:3095  return $._symbol */\n      tag_78\n      swap1\n      tag_79\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4453:4631  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_65:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4522:4526  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":966:976  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4576:4603  _transfer(owner, to, value) */\n      tag_87\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":966:976  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4593:4595  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4597:4602  value */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4576:4585  _transfer */\n      tag_108\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4576:4603  _transfer(owner, to, value) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4689:4884  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n    tag_70:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4848:4868  $._allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4769:4776  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4848:4868  $._allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4848:4861  $._allowances */\n      0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace01\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4848:4868  $._allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4848:4877  $._allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4689:4884  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3405:3620  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_74:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      tag_153\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2345  _checkOwner */\n      tag_91\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2334:2347  _checkOwner() */\n      jump\t// in\n    tag_153:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3489:3511  newOwner == address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3485:3576  if (newOwner == address(0)) {... */\n      tag_155\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3534:3565  OwnableInvalidOwner(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0x1e4fbdf7)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3562:3563  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3534:3565  OwnableInvalidOwner(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3605:3656   */\n      mstore\n        /* \"#utility.yul\":3578:3596   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3534:3565  OwnableInvalidOwner(address(0)) */\n    tag_156:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3485:3576  if (newOwner == address(0)) {... */\n    tag_155:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3585:3613  _transferOwnership(newOwner) */\n      tag_157\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3604:3612  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3585:3603  _transferOwnership */\n      tag_136\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3585:3613  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_157:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3405:3620  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9982:10110  function _approve(address owner, address spender, uint256 value) internal {... */\n    tag_88:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10066:10103  _approve(owner, spender, value, true) */\n      tag_161\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10075:10080  owner */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10082:10089  spender */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10091:10096  value */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10098:10102  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10066:10074  _approve */\n      tag_162\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10066:10103  _approve(owner, spender, value, true) */\n      jump\t// in\n    tag_161:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9982:10110  function _approve(address owner, address spender, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2658:2820  function _checkOwner() internal view virtual {... */\n    tag_91:\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":966:976  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2717:2724  owner() */\n      tag_165\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2717:2722  owner */\n      tag_57\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2717:2724  owner() */\n      jump\t// in\n    tag_165:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2717:2740  owner() != _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2713:2814  if (owner() != _msgSender()) {... */\n      tag_93\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2763:2803  OwnableUnauthorizedAccount(_msgSender()) */\n      mload(0x40)\n      shl(0xe0, 0x118cdaa7)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":966:976  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2763:2803  OwnableUnauthorizedAccount(_msgSender()) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3605:3656   */\n      mstore\n        /* \"#utility.yul\":3578:3596   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2763:2803  OwnableUnauthorizedAccount(_msgSender()) */\n      tag_156\n        /* \"#utility.yul\":3459:3662   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8714:8922  function _mint(address account, uint256 value) internal {... */\n    tag_100:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8784:8805  account == address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8780:8871  if (account == address(0)) {... */\n      tag_170\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8828:8860  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0xec442f05)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8857:8858  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8828:8860  ERC20InvalidReceiver(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3605:3656   */\n      mstore\n        /* \"#utility.yul\":3578:3596   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8828:8860  ERC20InvalidReceiver(address(0)) */\n      tag_156\n        /* \"#utility.yul\":3459:3662   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8780:8871  if (account == address(0)) {... */\n    tag_170:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8880:8915  _update(address(0), account, value) */\n      tag_172\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8896:8897  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8900:8907  account */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8909:8914  value */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8880:8887  _update */\n      tag_173\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8880:8915  _update(address(0), account, value) */\n      jump\t// in\n    tag_172:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8714:8922  function _mint(address account, uint256 value) internal {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11726:12202  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n    tag_106:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11825:11849  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11852:11877  allowance(owner, spender) */\n      tag_175\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11862:11867  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11869:11876  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11852:11861  allowance */\n      tag_70\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11852:11877  allowance(owner, spender) */\n      jump\t// in\n    tag_175:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11825:11877  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n      not(0x00)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11891:11907  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11891:11927  currentAllowance < type(uint256).max */\n      lt\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11887:12196  if (currentAllowance < type(uint256).max) {... */\n      iszero\n      tag_180\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11966:11971  value */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11947:11963  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11947:11971  currentAllowance < value */\n      lt\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11943:12073  if (currentAllowance < value) {... */\n      iszero\n      tag_177\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11998:12058  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      mload(0x40)\n      shl(0xe1, 0x7dc7a0d9)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":6488:6520   */\n      dup5\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11998:12058  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6470:6521   */\n      mstore\n        /* \"#utility.yul\":6537:6555   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":6530:6564   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":6580:6598   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":6573:6607   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":6443:6461   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11998:12058  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      tag_156\n        /* \"#utility.yul\":6268:6613   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11943:12073  if (currentAllowance < value) {... */\n    tag_177:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12114:12171  _approve(owner, spender, currentAllowance - value, false) */\n      tag_180\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12123:12128  owner */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12130:12137  spender */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12158:12163  value */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12139:12155  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12139:12163  currentAllowance - value */\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12165:12170  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12114:12122  _approve */\n      tag_162\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12114:12171  _approve(owner, spender, currentAllowance - value, false) */\n      jump\t// in\n    tag_180:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11815:12202  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11726:12202  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6586:6886  function _transfer(address from, address to, uint256 value) internal {... */\n    tag_108:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6669:6687  from == address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6665:6751  if (from == address(0)) {... */\n      tag_182\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6710:6740  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      shl(0xe1, 0x4b637e8f)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6737:6738  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6710:6740  ERC20InvalidSender(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3605:3656   */\n      mstore\n        /* \"#utility.yul\":3578:3596   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6710:6740  ERC20InvalidSender(address(0)) */\n      tag_156\n        /* \"#utility.yul\":3459:3662   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6665:6751  if (from == address(0)) {... */\n    tag_182:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6764:6780  to == address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6760:6846  if (to == address(0)) {... */\n      tag_184\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6803:6835  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0xec442f05)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6832:6833  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6803:6835  ERC20InvalidReceiver(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3605:3656   */\n      mstore\n        /* \"#utility.yul\":3578:3596   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6803:6835  ERC20InvalidReceiver(address(0)) */\n      tag_156\n        /* \"#utility.yul\":3459:3662   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6760:6846  if (to == address(0)) {... */\n    tag_184:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6855:6879  _update(from, to, value) */\n      tag_161\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6863:6867  from */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6869:6871  to */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6873:6878  value */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6855:6862  _update */\n      tag_173\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6855:6879  _update(from, to, value) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":9071:9276  function _getInitializableStorage() private pure returns (InitializableStorage storage $) {... */\n    tag_112:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":9129:9159  InitializableStorage storage $ */\n      0x00\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":3147:3213  0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00 */\n      0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":9186:9213  _initializableStorageSlot() */\n      tag_84\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8819:8941  function _initializableStorageSlot() internal pure virtual returns (bytes32) {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1847:1974  function __Ownable_init(address initialOwner) internal onlyInitializing {... */\n    tag_120:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6929:6949  _checkInitializing() */\n      tag_191\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6929:6947  _checkInitializing */\n      tag_192\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6929:6949  _checkInitializing() */\n      jump\t// in\n    tag_191:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1929:1967  __Ownable_init_unchained(initialOwner) */\n      tag_157\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1954:1966  initialOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1929:1953  __Ownable_init_unchained */\n      tag_195\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1929:1967  __Ownable_init_unchained(initialOwner) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2263:2410  function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {... */\n    tag_122:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6929:6949  _checkInitializing() */\n      tag_197\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6929:6947  _checkInitializing */\n      tag_192\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6929:6949  _checkInitializing() */\n      jump\t// in\n    tag_197:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2365:2403  __ERC20_init_unchained(name_, symbol_) */\n      tag_172\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2388:2393  name_ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2395:2402  symbol_ */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2365:2387  __ERC20_init_unchained */\n      tag_200\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2365:2403  __ERC20_init_unchained(name_, symbol_) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3774:4022  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_136:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1313:1335  OwnableStorageLocation */\n      0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3923:3931  $._owner */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3941:3960  $._owner = newOwner */\n      dup2\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup5\n      dup2\n      and\n      swap2\n      dup3\n      or\n      dup5\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3975:4015  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3923:3931  $._owner */\n      swap3\n      and\n      swap2\n      dup3\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3975:4015  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3847:3871  OwnableStorage storage $ */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3975:4015  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3837:4022  {... */\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3774:4022  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10957:11444  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n    tag_162:\n      mload(0x00)\n      codecopy(0x00, data_3874827173e8df9f34323b12b251d1d3c53926ce129e30a0d69f1d47c277041b, 0x20)\n      mload(0x00)\n      swap1\n      0x00\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11122:11141  owner == address(0) */\n      dup6\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11118:11207  if (owner == address(0)) {... */\n      tag_206\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11164:11196  ERC20InvalidApprover(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0xe602df05)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11193:11194  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11164:11196  ERC20InvalidApprover(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3605:3656   */\n      mstore\n        /* \"#utility.yul\":3578:3596   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11164:11196  ERC20InvalidApprover(address(0)) */\n      tag_156\n        /* \"#utility.yul\":3459:3662   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11118:11207  if (owner == address(0)) {... */\n    tag_206:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11220:11241  spender == address(0) */\n      dup5\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11216:11306  if (spender == address(0)) {... */\n      tag_208\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11264:11295  ERC20InvalidSpender(address(0)) */\n      mload(0x40)\n      shl(0xe1, 0x4a1406b1)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11292:11293  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11264:11295  ERC20InvalidSpender(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3605:3656   */\n      mstore\n        /* \"#utility.yul\":3578:3596   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11264:11295  ERC20InvalidSpender(address(0)) */\n      tag_156\n        /* \"#utility.yul\":3459:3662   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11216:11306  if (spender == address(0)) {... */\n    tag_208:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11315:11335  $._allowances[owner] */\n      dup1\n      dup7\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11315:11328  $._allowances */\n      0x01\n      dup4\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11315:11335  $._allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11315:11344  $._allowances[owner][spender] */\n      swap4\n      dup9\n      and\n      dup4\n      mstore\n      swap3\n      swap1\n      mstore\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11315:11352  $._allowances[owner][spender] = value */\n      dup4\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11362:11438  if (emitEvent) {... */\n      dup2\n      iszero\n      tag_210\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11412:11419  spender */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11396:11427  Approval(owner, spender, value) */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11405:11410  owner */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11396:11427  Approval(owner, spender, value) */\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11421:11426  value */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11396:11427  Approval(owner, spender, value) */\n      mload(0x40)\n      tag_211\n      swap2\n        /* \"#utility.yul\":1258:1283   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1246:1248   */\n      0x20\n        /* \"#utility.yul\":1231:1249   */\n      add\n      swap1\n        /* \"#utility.yul\":1112:1289   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11396:11427  Approval(owner, spender, value) */\n    tag_211:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11362:11438  if (emitEvent) {... */\n    tag_210:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11055:11444  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":10957:11444  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7201:8371  function _update(address from, address to, uint256 value) internal virtual {... */\n    tag_173:\n      mload(0x00)\n      codecopy(0x00, data_3874827173e8df9f34323b12b251d1d3c53926ce129e30a0d69f1d47c277041b, 0x20)\n      mload(0x00)\n      swap1\n      0x00\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7343:7361  from == address(0) */\n      dup5\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7339:7885  if (from == address(0)) {... */\n      tag_214\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7497:7502  value */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7479:7480  $ */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7479:7493  $._totalSupply */\n      0x02\n      add\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7479:7502  $._totalSupply += value */\n      dup3\n      dup3\n      sload\n      tag_215\n      swap2\n      swap1\n      tag_216\n      jump\t// in\n    tag_215:\n      swap1\n      swap2\n      sstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7339:7885  if (from == address(0)) {... */\n      tag_217\n      swap1\n      pop\n      jump\n    tag_214:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7555:7572  $._balances[from] */\n      dup5\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7533:7552  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7555:7572  $._balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup3\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7590:7609  fromBalance < value */\n      dup3\n      dup2\n      lt\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7586:7701  if (fromBalance < value) {... */\n      iszero\n      tag_218\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7636:7686  ERC20InsufficientBalance(from, fromBalance, value) */\n      mload(0x40)\n      shl(0xe2, 0x391434e3)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":6488:6520   */\n      dup7\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7636:7686  ERC20InsufficientBalance(from, fromBalance, value) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6470:6521   */\n      mstore\n        /* \"#utility.yul\":6537:6555   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":6530:6564   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":6580:6598   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":6573:6607   */\n      dup5\n      swap1\n      mstore\n        /* \"#utility.yul\":6443:6461   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7636:7686  ERC20InsufficientBalance(from, fromBalance, value) */\n      tag_156\n        /* \"#utility.yul\":6268:6613   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7586:7701  if (fromBalance < value) {... */\n    tag_218:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7821:7838  $._balances[from] */\n      dup6\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7821:7832  $._balances */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7821:7838  $._balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup4\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7841:7860  fromBalance - value */\n      swap1\n      dup4\n      swap1\n      sub\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7821:7860  $._balances[from] = fromBalance - value */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7339:7885  if (from == address(0)) {... */\n    tag_217:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7899:7915  to == address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7895:8324  if (to == address(0)) {... */\n      tag_220\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8062:8076  $._totalSupply */\n      0x02\n      dup2\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8062:8085  $._totalSupply -= value */\n      dup1\n      sload\n      dup4\n      swap1\n      sub\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7895:8324  if (to == address(0)) {... */\n      jump(tag_221)\n    tag_220:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8275:8290  $._balances[to] */\n      dup4\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8275:8286  $._balances */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8275:8290  $._balances[to] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup3\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8275:8299  $._balances[to] += value */\n      dup1\n      sload\n      dup4\n      add\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7895:8324  if (to == address(0)) {... */\n    tag_221:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8354:8356  to */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8339:8364  Transfer(from, to, value) */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8348:8352  from */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8339:8364  Transfer(from, to, value) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8358:8363  value */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8339:8364  Transfer(from, to, value) */\n      mload(0x40)\n      tag_222\n      swap2\n        /* \"#utility.yul\":1258:1283   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1246:1248   */\n      0x20\n        /* \"#utility.yul\":1231:1249   */\n      add\n      swap1\n        /* \"#utility.yul\":1112:1289   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8339:8364  Transfer(from, to, value) */\n    tag_222:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7276:8371  {... */\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7201:8371  function _update(address from, address to, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7082:7223  function _checkInitializing() internal view virtual {... */\n    tag_192:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7149:7166  _isInitializing() */\n      tag_225\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7149:7164  _isInitializing */\n      tag_226\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7149:7166  _isInitializing() */\n      jump\t// in\n    tag_225:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7144:7217  if (!_isInitializing()) {... */\n      tag_93\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7189:7206  NotInitializing() */\n      mload(0x40)\n      shl(0xe3, 0x1afcd79f)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1980:2215  function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {... */\n    tag_195:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6929:6949  _checkInitializing() */\n      tag_153\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6929:6947  _checkInitializing */\n      tag_192\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6929:6949  _checkInitializing() */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2416:2632  function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {... */\n    tag_200:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6929:6949  _checkInitializing() */\n      tag_235\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6929:6947  _checkInitializing */\n      tag_192\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6929:6949  _checkInitializing() */\n      jump\t// in\n    tag_235:\n      mload(0x00)\n      codecopy(0x00, data_3874827173e8df9f34323b12b251d1d3c53926ce129e30a0d69f1d47c277041b, 0x20)\n      mload(0x00)\n      swap1\n      0x00\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2581:2588  $._name */\n      0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace03\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2581:2596  $._name = name_ */\n      tag_238\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2591:2596  name_ */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2581:2588  $._name */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2581:2596  $._name = name_ */\n      tag_239\n      jump\t// in\n    tag_238:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2606:2615  $._symbol */\n      0x04\n      dup2\n      add\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2606:2625  $._symbol = symbol_ */\n      tag_180\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2618:2625  symbol_ */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2606:2615  $._symbol */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2606:2625  $._symbol = symbol_ */\n      tag_239\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8485:8605  function _isInitializing() internal view returns (bool) {... */\n    tag_226:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8535:8539  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8558:8584  _getInitializableStorage() */\n      tag_242\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8558:8582  _getInitializableStorage */\n      tag_112\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8558:8584  _getInitializableStorage() */\n      jump\t// in\n    tag_242:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8558:8598  _getInitializableStorage()._initializing */\n      sload\n      shl(0x40, 0x01)\n      swap1\n      div\n      0xff\n      and\n      swap2\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8485:8605  function _isInitializing() internal view returns (bool) {... */\n      jump\t// out\n        /* \"#utility.yul\":14:432   */\n    tag_23:\n        /* \"#utility.yul\":163:165   */\n      0x20\n        /* \"#utility.yul\":152:161   */\n      dup2\n        /* \"#utility.yul\":145:166   */\n      mstore\n        /* \"#utility.yul\":126:130   */\n      0x00\n        /* \"#utility.yul\":195:201   */\n      dup3\n        /* \"#utility.yul\":189:202   */\n      mload\n        /* \"#utility.yul\":238:244   */\n      dup1\n        /* \"#utility.yul\":233:235   */\n      0x20\n        /* \"#utility.yul\":222:231   */\n      dup5\n        /* \"#utility.yul\":218:236   */\n      add\n        /* \"#utility.yul\":211:245   */\n      mstore\n        /* \"#utility.yul\":297:303   */\n      dup1\n        /* \"#utility.yul\":292:294   */\n      0x20\n        /* \"#utility.yul\":284:290   */\n      dup6\n        /* \"#utility.yul\":280:295   */\n      add\n        /* \"#utility.yul\":275:277   */\n      0x40\n        /* \"#utility.yul\":264:273   */\n      dup6\n        /* \"#utility.yul\":260:278   */\n      add\n        /* \"#utility.yul\":254:304   */\n      mcopy\n        /* \"#utility.yul\":353:354   */\n      0x00\n        /* \"#utility.yul\":348:350   */\n      0x40\n        /* \"#utility.yul\":339:345   */\n      dup3\n        /* \"#utility.yul\":328:337   */\n      dup6\n        /* \"#utility.yul\":324:346   */\n      add\n        /* \"#utility.yul\":320:351   */\n      add\n        /* \"#utility.yul\":313:355   */\n      mstore\n        /* \"#utility.yul\":423:425   */\n      0x40\n        /* \"#utility.yul\":416:418   */\n      0x1f\n        /* \"#utility.yul\":412:419   */\n      not\n        /* \"#utility.yul\":407:409   */\n      0x1f\n        /* \"#utility.yul\":399:405   */\n      dup4\n        /* \"#utility.yul\":395:410   */\n      add\n        /* \"#utility.yul\":391:420   */\n      and\n        /* \"#utility.yul\":380:389   */\n      dup5\n        /* \"#utility.yul\":376:421   */\n      add\n        /* \"#utility.yul\":372:426   */\n      add\n        /* \"#utility.yul\":364:426   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":14:432   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":437:610   */\n    tag_243:\n        /* \"#utility.yul\":505:525   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":554:585   */\n      dup2\n      and\n        /* \"#utility.yul\":544:586   */\n      dup2\n      eq\n        /* \"#utility.yul\":534:604   */\n      tag_255\n      jumpi\n        /* \"#utility.yul\":600:601   */\n      0x00\n        /* \"#utility.yul\":597:598   */\n      0x00\n        /* \"#utility.yul\":590:602   */\n      revert\n        /* \"#utility.yul\":534:604   */\n    tag_255:\n        /* \"#utility.yul\":437:610   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":615:915   */\n    tag_26:\n        /* \"#utility.yul\":683:689   */\n      0x00\n        /* \"#utility.yul\":691:697   */\n      0x00\n        /* \"#utility.yul\":744:746   */\n      0x40\n        /* \"#utility.yul\":732:741   */\n      dup4\n        /* \"#utility.yul\":723:730   */\n      dup6\n        /* \"#utility.yul\":719:742   */\n      sub\n        /* \"#utility.yul\":715:747   */\n      slt\n        /* \"#utility.yul\":712:764   */\n      iszero\n      tag_257\n      jumpi\n        /* \"#utility.yul\":760:761   */\n      0x00\n        /* \"#utility.yul\":757:758   */\n      0x00\n        /* \"#utility.yul\":750:762   */\n      revert\n        /* \"#utility.yul\":712:764   */\n    tag_257:\n        /* \"#utility.yul\":783:812   */\n      tag_258\n        /* \"#utility.yul\":802:811   */\n      dup4\n        /* \"#utility.yul\":783:812   */\n      tag_243\n      jump\t// in\n    tag_258:\n        /* \"#utility.yul\":773:812   */\n      swap5\n        /* \"#utility.yul\":881:883   */\n      0x20\n        /* \"#utility.yul\":866:884   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":853:885   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":615:915   */\n      jump\t// out\n        /* \"#utility.yul\":1294:1668   */\n    tag_38:\n        /* \"#utility.yul\":1371:1377   */\n      0x00\n        /* \"#utility.yul\":1379:1385   */\n      0x00\n        /* \"#utility.yul\":1387:1393   */\n      0x00\n        /* \"#utility.yul\":1440:1442   */\n      0x60\n        /* \"#utility.yul\":1428:1437   */\n      dup5\n        /* \"#utility.yul\":1419:1426   */\n      dup7\n        /* \"#utility.yul\":1415:1438   */\n      sub\n        /* \"#utility.yul\":1411:1443   */\n      slt\n        /* \"#utility.yul\":1408:1460   */\n      iszero\n      tag_262\n      jumpi\n        /* \"#utility.yul\":1456:1457   */\n      0x00\n        /* \"#utility.yul\":1453:1454   */\n      0x00\n        /* \"#utility.yul\":1446:1458   */\n      revert\n        /* \"#utility.yul\":1408:1460   */\n    tag_262:\n        /* \"#utility.yul\":1479:1508   */\n      tag_263\n        /* \"#utility.yul\":1498:1507   */\n      dup5\n        /* \"#utility.yul\":1479:1508   */\n      tag_243\n      jump\t// in\n    tag_263:\n        /* \"#utility.yul\":1469:1508   */\n      swap3\n      pop\n        /* \"#utility.yul\":1527:1565   */\n      tag_264\n        /* \"#utility.yul\":1561:1563   */\n      0x20\n        /* \"#utility.yul\":1550:1559   */\n      dup6\n        /* \"#utility.yul\":1546:1564   */\n      add\n        /* \"#utility.yul\":1527:1565   */\n      tag_243\n      jump\t// in\n    tag_264:\n        /* \"#utility.yul\":1294:1668   */\n      swap3\n      swap6\n        /* \"#utility.yul\":1517:1565   */\n      swap3\n      swap5\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1634:1636   */\n      0x40\n        /* \"#utility.yul\":1619:1637   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":1606:1638   */\n      calldataload\n      swap1\n        /* \"#utility.yul\":1294:1668   */\n      jump\t// out\n        /* \"#utility.yul\":1862:1989   */\n    tag_244:\n        /* \"#utility.yul\":1923:1933   */\n      0x4e487b71\n        /* \"#utility.yul\":1918:1921   */\n      0xe0\n        /* \"#utility.yul\":1914:1934   */\n      shl\n        /* \"#utility.yul\":1911:1912   */\n      0x00\n        /* \"#utility.yul\":1904:1935   */\n      mstore\n        /* \"#utility.yul\":1954:1958   */\n      0x41\n        /* \"#utility.yul\":1951:1952   */\n      0x04\n        /* \"#utility.yul\":1944:1959   */\n      mstore\n        /* \"#utility.yul\":1978:1982   */\n      0x24\n        /* \"#utility.yul\":1975:1976   */\n      0x00\n        /* \"#utility.yul\":1968:1983   */\n      revert\n        /* \"#utility.yul\":1994:2720   */\n    tag_245:\n        /* \"#utility.yul\":2037:2042   */\n      0x00\n        /* \"#utility.yul\":2090:2093   */\n      dup3\n        /* \"#utility.yul\":2083:2087   */\n      0x1f\n        /* \"#utility.yul\":2075:2081   */\n      dup4\n        /* \"#utility.yul\":2071:2088   */\n      add\n        /* \"#utility.yul\":2067:2094   */\n      slt\n        /* \"#utility.yul\":2057:2112   */\n      tag_268\n      jumpi\n        /* \"#utility.yul\":2108:2109   */\n      0x00\n        /* \"#utility.yul\":2105:2106   */\n      0x00\n        /* \"#utility.yul\":2098:2110   */\n      revert\n        /* \"#utility.yul\":2057:2112   */\n    tag_268:\n        /* \"#utility.yul\":2148:2154   */\n      dup2\n        /* \"#utility.yul\":2135:2155   */\n      calldataload\n        /* \"#utility.yul\":2178:2196   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2170:2176   */\n      dup2\n        /* \"#utility.yul\":2167:2197   */\n      gt\n        /* \"#utility.yul\":2164:2220   */\n      iszero\n      tag_270\n      jumpi\n        /* \"#utility.yul\":2200:2218   */\n      tag_270\n      tag_244\n      jump\t// in\n    tag_270:\n        /* \"#utility.yul\":2249:2251   */\n      0x40\n        /* \"#utility.yul\":2243:2252   */\n      mload\n        /* \"#utility.yul\":2341:2343   */\n      0x1f\n        /* \"#utility.yul\":2303:2320   */\n      dup3\n      add\n      not(0x1f)\n        /* \"#utility.yul\":2299:2330   */\n      swap1\n      dup2\n      and\n        /* \"#utility.yul\":2332:2334   */\n      0x3f\n        /* \"#utility.yul\":2295:2335   */\n      add\n        /* \"#utility.yul\":2291:2345   */\n      and\n        /* \"#utility.yul\":2279:2346   */\n      dup2\n      add\n        /* \"#utility.yul\":2376:2394   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2361:2395   */\n      dup2\n      gt\n        /* \"#utility.yul\":2397:2419   */\n      dup3\n      dup3\n      lt\n        /* \"#utility.yul\":2358:2420   */\n      or\n        /* \"#utility.yul\":2355:2443   */\n      iszero\n      tag_272\n      jumpi\n        /* \"#utility.yul\":2423:2441   */\n      tag_272\n      tag_244\n      jump\t// in\n    tag_272:\n        /* \"#utility.yul\":2459:2461   */\n      0x40\n        /* \"#utility.yul\":2452:2474   */\n      mstore\n        /* \"#utility.yul\":2483:2505   */\n      dup2\n      dup2\n      mstore\n        /* \"#utility.yul\":2524:2543   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":2545:2549   */\n      0x20\n        /* \"#utility.yul\":2520:2550   */\n      add\n        /* \"#utility.yul\":2517:2556   */\n      dup6\n      lt\n        /* \"#utility.yul\":2514:2573   */\n      iszero\n      tag_273\n      jumpi\n        /* \"#utility.yul\":2569:2570   */\n      0x00\n        /* \"#utility.yul\":2566:2567   */\n      0x00\n        /* \"#utility.yul\":2559:2571   */\n      revert\n        /* \"#utility.yul\":2514:2573   */\n    tag_273:\n        /* \"#utility.yul\":2633:2639   */\n      dup2\n        /* \"#utility.yul\":2626:2630   */\n      0x20\n        /* \"#utility.yul\":2618:2624   */\n      dup6\n        /* \"#utility.yul\":2614:2631   */\n      add\n        /* \"#utility.yul\":2607:2611   */\n      0x20\n        /* \"#utility.yul\":2599:2605   */\n      dup4\n        /* \"#utility.yul\":2595:2612   */\n      add\n        /* \"#utility.yul\":2582:2640   */\n      calldatacopy\n        /* \"#utility.yul\":2688:2689   */\n      0x00\n        /* \"#utility.yul\":2660:2679   */\n      swap2\n      dup2\n      add\n        /* \"#utility.yul\":2681:2685   */\n      0x20\n        /* \"#utility.yul\":2656:2686   */\n      add\n        /* \"#utility.yul\":2649:2690   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":2664:2670   */\n      swap4\n        /* \"#utility.yul\":1994:2720   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2725:3263   */\n    tag_47:\n        /* \"#utility.yul\":2813:2819   */\n      0x00\n        /* \"#utility.yul\":2821:2827   */\n      0x00\n        /* \"#utility.yul\":2874:2876   */\n      0x40\n        /* \"#utility.yul\":2862:2871   */\n      dup4\n        /* \"#utility.yul\":2853:2860   */\n      dup6\n        /* \"#utility.yul\":2849:2872   */\n      sub\n        /* \"#utility.yul\":2845:2877   */\n      slt\n        /* \"#utility.yul\":2842:2894   */\n      iszero\n      tag_275\n      jumpi\n        /* \"#utility.yul\":2890:2891   */\n      0x00\n        /* \"#utility.yul\":2887:2888   */\n      0x00\n        /* \"#utility.yul\":2880:2892   */\n      revert\n        /* \"#utility.yul\":2842:2894   */\n    tag_275:\n        /* \"#utility.yul\":2930:2939   */\n      dup3\n        /* \"#utility.yul\":2917:2940   */\n      calldataload\n        /* \"#utility.yul\":2963:2981   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2955:2961   */\n      dup2\n        /* \"#utility.yul\":2952:2982   */\n      gt\n        /* \"#utility.yul\":2949:2999   */\n      iszero\n      tag_276\n      jumpi\n        /* \"#utility.yul\":2995:2996   */\n      0x00\n        /* \"#utility.yul\":2992:2993   */\n      0x00\n        /* \"#utility.yul\":2985:2997   */\n      revert\n        /* \"#utility.yul\":2949:2999   */\n    tag_276:\n        /* \"#utility.yul\":3018:3068   */\n      tag_277\n        /* \"#utility.yul\":3060:3067   */\n      dup6\n        /* \"#utility.yul\":3051:3057   */\n      dup3\n        /* \"#utility.yul\":3040:3049   */\n      dup7\n        /* \"#utility.yul\":3036:3058   */\n      add\n        /* \"#utility.yul\":3018:3068   */\n      tag_245\n      jump\t// in\n    tag_277:\n        /* \"#utility.yul\":3008:3068   */\n      swap3\n      pop\n      pop\n        /* \"#utility.yul\":3121:3123   */\n      0x20\n        /* \"#utility.yul\":3110:3119   */\n      dup4\n        /* \"#utility.yul\":3106:3124   */\n      add\n        /* \"#utility.yul\":3093:3125   */\n      calldataload\n        /* \"#utility.yul\":3150:3168   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":3140:3148   */\n      dup2\n        /* \"#utility.yul\":3137:3169   */\n      gt\n        /* \"#utility.yul\":3134:3186   */\n      iszero\n      tag_278\n      jumpi\n        /* \"#utility.yul\":3182:3183   */\n      0x00\n        /* \"#utility.yul\":3179:3180   */\n      0x00\n        /* \"#utility.yul\":3172:3184   */\n      revert\n        /* \"#utility.yul\":3134:3186   */\n    tag_278:\n        /* \"#utility.yul\":3205:3257   */\n      tag_279\n        /* \"#utility.yul\":3249:3256   */\n      dup6\n        /* \"#utility.yul\":3238:3246   */\n      dup3\n        /* \"#utility.yul\":3227:3236   */\n      dup7\n        /* \"#utility.yul\":3223:3247   */\n      add\n        /* \"#utility.yul\":3205:3257   */\n      tag_245\n      jump\t// in\n    tag_279:\n        /* \"#utility.yul\":3195:3257   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":2725:3263   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3268:3454   */\n    tag_51:\n        /* \"#utility.yul\":3327:3333   */\n      0x00\n        /* \"#utility.yul\":3380:3382   */\n      0x20\n        /* \"#utility.yul\":3368:3377   */\n      dup3\n        /* \"#utility.yul\":3359:3366   */\n      dup5\n        /* \"#utility.yul\":3355:3378   */\n      sub\n        /* \"#utility.yul\":3351:3383   */\n      slt\n        /* \"#utility.yul\":3348:3400   */\n      iszero\n      tag_281\n      jumpi\n        /* \"#utility.yul\":3396:3397   */\n      0x00\n        /* \"#utility.yul\":3393:3394   */\n      0x00\n        /* \"#utility.yul\":3386:3398   */\n      revert\n        /* \"#utility.yul\":3348:3400   */\n    tag_281:\n        /* \"#utility.yul\":3419:3448   */\n      tag_282\n        /* \"#utility.yul\":3438:3447   */\n      dup3\n        /* \"#utility.yul\":3419:3448   */\n      tag_243\n      jump\t// in\n    tag_282:\n        /* \"#utility.yul\":3409:3448   */\n      swap4\n        /* \"#utility.yul\":3268:3454   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3667:3927   */\n    tag_69:\n        /* \"#utility.yul\":3735:3741   */\n      0x00\n        /* \"#utility.yul\":3743:3749   */\n      0x00\n        /* \"#utility.yul\":3796:3798   */\n      0x40\n        /* \"#utility.yul\":3784:3793   */\n      dup4\n        /* \"#utility.yul\":3775:3782   */\n      dup6\n        /* \"#utility.yul\":3771:3794   */\n      sub\n        /* \"#utility.yul\":3767:3799   */\n      slt\n        /* \"#utility.yul\":3764:3816   */\n      iszero\n      tag_285\n      jumpi\n        /* \"#utility.yul\":3812:3813   */\n      0x00\n        /* \"#utility.yul\":3809:3810   */\n      0x00\n        /* \"#utility.yul\":3802:3814   */\n      revert\n        /* \"#utility.yul\":3764:3816   */\n    tag_285:\n        /* \"#utility.yul\":3835:3864   */\n      tag_286\n        /* \"#utility.yul\":3854:3863   */\n      dup4\n        /* \"#utility.yul\":3835:3864   */\n      tag_243\n      jump\t// in\n    tag_286:\n        /* \"#utility.yul\":3825:3864   */\n      swap2\n      pop\n        /* \"#utility.yul\":3883:3921   */\n      tag_287\n        /* \"#utility.yul\":3917:3919   */\n      0x20\n        /* \"#utility.yul\":3906:3915   */\n      dup5\n        /* \"#utility.yul\":3902:3920   */\n      add\n        /* \"#utility.yul\":3883:3921   */\n      tag_243\n      jump\t// in\n    tag_287:\n        /* \"#utility.yul\":3873:3921   */\n      swap1\n      pop\n        /* \"#utility.yul\":3667:3927   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3932:4312   */\n    tag_79:\n        /* \"#utility.yul\":4011:4012   */\n      0x01\n        /* \"#utility.yul\":4007:4019   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":4054:4066   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":4075:4136   */\n      tag_289\n      jumpi\n        /* \"#utility.yul\":4129:4133   */\n      0x7f\n        /* \"#utility.yul\":4121:4127   */\n      dup3\n        /* \"#utility.yul\":4117:4134   */\n      and\n        /* \"#utility.yul\":4107:4134   */\n      swap2\n      pop\n        /* \"#utility.yul\":4075:4136   */\n    tag_289:\n        /* \"#utility.yul\":4182:4184   */\n      0x20\n        /* \"#utility.yul\":4174:4180   */\n      dup3\n        /* \"#utility.yul\":4171:4185   */\n      lt\n        /* \"#utility.yul\":4151:4169   */\n      dup2\n        /* \"#utility.yul\":4148:4186   */\n      sub\n        /* \"#utility.yul\":4145:4306   */\n      tag_290\n      jumpi\n        /* \"#utility.yul\":4228:4238   */\n      0x4e487b71\n        /* \"#utility.yul\":4223:4226   */\n      0xe0\n        /* \"#utility.yul\":4219:4239   */\n      shl\n        /* \"#utility.yul\":4216:4217   */\n      0x00\n        /* \"#utility.yul\":4209:4240   */\n      mstore\n        /* \"#utility.yul\":4263:4267   */\n      0x22\n        /* \"#utility.yul\":4260:4261   */\n      0x04\n        /* \"#utility.yul\":4253:4268   */\n      mstore\n        /* \"#utility.yul\":4291:4295   */\n      0x24\n        /* \"#utility.yul\":4288:4289   */\n      0x00\n        /* \"#utility.yul\":4281:4296   */\n      revert\n        /* \"#utility.yul\":4145:4306   */\n    tag_290:\n      pop\n        /* \"#utility.yul\":3932:4312   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4317:4444   */\n    tag_246:\n        /* \"#utility.yul\":4378:4388   */\n      0x4e487b71\n        /* \"#utility.yul\":4373:4376   */\n      0xe0\n        /* \"#utility.yul\":4369:4389   */\n      shl\n        /* \"#utility.yul\":4366:4367   */\n      0x00\n        /* \"#utility.yul\":4359:4390   */\n      mstore\n        /* \"#utility.yul\":4409:4413   */\n      0x11\n        /* \"#utility.yul\":4406:4407   */\n      0x04\n        /* \"#utility.yul\":4399:4414   */\n      mstore\n        /* \"#utility.yul\":4433:4437   */\n      0x24\n        /* \"#utility.yul\":4430:4431   */\n      0x00\n        /* \"#utility.yul\":4423:4438   */\n      revert\n        /* \"#utility.yul\":4449:4824   */\n    tag_247:\n        /* \"#utility.yul\":4537:4538   */\n      0x01\n        /* \"#utility.yul\":4555:4560   */\n      dup2\n        /* \"#utility.yul\":4569:4818   */\n    tag_293:\n        /* \"#utility.yul\":4590:4591   */\n      0x01\n        /* \"#utility.yul\":4580:4588   */\n      dup5\n        /* \"#utility.yul\":4577:4592   */\n      gt\n        /* \"#utility.yul\":4569:4818   */\n      iszero\n      tag_295\n      jumpi\n        /* \"#utility.yul\":4640:4644   */\n      dup1\n        /* \"#utility.yul\":4635:4638   */\n      dup6\n        /* \"#utility.yul\":4631:4645   */\n      div\n        /* \"#utility.yul\":4625:4629   */\n      dup2\n        /* \"#utility.yul\":4622:4646   */\n      gt\n        /* \"#utility.yul\":4619:4669   */\n      iszero\n      tag_297\n      jumpi\n        /* \"#utility.yul\":4649:4667   */\n      tag_297\n      tag_246\n      jump\t// in\n    tag_297:\n        /* \"#utility.yul\":4699:4700   */\n      0x01\n        /* \"#utility.yul\":4689:4697   */\n      dup5\n        /* \"#utility.yul\":4685:4701   */\n      and\n        /* \"#utility.yul\":4682:4731   */\n      iszero\n      tag_298\n      jumpi\n        /* \"#utility.yul\":4713:4729   */\n      swap1\n      dup2\n      mul\n      swap1\n        /* \"#utility.yul\":4682:4731   */\n    tag_298:\n        /* \"#utility.yul\":4796:4797   */\n      0x01\n        /* \"#utility.yul\":4792:4808   */\n      swap4\n      swap1\n      swap4\n      shr\n      swap3\n        /* \"#utility.yul\":4752:4767   */\n      dup1\n      mul\n        /* \"#utility.yul\":4569:4818   */\n      jump(tag_293)\n    tag_295:\n        /* \"#utility.yul\":4449:4824   */\n      swap4\n      pop\n      swap4\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4829:5731   */\n    tag_248:\n        /* \"#utility.yul\":4878:4883   */\n      0x00\n        /* \"#utility.yul\":4908:4916   */\n      dup3\n        /* \"#utility.yul\":4898:4978   */\n      tag_300\n      jumpi\n      pop\n        /* \"#utility.yul\":4949:4950   */\n      0x01\n        /* \"#utility.yul\":4963:4968   */\n      jump(tag_84)\n        /* \"#utility.yul\":4898:4978   */\n    tag_300:\n        /* \"#utility.yul\":4997:5001   */\n      dup2\n        /* \"#utility.yul\":4987:5063   */\n      tag_301\n      jumpi\n      pop\n        /* \"#utility.yul\":5034:5035   */\n      0x00\n        /* \"#utility.yul\":5048:5053   */\n      jump(tag_84)\n        /* \"#utility.yul\":4987:5063   */\n    tag_301:\n        /* \"#utility.yul\":5079:5083   */\n      dup2\n        /* \"#utility.yul\":5097:5098   */\n      0x01\n        /* \"#utility.yul\":5092:5151   */\n      dup2\n      eq\n      tag_303\n      jumpi\n        /* \"#utility.yul\":5165:5166   */\n      0x02\n        /* \"#utility.yul\":5160:5334   */\n      dup2\n      eq\n      tag_304\n      jumpi\n        /* \"#utility.yul\":5072:5334   */\n      jump(tag_302)\n        /* \"#utility.yul\":5092:5151   */\n    tag_303:\n        /* \"#utility.yul\":5122:5123   */\n      0x01\n        /* \"#utility.yul\":5113:5123   */\n      swap2\n      pop\n        /* \"#utility.yul\":5136:5141   */\n      pop\n      jump(tag_84)\n        /* \"#utility.yul\":5160:5334   */\n    tag_304:\n        /* \"#utility.yul\":5197:5200   */\n      0xff\n        /* \"#utility.yul\":5187:5195   */\n      dup5\n        /* \"#utility.yul\":5184:5201   */\n      gt\n        /* \"#utility.yul\":5181:5224   */\n      iszero\n      tag_306\n      jumpi\n        /* \"#utility.yul\":5204:5222   */\n      tag_306\n      tag_246\n      jump\t// in\n    tag_306:\n      pop\n      pop\n        /* \"#utility.yul\":5260:5261   */\n      0x01\n        /* \"#utility.yul\":5246:5262   */\n      dup3\n      shl\n        /* \"#utility.yul\":5319:5324   */\n      jump(tag_84)\n        /* \"#utility.yul\":5072:5334   */\n    tag_302:\n      pop\n        /* \"#utility.yul\":5418:5420   */\n      0x20\n        /* \"#utility.yul\":5408:5416   */\n      dup4\n        /* \"#utility.yul\":5405:5421   */\n      lt\n        /* \"#utility.yul\":5399:5402   */\n      0x0133\n        /* \"#utility.yul\":5393:5397   */\n      dup4\n        /* \"#utility.yul\":5390:5403   */\n      lt\n        /* \"#utility.yul\":5386:5422   */\n      and\n        /* \"#utility.yul\":5380:5382   */\n      0x4e\n        /* \"#utility.yul\":5370:5378   */\n      dup5\n        /* \"#utility.yul\":5367:5383   */\n      lt\n        /* \"#utility.yul\":5362:5364   */\n      0x0b\n        /* \"#utility.yul\":5356:5360   */\n      dup5\n        /* \"#utility.yul\":5353:5365   */\n      lt\n        /* \"#utility.yul\":5349:5384   */\n      and\n        /* \"#utility.yul\":5346:5423   */\n      or\n        /* \"#utility.yul\":5343:5546   */\n      iszero\n      tag_307\n      jumpi\n      pop\n        /* \"#utility.yul\":5455:5474   */\n      dup2\n      dup2\n      exp\n        /* \"#utility.yul\":5531:5536   */\n      jump(tag_84)\n        /* \"#utility.yul\":5343:5546   */\n    tag_307:\n        /* \"#utility.yul\":5578:5620   */\n      tag_308\n      not(0x00)\n        /* \"#utility.yul\":5603:5611   */\n      dup5\n        /* \"#utility.yul\":5597:5601   */\n      dup5\n        /* \"#utility.yul\":5578:5620   */\n      tag_247\n      jump\t// in\n    tag_308:\n        /* \"#utility.yul\":5656:5662   */\n      dup1\n        /* \"#utility.yul\":5652:5653   */\n      0x00\n        /* \"#utility.yul\":5648:5654   */\n      not\n        /* \"#utility.yul\":5644:5663   */\n      div\n        /* \"#utility.yul\":5635:5642   */\n      dup3\n        /* \"#utility.yul\":5632:5664   */\n      gt\n        /* \"#utility.yul\":5629:5687   */\n      iszero\n      tag_310\n      jumpi\n        /* \"#utility.yul\":5667:5685   */\n      tag_310\n      tag_246\n      jump\t// in\n    tag_310:\n        /* \"#utility.yul\":5705:5725   */\n      mul\n      swap4\n        /* \"#utility.yul\":4829:5731   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5736:5876   */\n    tag_97:\n        /* \"#utility.yul\":5794:5799   */\n      0x00\n        /* \"#utility.yul\":5823:5870   */\n      tag_282\n        /* \"#utility.yul\":5864:5868   */\n      0xff\n        /* \"#utility.yul\":5854:5862   */\n      dup5\n        /* \"#utility.yul\":5850:5869   */\n      and\n        /* \"#utility.yul\":5844:5848   */\n      dup4\n        /* \"#utility.yul\":5823:5870   */\n      tag_248\n      jump\t// in\n        /* \"#utility.yul\":5881:6049   */\n    tag_99:\n        /* \"#utility.yul\":5954:5963   */\n      dup1\n      dup3\n      mul\n        /* \"#utility.yul\":5985:5994   */\n      dup2\n      iszero\n        /* \"#utility.yul\":6002:6017   */\n      dup3\n      dup3\n      div\n        /* \"#utility.yul\":5996:6018   */\n      dup5\n      eq\n        /* \"#utility.yul\":5982:6019   */\n      or\n        /* \"#utility.yul\":5972:6043   */\n      tag_84\n      jumpi\n        /* \"#utility.yul\":6023:6041   */\n      tag_84\n      tag_246\n      jump\t// in\n        /* \"#utility.yul\":6618:6743   */\n    tag_216:\n        /* \"#utility.yul\":6683:6692   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":6704:6714   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":6701:6737   */\n      iszero\n      tag_84\n      jumpi\n        /* \"#utility.yul\":6717:6735   */\n      tag_84\n      tag_246\n      jump\t// in\n        /* \"#utility.yul\":6874:7392   */\n    tag_250:\n        /* \"#utility.yul\":6976:6978   */\n      0x1f\n        /* \"#utility.yul\":6971:6974   */\n      dup3\n        /* \"#utility.yul\":6968:6979   */\n      gt\n        /* \"#utility.yul\":6965:7386   */\n      iszero\n      tag_161\n      jumpi\n        /* \"#utility.yul\":7012:7017   */\n      dup1\n        /* \"#utility.yul\":7009:7010   */\n      0x00\n        /* \"#utility.yul\":7002:7018   */\n      mstore\n        /* \"#utility.yul\":7056:7060   */\n      0x20\n        /* \"#utility.yul\":7053:7054   */\n      0x00\n        /* \"#utility.yul\":7043:7061   */\n      keccak256\n        /* \"#utility.yul\":7126:7128   */\n      0x1f\n        /* \"#utility.yul\":7114:7124   */\n      dup5\n        /* \"#utility.yul\":7110:7129   */\n      add\n        /* \"#utility.yul\":7107:7108   */\n      0x05\n        /* \"#utility.yul\":7103:7130   */\n      shr\n        /* \"#utility.yul\":7097:7101   */\n      dup2\n        /* \"#utility.yul\":7093:7131   */\n      add\n        /* \"#utility.yul\":7162:7166   */\n      0x20\n        /* \"#utility.yul\":7150:7160   */\n      dup6\n        /* \"#utility.yul\":7147:7167   */\n      lt\n        /* \"#utility.yul\":7144:7191   */\n      iszero\n      tag_324\n      jumpi\n      pop\n        /* \"#utility.yul\":7185:7189   */\n      dup1\n        /* \"#utility.yul\":7144:7191   */\n    tag_324:\n        /* \"#utility.yul\":7240:7242   */\n      0x1f\n        /* \"#utility.yul\":7235:7238   */\n      dup5\n        /* \"#utility.yul\":7231:7243   */\n      add\n        /* \"#utility.yul\":7228:7229   */\n      0x05\n        /* \"#utility.yul\":7224:7244   */\n      shr\n        /* \"#utility.yul\":7218:7222   */\n      dup3\n        /* \"#utility.yul\":7214:7245   */\n      add\n        /* \"#utility.yul\":7204:7245   */\n      swap2\n      pop\n        /* \"#utility.yul\":7295:7376   */\n    tag_325:\n        /* \"#utility.yul\":7313:7315   */\n      dup2\n        /* \"#utility.yul\":7306:7311   */\n      dup2\n        /* \"#utility.yul\":7303:7316   */\n      lt\n        /* \"#utility.yul\":7295:7376   */\n      iszero\n      tag_210\n      jumpi\n        /* \"#utility.yul\":7372:7373   */\n      0x00\n        /* \"#utility.yul\":7358:7374   */\n      dup2\n      sstore\n        /* \"#utility.yul\":7339:7340   */\n      0x01\n        /* \"#utility.yul\":7328:7341   */\n      add\n        /* \"#utility.yul\":7295:7376   */\n      jump(tag_325)\n        /* \"#utility.yul\":7568:8867   */\n    tag_239:\n        /* \"#utility.yul\":7694:7697   */\n      dup2\n        /* \"#utility.yul\":7688:7698   */\n      mload\n        /* \"#utility.yul\":7721:7739   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":7713:7719   */\n      dup2\n        /* \"#utility.yul\":7710:7740   */\n      gt\n        /* \"#utility.yul\":7707:7763   */\n      iszero\n      tag_331\n      jumpi\n        /* \"#utility.yul\":7743:7761   */\n      tag_331\n      tag_244\n      jump\t// in\n    tag_331:\n        /* \"#utility.yul\":7772:7869   */\n      tag_332\n        /* \"#utility.yul\":7862:7868   */\n      dup2\n        /* \"#utility.yul\":7822:7860   */\n      tag_333\n        /* \"#utility.yul\":7854:7858   */\n      dup5\n        /* \"#utility.yul\":7848:7859   */\n      sload\n        /* \"#utility.yul\":7822:7860   */\n      tag_79\n      jump\t// in\n    tag_333:\n        /* \"#utility.yul\":7816:7820   */\n      dup5\n        /* \"#utility.yul\":7772:7869   */\n      tag_250\n      jump\t// in\n    tag_332:\n        /* \"#utility.yul\":7918:7922   */\n      0x20\n        /* \"#utility.yul\":7949:7951   */\n      0x1f\n        /* \"#utility.yul\":7938:7952   */\n      dup3\n      gt\n        /* \"#utility.yul\":7966:7967   */\n      0x01\n        /* \"#utility.yul\":7961:8610   */\n      dup2\n      eq\n      tag_335\n      jumpi\n        /* \"#utility.yul\":8654:8655   */\n      0x00\n        /* \"#utility.yul\":8671:8677   */\n      dup4\n        /* \"#utility.yul\":8668:8757   */\n      iszero\n      tag_336\n      jumpi\n      pop\n        /* \"#utility.yul\":8723:8742   */\n      dup5\n      dup3\n      add\n        /* \"#utility.yul\":8717:8743   */\n      mload\n        /* \"#utility.yul\":8668:8757   */\n    tag_336:\n      not(0x00)\n        /* \"#utility.yul\":7525:7526   */\n      0x03\n        /* \"#utility.yul\":7521:7532   */\n      dup6\n      swap1\n      shl\n        /* \"#utility.yul\":7517:7541   */\n      shr\n        /* \"#utility.yul\":7513:7542   */\n      not\n        /* \"#utility.yul\":7503:7543   */\n      and\n        /* \"#utility.yul\":7549:7550   */\n      0x01\n        /* \"#utility.yul\":7545:7556   */\n      dup5\n      swap1\n      shl\n        /* \"#utility.yul\":7500:7557   */\n      or\n        /* \"#utility.yul\":8770:8851   */\n      dup5\n      sstore\n        /* \"#utility.yul\":7931:8861   */\n      jump(tag_210)\n        /* \"#utility.yul\":7961:8610   */\n    tag_335:\n        /* \"#utility.yul\":6821:6822   */\n      0x00\n        /* \"#utility.yul\":6814:6828   */\n      dup5\n      dup2\n      mstore\n        /* \"#utility.yul\":6858:6862   */\n      0x20\n        /* \"#utility.yul\":6845:6863   */\n      dup2\n      keccak256\n      not(0x1f)\n        /* \"#utility.yul\":7997:8017   */\n      dup6\n      and\n      swap2\n        /* \"#utility.yul\":8115:8337   */\n    tag_339:\n        /* \"#utility.yul\":8129:8136   */\n      dup3\n        /* \"#utility.yul\":8126:8127   */\n      dup2\n        /* \"#utility.yul\":8123:8137   */\n      lt\n        /* \"#utility.yul\":8115:8337   */\n      iszero\n      tag_341\n      jumpi\n        /* \"#utility.yul\":8211:8230   */\n      dup8\n      dup6\n      add\n        /* \"#utility.yul\":8205:8231   */\n      mload\n        /* \"#utility.yul\":8190:8232   */\n      dup3\n      sstore\n        /* \"#utility.yul\":8318:8322   */\n      0x20\n        /* \"#utility.yul\":8303:8323   */\n      swap5\n      dup6\n      add\n      swap5\n        /* \"#utility.yul\":8271:8272   */\n      0x01\n        /* \"#utility.yul\":8259:8273   */\n      swap1\n      swap3\n      add\n      swap2\n        /* \"#utility.yul\":8145:8157   */\n      add\n        /* \"#utility.yul\":8115:8337   */\n      jump(tag_339)\n    tag_341:\n        /* \"#utility.yul\":8119:8122   */\n      pop\n        /* \"#utility.yul\":8365:8371   */\n      dup5\n        /* \"#utility.yul\":8356:8363   */\n      dup3\n        /* \"#utility.yul\":8353:8372   */\n      lt\n        /* \"#utility.yul\":8350:8551   */\n      iszero\n      tag_342\n      jumpi\n        /* \"#utility.yul\":8426:8445   */\n      dup7\n      dup5\n      add\n        /* \"#utility.yul\":8420:8446   */\n      mload\n      not(0x00)\n        /* \"#utility.yul\":8509:8510   */\n      0x03\n        /* \"#utility.yul\":8505:8519   */\n      dup8\n      swap1\n      shl\n        /* \"#utility.yul\":8521:8524   */\n      0xf8\n        /* \"#utility.yul\":8501:8525   */\n      and\n        /* \"#utility.yul\":8497:8534   */\n      shr\n        /* \"#utility.yul\":8493:8535   */\n      not\n        /* \"#utility.yul\":8478:8536   */\n      and\n        /* \"#utility.yul\":8463:8537   */\n      dup2\n      sstore\n        /* \"#utility.yul\":8350:8551   */\n    tag_342:\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":8597:8598   */\n      0x01\n        /* \"#utility.yul\":8581:8595   */\n      swap1\n      dup2\n      shl\n        /* \"#utility.yul\":8577:8599   */\n      add\n        /* \"#utility.yul\":8564:8600   */\n      swap1\n      sstore\n      pop\n        /* \"#utility.yul\":7568:8867   */\n      jump\t// out\n    stop\n    data_3874827173e8df9f34323b12b251d1d3c53926ce129e30a0d69f1d47c277041b 52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00\n\n    auxdata: 0xa2646970667358221220577cd2639d5cd81a4a7c622dd699faea6593f5c8302dd404c7e292ef7058cd1f64736f6c634300081e0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600e575f5ffd5b50610efb8061001c5f395ff3fe608060405234801561000f575f5ffd5b50600436106100e5575f3560e01c806370a082311161008857806395d89b411161006357806395d89b41146101f6578063a9059cbb146101fe578063dd62ed3e14610211578063f2fde38b14610224575f5ffd5b806370a082311461019a578063715018a6146101ce5780638da5cb5b146101d6575f5ffd5b806318160ddd116100c357806318160ddd1461013457806323b872dd14610165578063313ce567146101785780634cd88b7614610187575f5ffd5b806306fdde03146100e9578063095ea7b3146101075780631249c58b1461012a575b5f5ffd5b6100f1610237565b6040516100fe9190610a38565b60405180910390f35b61011a610115366004610a88565b6102f7565b60405190151581526020016100fe565b610132610310565b005b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace02545b6040519081526020016100fe565b61011a610173366004610ab0565b610346565b604051601281526020016100fe565b610132610195366004610b89565b610369565b6101576101a8366004610bee565b6001600160a01b03165f9081525f516020610ea65f395f51905f52602052604090205490565b610132610478565b6101de610489565b6040516001600160a01b0390911681526020016100fe565b6100f16104b7565b61011a61020c366004610a88565b6104f5565b61015761021f366004610c0e565b610502565b610132610232366004610bee565b61054b565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0380546060915f516020610ea65f395f51905f529161027590610c3f565b80601f01602080910402602001604051908101604052809291908181526020018280546102a190610c3f565b80156102ec5780601f106102c3576101008083540402835291602001916102ec565b820191905f5260205f20905b8154815290600101906020018083116102cf57829003601f168201915b505050505091505090565b5f3361030481858561058d565b60019150505b92915050565b61031861059f565b610344610323610489565b60125b61033190600a610d6e565b61033f90630bebc200610d7c565b6105d1565b565b5f33610353858285610609565b61035e85858561066d565b506001949350505050565b5f6103726106ca565b805490915060ff600160401b820416159067ffffffffffffffff165f811580156103995750825b90505f8267ffffffffffffffff1660011480156103b55750303b155b9050811580156103c3575080155b156103e15760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561040b57845460ff60401b1916600160401b1785555b610414336106f2565b61041e8787610703565b610429336012610326565b831561046f57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b61048061059f565b6103445f610715565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0480546060915f516020610ea65f395f51905f529161027590610c3f565b5f3361030481858561066d565b6001600160a01b039182165f9081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace016020908152604080832093909416825291909152205490565b61055361059f565b6001600160a01b03811661058157604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b61058a81610715565b50565b61059a8383836001610785565b505050565b336105a8610489565b6001600160a01b0316146103445760405163118cdaa760e01b8152336004820152602401610578565b6001600160a01b0382166105fa5760405163ec442f0560e01b81525f6004820152602401610578565b6106055f8383610869565b5050565b5f6106148484610502565b90505f19811015610667578181101561065957604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610578565b61066784848484035f610785565b50505050565b6001600160a01b03831661069657604051634b637e8f60e11b81525f6004820152602401610578565b6001600160a01b0382166106bf5760405163ec442f0560e01b81525f6004820152602401610578565b61059a838383610869565b5f807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0061030a565b6106fa6109a2565b61058a816109c7565b61070b6109a2565b61060582826109cf565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b5f516020610ea65f395f51905f526001600160a01b0385166107bc5760405163e602df0560e01b81525f6004820152602401610578565b6001600160a01b0384166107e557604051634a1406b160e11b81525f6004820152602401610578565b6001600160a01b038086165f9081526001830160209081526040808320938816835292905220839055811561086257836001600160a01b0316856001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258560405161085991815260200190565b60405180910390a35b5050505050565b5f516020610ea65f395f51905f526001600160a01b0384166108a35781816002015f8282546108989190610d93565b909155506109139050565b6001600160a01b0384165f90815260208290526040902054828110156108f55760405163391434e360e21b81526001600160a01b03861660048201526024810182905260448101849052606401610578565b6001600160a01b0385165f9081526020839052604090209083900390555b6001600160a01b03831661093157600281018054839003905561094f565b6001600160a01b0383165f9081526020829052604090208054830190555b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161099491815260200190565b60405180910390a350505050565b6109aa610a1f565b61034457604051631afcd79f60e31b815260040160405180910390fd5b6105536109a2565b6109d76109a2565b5f516020610ea65f395f51905f527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace03610a108482610dea565b50600481016106678382610dea565b5f610a286106ca565b54600160401b900460ff16919050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b0381168114610a83575f5ffd5b919050565b5f5f60408385031215610a99575f5ffd5b610aa283610a6d565b946020939093013593505050565b5f5f5f60608486031215610ac2575f5ffd5b610acb84610a6d565b9250610ad960208501610a6d565b929592945050506040919091013590565b634e487b7160e01b5f52604160045260245ffd5b5f82601f830112610b0d575f5ffd5b813567ffffffffffffffff811115610b2757610b27610aea565b604051601f8201601f19908116603f0116810167ffffffffffffffff81118282101715610b5657610b56610aea565b604052818152838201602001851015610b6d575f5ffd5b816020850160208301375f918101602001919091529392505050565b5f5f60408385031215610b9a575f5ffd5b823567ffffffffffffffff811115610bb0575f5ffd5b610bbc85828601610afe565b925050602083013567ffffffffffffffff811115610bd8575f5ffd5b610be485828601610afe565b9150509250929050565b5f60208284031215610bfe575f5ffd5b610c0782610a6d565b9392505050565b5f5f60408385031215610c1f575f5ffd5b610c2883610a6d565b9150610c3660208401610a6d565b90509250929050565b600181811c90821680610c5357607f821691505b602082108103610c7157634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52601160045260245ffd5b6001815b6001841115610cc657808504811115610caa57610caa610c77565b6001841615610cb857908102905b60019390931c928002610c8f565b935093915050565b5f82610cdc5750600161030a565b81610ce857505f61030a565b8160018114610cfe5760028114610d0857610d24565b600191505061030a565b60ff841115610d1957610d19610c77565b50506001821b61030a565b5060208310610133831016604e8410600b8410161715610d47575081810a61030a565b610d535f198484610c8b565b805f1904821115610d6657610d66610c77565b029392505050565b5f610c0760ff841683610cce565b808202811582820484141761030a5761030a610c77565b8082018082111561030a5761030a610c77565b601f82111561059a57805f5260205f20601f840160051c81016020851015610dcb5750805b601f840160051c820191505b81811015610862575f8155600101610dd7565b815167ffffffffffffffff811115610e0457610e04610aea565b610e1881610e128454610c3f565b84610da6565b6020601f821160018114610e4a575f8315610e335750848201515b5f19600385901b1c1916600184901b178455610862565b5f84815260208120601f198516915b82811015610e795787850151825560209485019460019092019101610e59565b5084821015610e9657868401515f19600387901b60f8161c191681555b50505050600190811b0190555056fe52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00a2646970667358221220577cd2639d5cd81a4a7c622dd699faea6593f5c8302dd404c7e292ef7058cd1f64736f6c634300081e0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xE JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0xEFB DUP1 PUSH2 0x1C PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xE5 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x88 JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x63 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1F6 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x211 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x224 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1CE JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1D6 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0xC3 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x134 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x4CD88B76 EQ PUSH2 0x187 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xE9 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x107 JUMPI DUP1 PUSH4 0x1249C58B EQ PUSH2 0x12A JUMPI JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0xF1 PUSH2 0x237 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFE SWAP2 SWAP1 PUSH2 0xA38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11A PUSH2 0x115 CALLDATASIZE PUSH1 0x4 PUSH2 0xA88 JUMP JUMPDEST PUSH2 0x2F7 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFE JUMP JUMPDEST PUSH2 0x132 PUSH2 0x310 JUMP JUMPDEST STOP JUMPDEST PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE02 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFE JUMP JUMPDEST PUSH2 0x11A PUSH2 0x173 CALLDATASIZE PUSH1 0x4 PUSH2 0xAB0 JUMP JUMPDEST PUSH2 0x346 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFE JUMP JUMPDEST PUSH2 0x132 PUSH2 0x195 CALLDATASIZE PUSH1 0x4 PUSH2 0xB89 JUMP JUMPDEST PUSH2 0x369 JUMP JUMPDEST PUSH2 0x157 PUSH2 0x1A8 CALLDATASIZE PUSH1 0x4 PUSH2 0xBEE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH0 MLOAD PUSH1 0x20 PUSH2 0xEA6 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x132 PUSH2 0x478 JUMP JUMPDEST PUSH2 0x1DE PUSH2 0x489 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFE JUMP JUMPDEST PUSH2 0xF1 PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x11A PUSH2 0x20C CALLDATASIZE PUSH1 0x4 PUSH2 0xA88 JUMP JUMPDEST PUSH2 0x4F5 JUMP JUMPDEST PUSH2 0x157 PUSH2 0x21F CALLDATASIZE PUSH1 0x4 PUSH2 0xC0E JUMP JUMPDEST PUSH2 0x502 JUMP JUMPDEST PUSH2 0x132 PUSH2 0x232 CALLDATASIZE PUSH1 0x4 PUSH2 0xBEE JUMP JUMPDEST PUSH2 0x54B JUMP JUMPDEST PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE03 DUP1 SLOAD PUSH1 0x60 SWAP2 PUSH0 MLOAD PUSH1 0x20 PUSH2 0xEA6 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP2 PUSH2 0x275 SWAP1 PUSH2 0xC3F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2A1 SWAP1 PUSH2 0xC3F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2EC JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2C3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2EC JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2CF JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x304 DUP2 DUP6 DUP6 PUSH2 0x58D JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x318 PUSH2 0x59F JUMP JUMPDEST PUSH2 0x344 PUSH2 0x323 PUSH2 0x489 JUMP JUMPDEST PUSH1 0x12 JUMPDEST PUSH2 0x331 SWAP1 PUSH1 0xA PUSH2 0xD6E JUMP JUMPDEST PUSH2 0x33F SWAP1 PUSH4 0xBEBC200 PUSH2 0xD7C JUMP JUMPDEST PUSH2 0x5D1 JUMP JUMPDEST JUMP JUMPDEST PUSH0 CALLER PUSH2 0x353 DUP6 DUP3 DUP6 PUSH2 0x609 JUMP JUMPDEST PUSH2 0x35E DUP6 DUP6 DUP6 PUSH2 0x66D JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x372 PUSH2 0x6CA JUMP JUMPDEST DUP1 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF PUSH1 0x1 PUSH1 0x40 SHL DUP3 DIV AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH0 DUP2 ISZERO DUP1 ISZERO PUSH2 0x399 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x3B5 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x3C3 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x3E1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0x40B JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH2 0x414 CALLER PUSH2 0x6F2 JUMP JUMPDEST PUSH2 0x41E DUP8 DUP8 PUSH2 0x703 JUMP JUMPDEST PUSH2 0x429 CALLER PUSH1 0x12 PUSH2 0x326 JUMP JUMPDEST DUP4 ISZERO PUSH2 0x46F JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x480 PUSH2 0x59F JUMP JUMPDEST PUSH2 0x344 PUSH0 PUSH2 0x715 JUMP JUMPDEST PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE04 DUP1 SLOAD PUSH1 0x60 SWAP2 PUSH0 MLOAD PUSH1 0x20 PUSH2 0xEA6 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP2 PUSH2 0x275 SWAP1 PUSH2 0xC3F JUMP JUMPDEST PUSH0 CALLER PUSH2 0x304 DUP2 DUP6 DUP6 PUSH2 0x66D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE01 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x553 PUSH2 0x59F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x581 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x58A DUP2 PUSH2 0x715 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x59A DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x785 JUMP JUMPDEST POP POP POP JUMP JUMPDEST CALLER PUSH2 0x5A8 PUSH2 0x489 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x344 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x578 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5FA JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x578 JUMP JUMPDEST PUSH2 0x605 PUSH0 DUP4 DUP4 PUSH2 0x869 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH2 0x614 DUP5 DUP5 PUSH2 0x502 JUMP JUMPDEST SWAP1 POP PUSH0 NOT DUP2 LT ISZERO PUSH2 0x667 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x659 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x578 JUMP JUMPDEST PUSH2 0x667 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x785 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x696 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x578 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x6BF JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x578 JUMP JUMPDEST PUSH2 0x59A DUP4 DUP4 DUP4 PUSH2 0x869 JUMP JUMPDEST PUSH0 DUP1 PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 PUSH2 0x30A JUMP JUMPDEST PUSH2 0x6FA PUSH2 0x9A2 JUMP JUMPDEST PUSH2 0x58A DUP2 PUSH2 0x9C7 JUMP JUMPDEST PUSH2 0x70B PUSH2 0x9A2 JUMP JUMPDEST PUSH2 0x605 DUP3 DUP3 PUSH2 0x9CF JUMP JUMPDEST PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 DUP3 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP3 AND SWAP2 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 MLOAD PUSH1 0x20 PUSH2 0xEA6 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x7BC JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x578 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x7E5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x578 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP4 SWAP1 SSTORE DUP2 ISZERO PUSH2 0x862 JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP6 PUSH1 0x40 MLOAD PUSH2 0x859 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH0 MLOAD PUSH1 0x20 PUSH2 0xEA6 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x8A3 JUMPI DUP2 DUP2 PUSH1 0x2 ADD PUSH0 DUP3 DUP3 SLOAD PUSH2 0x898 SWAP2 SWAP1 PUSH2 0xD93 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x913 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0x8F5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x578 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP4 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x931 JUMPI PUSH1 0x2 DUP2 ADD DUP1 SLOAD DUP4 SWAP1 SUB SWAP1 SSTORE PUSH2 0x94F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP4 ADD SWAP1 SSTORE JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x994 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0x9AA PUSH2 0xA1F JUMP JUMPDEST PUSH2 0x344 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AFCD79F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x553 PUSH2 0x9A2 JUMP JUMPDEST PUSH2 0x9D7 PUSH2 0x9A2 JUMP JUMPDEST PUSH0 MLOAD PUSH1 0x20 PUSH2 0xEA6 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE03 PUSH2 0xA10 DUP5 DUP3 PUSH2 0xDEA JUMP JUMPDEST POP PUSH1 0x4 DUP2 ADD PUSH2 0x667 DUP4 DUP3 PUSH2 0xDEA JUMP JUMPDEST PUSH0 PUSH2 0xA28 PUSH2 0x6CA JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE DUP1 PUSH1 0x20 DUP6 ADD PUSH1 0x40 DUP6 ADD MCOPY PUSH0 PUSH1 0x40 DUP3 DUP6 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP5 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA83 JUMPI PUSH0 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA99 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0xAA2 DUP4 PUSH2 0xA6D JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xAC2 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0xACB DUP5 PUSH2 0xA6D JUMP JUMPDEST SWAP3 POP PUSH2 0xAD9 PUSH1 0x20 DUP6 ADD PUSH2 0xA6D JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xB0D JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB27 JUMPI PUSH2 0xB27 PUSH2 0xAEA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xB56 JUMPI PUSH2 0xB56 PUSH2 0xAEA JUMP JUMPDEST PUSH1 0x40 MSTORE DUP2 DUP2 MSTORE DUP4 DUP3 ADD PUSH1 0x20 ADD DUP6 LT ISZERO PUSH2 0xB6D JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB9A JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xBB0 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0xBBC DUP6 DUP3 DUP7 ADD PUSH2 0xAFE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xBD8 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0xBE4 DUP6 DUP3 DUP7 ADD PUSH2 0xAFE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBFE JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0xC07 DUP3 PUSH2 0xA6D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC1F JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0xC28 DUP4 PUSH2 0xA6D JUMP JUMPDEST SWAP2 POP PUSH2 0xC36 PUSH1 0x20 DUP5 ADD PUSH2 0xA6D JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xC53 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xC71 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 DUP2 JUMPDEST PUSH1 0x1 DUP5 GT ISZERO PUSH2 0xCC6 JUMPI DUP1 DUP6 DIV DUP2 GT ISZERO PUSH2 0xCAA JUMPI PUSH2 0xCAA PUSH2 0xC77 JUMP JUMPDEST PUSH1 0x1 DUP5 AND ISZERO PUSH2 0xCB8 JUMPI SWAP1 DUP2 MUL SWAP1 JUMPDEST PUSH1 0x1 SWAP4 SWAP1 SWAP4 SHR SWAP3 DUP1 MUL PUSH2 0xC8F JUMP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH2 0xCDC JUMPI POP PUSH1 0x1 PUSH2 0x30A JUMP JUMPDEST DUP2 PUSH2 0xCE8 JUMPI POP PUSH0 PUSH2 0x30A JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0xCFE JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0xD08 JUMPI PUSH2 0xD24 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x30A JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0xD19 JUMPI PUSH2 0xD19 PUSH2 0xC77 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x30A JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0xD47 JUMPI POP DUP2 DUP2 EXP PUSH2 0x30A JUMP JUMPDEST PUSH2 0xD53 PUSH0 NOT DUP5 DUP5 PUSH2 0xC8B JUMP JUMPDEST DUP1 PUSH0 NOT DIV DUP3 GT ISZERO PUSH2 0xD66 JUMPI PUSH2 0xD66 PUSH2 0xC77 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xC07 PUSH1 0xFF DUP5 AND DUP4 PUSH2 0xCCE JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x30A JUMPI PUSH2 0x30A PUSH2 0xC77 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x30A JUMPI PUSH2 0x30A PUSH2 0xC77 JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x59A JUMPI DUP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0xDCB JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x862 JUMPI PUSH0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xDD7 JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE04 JUMPI PUSH2 0xE04 PUSH2 0xAEA JUMP JUMPDEST PUSH2 0xE18 DUP2 PUSH2 0xE12 DUP5 SLOAD PUSH2 0xC3F JUMP JUMPDEST DUP5 PUSH2 0xDA6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 DUP2 EQ PUSH2 0xE4A JUMPI PUSH0 DUP4 ISZERO PUSH2 0xE33 JUMPI POP DUP5 DUP3 ADD MLOAD JUMPDEST PUSH0 NOT PUSH1 0x3 DUP6 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP5 SWAP1 SHL OR DUP5 SSTORE PUSH2 0x862 JUMP JUMPDEST PUSH0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP6 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xE79 JUMPI DUP8 DUP6 ADD MLOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0xE59 JUMP JUMPDEST POP DUP5 DUP3 LT ISZERO PUSH2 0xE96 JUMPI DUP7 DUP5 ADD MLOAD PUSH0 NOT PUSH1 0x3 DUP8 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP INVALID MSTORE 0xC6 ORIGIN SELFBALANCE RJUMPI 0xF47D 0xB1 SWAP14 TLOAD RJUMP 0x4600 ADDRESS 0xC4 SWAP8 CREATE PUSH8 0xCA4CEBF71BA98EEA 0xDA 0xBE KECCAK256 0xBA 0xCE STOP LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMPI PUSH29 0xD2639D5CD81A4A7C622DD699FAEA6593F5C8302DD404C7E292EF7058CD 0x1F PUSH5 0x736F6C6343 STOP ADDMOD 0x1E STOP CALLER ",
							"sourceMap": "263:412:7:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@__ERC20_init_530": {
									"entryPoint": 1795,
									"id": 530,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@__ERC20_init_unchained_558": {
									"entryPoint": 2511,
									"id": 558,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@__Ownable_init_54": {
									"entryPoint": 1778,
									"id": 54,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@__Ownable_init_unchained_81": {
									"entryPoint": 2503,
									"id": 81,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_approve_1030": {
									"entryPoint": 1925,
									"id": 1030,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_approve_962": {
									"entryPoint": 1421,
									"id": 962,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_checkInitializing_370": {
									"entryPoint": 2466,
									"id": 370,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_checkOwner_122": {
									"entryPoint": 1439,
									"id": 122,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_getERC20Storage_514": {
									"entryPoint": null,
									"id": 514,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_getInitializableStorage_461": {
									"entryPoint": 1738,
									"id": 461,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_getOwnableStorage_25": {
									"entryPoint": null,
									"id": 25,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_initializableStorageSlot_447": {
									"entryPoint": null,
									"id": 447,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_isInitializing_438": {
									"entryPoint": 2591,
									"id": 438,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_mint_911": {
									"entryPoint": 1489,
									"id": 911,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_1107": {
									"entryPoint": null,
									"id": 1107,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_spendAllowance_1078": {
									"entryPoint": 1545,
									"id": 1078,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transferOwnership_193": {
									"entryPoint": 1813,
									"id": 193,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_transfer_786": {
									"entryPoint": 1645,
									"id": 786,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_878": {
									"entryPoint": 2153,
									"id": 878,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@allowance_683": {
									"entryPoint": 1282,
									"id": 683,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_707": {
									"entryPoint": 759,
									"id": 707,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_635": {
									"entryPoint": null,
									"id": 635,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_599": {
									"entryPoint": null,
									"id": 599,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@initialize_1407": {
									"entryPoint": 873,
									"id": 1407,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@mint_1426": {
									"entryPoint": 784,
									"id": 1426,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@name_574": {
									"entryPoint": 567,
									"id": 574,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@owner_105": {
									"entryPoint": 1161,
									"id": 105,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_136": {
									"entryPoint": 1144,
									"id": 136,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@symbol_590": {
									"entryPoint": 1207,
									"id": 590,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalSupply_615": {
									"entryPoint": null,
									"id": 615,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_739": {
									"entryPoint": 838,
									"id": 739,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transferOwnership_164": {
									"entryPoint": 1355,
									"id": 164,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@transfer_659": {
									"entryPoint": 1269,
									"id": 659,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_address": {
									"entryPoint": 2669,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_string": {
									"entryPoint": 2814,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 3054,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 3086,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 2736,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 2696,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr": {
									"entryPoint": 2953,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 2616,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_dataslot_string_storage": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 3475,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_helper": {
									"entryPoint": 3211,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 2
								},
								"checked_exp_t_uint256_t_uint8": {
									"entryPoint": 3438,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_unsigned": {
									"entryPoint": 3278,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 3452,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_string_storage": {
									"entryPoint": 3494,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 3562,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 3135,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 3191,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 2794,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:8869:8",
										"nodeType": "YulBlock",
										"src": "0:8869:8",
										"statements": [
											{
												"nativeSrc": "6:3:8",
												"nodeType": "YulBlock",
												"src": "6:3:8",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "135:297:8",
													"nodeType": "YulBlock",
													"src": "135:297:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "152:9:8",
																		"nodeType": "YulIdentifier",
																		"src": "152:9:8"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "163:2:8",
																		"nodeType": "YulLiteral",
																		"src": "163:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "145:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "145:6:8"
																},
																"nativeSrc": "145:21:8",
																"nodeType": "YulFunctionCall",
																"src": "145:21:8"
															},
															"nativeSrc": "145:21:8",
															"nodeType": "YulExpressionStatement",
															"src": "145:21:8"
														},
														{
															"nativeSrc": "175:27:8",
															"nodeType": "YulVariableDeclaration",
															"src": "175:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "195:6:8",
																		"nodeType": "YulIdentifier",
																		"src": "195:6:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "189:5:8",
																	"nodeType": "YulIdentifier",
																	"src": "189:5:8"
																},
																"nativeSrc": "189:13:8",
																"nodeType": "YulFunctionCall",
																"src": "189:13:8"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "179:6:8",
																	"nodeType": "YulTypedName",
																	"src": "179:6:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "222:9:8",
																				"nodeType": "YulIdentifier",
																				"src": "222:9:8"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "233:2:8",
																				"nodeType": "YulLiteral",
																				"src": "233:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "218:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "218:3:8"
																		},
																		"nativeSrc": "218:18:8",
																		"nodeType": "YulFunctionCall",
																		"src": "218:18:8"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "238:6:8",
																		"nodeType": "YulIdentifier",
																		"src": "238:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "211:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "211:6:8"
																},
																"nativeSrc": "211:34:8",
																"nodeType": "YulFunctionCall",
																"src": "211:34:8"
															},
															"nativeSrc": "211:34:8",
															"nodeType": "YulExpressionStatement",
															"src": "211:34:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "264:9:8",
																				"nodeType": "YulIdentifier",
																				"src": "264:9:8"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "275:2:8",
																				"nodeType": "YulLiteral",
																				"src": "275:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "260:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "260:3:8"
																		},
																		"nativeSrc": "260:18:8",
																		"nodeType": "YulFunctionCall",
																		"src": "260:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "284:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "284:6:8"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "292:2:8",
																				"nodeType": "YulLiteral",
																				"src": "292:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "280:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "280:3:8"
																		},
																		"nativeSrc": "280:15:8",
																		"nodeType": "YulFunctionCall",
																		"src": "280:15:8"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "297:6:8",
																		"nodeType": "YulIdentifier",
																		"src": "297:6:8"
																	}
																],
																"functionName": {
																	"name": "mcopy",
																	"nativeSrc": "254:5:8",
																	"nodeType": "YulIdentifier",
																	"src": "254:5:8"
																},
																"nativeSrc": "254:50:8",
																"nodeType": "YulFunctionCall",
																"src": "254:50:8"
															},
															"nativeSrc": "254:50:8",
															"nodeType": "YulExpressionStatement",
															"src": "254:50:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "328:9:8",
																						"nodeType": "YulIdentifier",
																						"src": "328:9:8"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "339:6:8",
																						"nodeType": "YulIdentifier",
																						"src": "339:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "324:3:8",
																					"nodeType": "YulIdentifier",
																					"src": "324:3:8"
																				},
																				"nativeSrc": "324:22:8",
																				"nodeType": "YulFunctionCall",
																				"src": "324:22:8"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "348:2:8",
																				"nodeType": "YulLiteral",
																				"src": "348:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "320:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "320:3:8"
																		},
																		"nativeSrc": "320:31:8",
																		"nodeType": "YulFunctionCall",
																		"src": "320:31:8"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "353:1:8",
																		"nodeType": "YulLiteral",
																		"src": "353:1:8",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "313:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "313:6:8"
																},
																"nativeSrc": "313:42:8",
																"nodeType": "YulFunctionCall",
																"src": "313:42:8"
															},
															"nativeSrc": "313:42:8",
															"nodeType": "YulExpressionStatement",
															"src": "313:42:8"
														},
														{
															"nativeSrc": "364:62:8",
															"nodeType": "YulAssignment",
															"src": "364:62:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "380:9:8",
																				"nodeType": "YulIdentifier",
																				"src": "380:9:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nativeSrc": "399:6:8",
																								"nodeType": "YulIdentifier",
																								"src": "399:6:8"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "407:2:8",
																								"nodeType": "YulLiteral",
																								"src": "407:2:8",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nativeSrc": "395:3:8",
																							"nodeType": "YulIdentifier",
																							"src": "395:3:8"
																						},
																						"nativeSrc": "395:15:8",
																						"nodeType": "YulFunctionCall",
																						"src": "395:15:8"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "416:2:8",
																								"nodeType": "YulLiteral",
																								"src": "416:2:8",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nativeSrc": "412:3:8",
																							"nodeType": "YulIdentifier",
																							"src": "412:3:8"
																						},
																						"nativeSrc": "412:7:8",
																						"nodeType": "YulFunctionCall",
																						"src": "412:7:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "391:3:8",
																					"nodeType": "YulIdentifier",
																					"src": "391:3:8"
																				},
																				"nativeSrc": "391:29:8",
																				"nodeType": "YulFunctionCall",
																				"src": "391:29:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "376:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "376:3:8"
																		},
																		"nativeSrc": "376:45:8",
																		"nodeType": "YulFunctionCall",
																		"src": "376:45:8"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "423:2:8",
																		"nodeType": "YulLiteral",
																		"src": "423:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "372:3:8",
																	"nodeType": "YulIdentifier",
																	"src": "372:3:8"
																},
																"nativeSrc": "372:54:8",
																"nodeType": "YulFunctionCall",
																"src": "372:54:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "364:4:8",
																	"nodeType": "YulIdentifier",
																	"src": "364:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "14:418:8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "104:9:8",
														"nodeType": "YulTypedName",
														"src": "104:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "115:6:8",
														"nodeType": "YulTypedName",
														"src": "115:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "126:4:8",
														"nodeType": "YulTypedName",
														"src": "126:4:8",
														"type": ""
													}
												],
												"src": "14:418:8"
											},
											{
												"body": {
													"nativeSrc": "486:124:8",
													"nodeType": "YulBlock",
													"src": "486:124:8",
													"statements": [
														{
															"nativeSrc": "496:29:8",
															"nodeType": "YulAssignment",
															"src": "496:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "518:6:8",
																		"nodeType": "YulIdentifier",
																		"src": "518:6:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "505:12:8",
																	"nodeType": "YulIdentifier",
																	"src": "505:12:8"
																},
																"nativeSrc": "505:20:8",
																"nodeType": "YulFunctionCall",
																"src": "505:20:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "496:5:8",
																	"nodeType": "YulIdentifier",
																	"src": "496:5:8"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "588:16:8",
																"nodeType": "YulBlock",
																"src": "588:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "597:1:8",
																					"nodeType": "YulLiteral",
																					"src": "597:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "600:1:8",
																					"nodeType": "YulLiteral",
																					"src": "600:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "590:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "590:6:8"
																			},
																			"nativeSrc": "590:12:8",
																			"nodeType": "YulFunctionCall",
																			"src": "590:12:8"
																		},
																		"nativeSrc": "590:12:8",
																		"nodeType": "YulExpressionStatement",
																		"src": "590:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "547:5:8",
																				"nodeType": "YulIdentifier",
																				"src": "547:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "558:5:8",
																						"nodeType": "YulIdentifier",
																						"src": "558:5:8"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "573:3:8",
																										"nodeType": "YulLiteral",
																										"src": "573:3:8",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "578:1:8",
																										"nodeType": "YulLiteral",
																										"src": "578:1:8",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "569:3:8",
																									"nodeType": "YulIdentifier",
																									"src": "569:3:8"
																								},
																								"nativeSrc": "569:11:8",
																								"nodeType": "YulFunctionCall",
																								"src": "569:11:8"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "582:1:8",
																								"nodeType": "YulLiteral",
																								"src": "582:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "565:3:8",
																							"nodeType": "YulIdentifier",
																							"src": "565:3:8"
																						},
																						"nativeSrc": "565:19:8",
																						"nodeType": "YulFunctionCall",
																						"src": "565:19:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "554:3:8",
																					"nodeType": "YulIdentifier",
																					"src": "554:3:8"
																				},
																				"nativeSrc": "554:31:8",
																				"nodeType": "YulFunctionCall",
																				"src": "554:31:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "544:2:8",
																			"nodeType": "YulIdentifier",
																			"src": "544:2:8"
																		},
																		"nativeSrc": "544:42:8",
																		"nodeType": "YulFunctionCall",
																		"src": "544:42:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "537:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "537:6:8"
																},
																"nativeSrc": "537:50:8",
																"nodeType": "YulFunctionCall",
																"src": "537:50:8"
															},
															"nativeSrc": "534:70:8",
															"nodeType": "YulIf",
															"src": "534:70:8"
														}
													]
												},
												"name": "abi_decode_address",
												"nativeSrc": "437:173:8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "465:6:8",
														"nodeType": "YulTypedName",
														"src": "465:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "476:5:8",
														"nodeType": "YulTypedName",
														"src": "476:5:8",
														"type": ""
													}
												],
												"src": "437:173:8"
											},
											{
												"body": {
													"nativeSrc": "702:213:8",
													"nodeType": "YulBlock",
													"src": "702:213:8",
													"statements": [
														{
															"body": {
																"nativeSrc": "748:16:8",
																"nodeType": "YulBlock",
																"src": "748:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "757:1:8",
																					"nodeType": "YulLiteral",
																					"src": "757:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "760:1:8",
																					"nodeType": "YulLiteral",
																					"src": "760:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "750:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "750:6:8"
																			},
																			"nativeSrc": "750:12:8",
																			"nodeType": "YulFunctionCall",
																			"src": "750:12:8"
																		},
																		"nativeSrc": "750:12:8",
																		"nodeType": "YulExpressionStatement",
																		"src": "750:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "723:7:8",
																				"nodeType": "YulIdentifier",
																				"src": "723:7:8"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "732:9:8",
																				"nodeType": "YulIdentifier",
																				"src": "732:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "719:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "719:3:8"
																		},
																		"nativeSrc": "719:23:8",
																		"nodeType": "YulFunctionCall",
																		"src": "719:23:8"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "744:2:8",
																		"nodeType": "YulLiteral",
																		"src": "744:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "715:3:8",
																	"nodeType": "YulIdentifier",
																	"src": "715:3:8"
																},
																"nativeSrc": "715:32:8",
																"nodeType": "YulFunctionCall",
																"src": "715:32:8"
															},
															"nativeSrc": "712:52:8",
															"nodeType": "YulIf",
															"src": "712:52:8"
														},
														{
															"nativeSrc": "773:39:8",
															"nodeType": "YulAssignment",
															"src": "773:39:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "802:9:8",
																		"nodeType": "YulIdentifier",
																		"src": "802:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "783:18:8",
																	"nodeType": "YulIdentifier",
																	"src": "783:18:8"
																},
																"nativeSrc": "783:29:8",
																"nodeType": "YulFunctionCall",
																"src": "783:29:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "773:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "773:6:8"
																}
															]
														},
														{
															"nativeSrc": "821:14:8",
															"nodeType": "YulVariableDeclaration",
															"src": "821:14:8",
															"value": {
																"kind": "number",
																"nativeSrc": "834:1:8",
																"nodeType": "YulLiteral",
																"src": "834:1:8",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "825:5:8",
																	"nodeType": "YulTypedName",
																	"src": "825:5:8",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "844:41:8",
															"nodeType": "YulAssignment",
															"src": "844:41:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "870:9:8",
																				"nodeType": "YulIdentifier",
																				"src": "870:9:8"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "881:2:8",
																				"nodeType": "YulLiteral",
																				"src": "881:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "866:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "866:3:8"
																		},
																		"nativeSrc": "866:18:8",
																		"nodeType": "YulFunctionCall",
																		"src": "866:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "853:12:8",
																	"nodeType": "YulIdentifier",
																	"src": "853:12:8"
																},
																"nativeSrc": "853:32:8",
																"nodeType": "YulFunctionCall",
																"src": "853:32:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "844:5:8",
																	"nodeType": "YulIdentifier",
																	"src": "844:5:8"
																}
															]
														},
														{
															"nativeSrc": "894:15:8",
															"nodeType": "YulAssignment",
															"src": "894:15:8",
															"value": {
																"name": "value",
																"nativeSrc": "904:5:8",
																"nodeType": "YulIdentifier",
																"src": "904:5:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "894:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "894:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nativeSrc": "615:300:8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "660:9:8",
														"nodeType": "YulTypedName",
														"src": "660:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "671:7:8",
														"nodeType": "YulTypedName",
														"src": "671:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "683:6:8",
														"nodeType": "YulTypedName",
														"src": "683:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "691:6:8",
														"nodeType": "YulTypedName",
														"src": "691:6:8",
														"type": ""
													}
												],
												"src": "615:300:8"
											},
											{
												"body": {
													"nativeSrc": "1015:92:8",
													"nodeType": "YulBlock",
													"src": "1015:92:8",
													"statements": [
														{
															"nativeSrc": "1025:26:8",
															"nodeType": "YulAssignment",
															"src": "1025:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1037:9:8",
																		"nodeType": "YulIdentifier",
																		"src": "1037:9:8"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1048:2:8",
																		"nodeType": "YulLiteral",
																		"src": "1048:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1033:3:8",
																	"nodeType": "YulIdentifier",
																	"src": "1033:3:8"
																},
																"nativeSrc": "1033:18:8",
																"nodeType": "YulFunctionCall",
																"src": "1033:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1025:4:8",
																	"nodeType": "YulIdentifier",
																	"src": "1025:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1067:9:8",
																		"nodeType": "YulIdentifier",
																		"src": "1067:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nativeSrc": "1092:6:8",
																						"nodeType": "YulIdentifier",
																						"src": "1092:6:8"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "1085:6:8",
																					"nodeType": "YulIdentifier",
																					"src": "1085:6:8"
																				},
																				"nativeSrc": "1085:14:8",
																				"nodeType": "YulFunctionCall",
																				"src": "1085:14:8"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nativeSrc": "1078:6:8",
																			"nodeType": "YulIdentifier",
																			"src": "1078:6:8"
																		},
																		"nativeSrc": "1078:22:8",
																		"nodeType": "YulFunctionCall",
																		"src": "1078:22:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1060:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "1060:6:8"
																},
																"nativeSrc": "1060:41:8",
																"nodeType": "YulFunctionCall",
																"src": "1060:41:8"
															},
															"nativeSrc": "1060:41:8",
															"nodeType": "YulExpressionStatement",
															"src": "1060:41:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nativeSrc": "920:187:8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "984:9:8",
														"nodeType": "YulTypedName",
														"src": "984:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "995:6:8",
														"nodeType": "YulTypedName",
														"src": "995:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1006:4:8",
														"nodeType": "YulTypedName",
														"src": "1006:4:8",
														"type": ""
													}
												],
												"src": "920:187:8"
											},
											{
												"body": {
													"nativeSrc": "1213:76:8",
													"nodeType": "YulBlock",
													"src": "1213:76:8",
													"statements": [
														{
															"nativeSrc": "1223:26:8",
															"nodeType": "YulAssignment",
															"src": "1223:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1235:9:8",
																		"nodeType": "YulIdentifier",
																		"src": "1235:9:8"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1246:2:8",
																		"nodeType": "YulLiteral",
																		"src": "1246:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1231:3:8",
																	"nodeType": "YulIdentifier",
																	"src": "1231:3:8"
																},
																"nativeSrc": "1231:18:8",
																"nodeType": "YulFunctionCall",
																"src": "1231:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1223:4:8",
																	"nodeType": "YulIdentifier",
																	"src": "1223:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1265:9:8",
																		"nodeType": "YulIdentifier",
																		"src": "1265:9:8"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "1276:6:8",
																		"nodeType": "YulIdentifier",
																		"src": "1276:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1258:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "1258:6:8"
																},
																"nativeSrc": "1258:25:8",
																"nodeType": "YulFunctionCall",
																"src": "1258:25:8"
															},
															"nativeSrc": "1258:25:8",
															"nodeType": "YulExpressionStatement",
															"src": "1258:25:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "1112:177:8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1182:9:8",
														"nodeType": "YulTypedName",
														"src": "1182:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1193:6:8",
														"nodeType": "YulTypedName",
														"src": "1193:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1204:4:8",
														"nodeType": "YulTypedName",
														"src": "1204:4:8",
														"type": ""
													}
												],
												"src": "1112:177:8"
											},
											{
												"body": {
													"nativeSrc": "1398:270:8",
													"nodeType": "YulBlock",
													"src": "1398:270:8",
													"statements": [
														{
															"body": {
																"nativeSrc": "1444:16:8",
																"nodeType": "YulBlock",
																"src": "1444:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1453:1:8",
																					"nodeType": "YulLiteral",
																					"src": "1453:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1456:1:8",
																					"nodeType": "YulLiteral",
																					"src": "1456:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1446:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "1446:6:8"
																			},
																			"nativeSrc": "1446:12:8",
																			"nodeType": "YulFunctionCall",
																			"src": "1446:12:8"
																		},
																		"nativeSrc": "1446:12:8",
																		"nodeType": "YulExpressionStatement",
																		"src": "1446:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1419:7:8",
																				"nodeType": "YulIdentifier",
																				"src": "1419:7:8"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1428:9:8",
																				"nodeType": "YulIdentifier",
																				"src": "1428:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1415:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "1415:3:8"
																		},
																		"nativeSrc": "1415:23:8",
																		"nodeType": "YulFunctionCall",
																		"src": "1415:23:8"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1440:2:8",
																		"nodeType": "YulLiteral",
																		"src": "1440:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "1411:3:8",
																	"nodeType": "YulIdentifier",
																	"src": "1411:3:8"
																},
																"nativeSrc": "1411:32:8",
																"nodeType": "YulFunctionCall",
																"src": "1411:32:8"
															},
															"nativeSrc": "1408:52:8",
															"nodeType": "YulIf",
															"src": "1408:52:8"
														},
														{
															"nativeSrc": "1469:39:8",
															"nodeType": "YulAssignment",
															"src": "1469:39:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1498:9:8",
																		"nodeType": "YulIdentifier",
																		"src": "1498:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "1479:18:8",
																	"nodeType": "YulIdentifier",
																	"src": "1479:18:8"
																},
																"nativeSrc": "1479:29:8",
																"nodeType": "YulFunctionCall",
																"src": "1479:29:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "1469:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "1469:6:8"
																}
															]
														},
														{
															"nativeSrc": "1517:48:8",
															"nodeType": "YulAssignment",
															"src": "1517:48:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1550:9:8",
																				"nodeType": "YulIdentifier",
																				"src": "1550:9:8"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1561:2:8",
																				"nodeType": "YulLiteral",
																				"src": "1561:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1546:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "1546:3:8"
																		},
																		"nativeSrc": "1546:18:8",
																		"nodeType": "YulFunctionCall",
																		"src": "1546:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "1527:18:8",
																	"nodeType": "YulIdentifier",
																	"src": "1527:18:8"
																},
																"nativeSrc": "1527:38:8",
																"nodeType": "YulFunctionCall",
																"src": "1527:38:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "1517:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "1517:6:8"
																}
															]
														},
														{
															"nativeSrc": "1574:14:8",
															"nodeType": "YulVariableDeclaration",
															"src": "1574:14:8",
															"value": {
																"kind": "number",
																"nativeSrc": "1587:1:8",
																"nodeType": "YulLiteral",
																"src": "1587:1:8",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "1578:5:8",
																	"nodeType": "YulTypedName",
																	"src": "1578:5:8",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "1597:41:8",
															"nodeType": "YulAssignment",
															"src": "1597:41:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1623:9:8",
																				"nodeType": "YulIdentifier",
																				"src": "1623:9:8"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1634:2:8",
																				"nodeType": "YulLiteral",
																				"src": "1634:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1619:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "1619:3:8"
																		},
																		"nativeSrc": "1619:18:8",
																		"nodeType": "YulFunctionCall",
																		"src": "1619:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1606:12:8",
																	"nodeType": "YulIdentifier",
																	"src": "1606:12:8"
																},
																"nativeSrc": "1606:32:8",
																"nodeType": "YulFunctionCall",
																"src": "1606:32:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "1597:5:8",
																	"nodeType": "YulIdentifier",
																	"src": "1597:5:8"
																}
															]
														},
														{
															"nativeSrc": "1647:15:8",
															"nodeType": "YulAssignment",
															"src": "1647:15:8",
															"value": {
																"name": "value",
																"nativeSrc": "1657:5:8",
																"nodeType": "YulIdentifier",
																"src": "1657:5:8"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nativeSrc": "1647:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "1647:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nativeSrc": "1294:374:8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1348:9:8",
														"nodeType": "YulTypedName",
														"src": "1348:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "1359:7:8",
														"nodeType": "YulTypedName",
														"src": "1359:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "1371:6:8",
														"nodeType": "YulTypedName",
														"src": "1371:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "1379:6:8",
														"nodeType": "YulTypedName",
														"src": "1379:6:8",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "1387:6:8",
														"nodeType": "YulTypedName",
														"src": "1387:6:8",
														"type": ""
													}
												],
												"src": "1294:374:8"
											},
											{
												"body": {
													"nativeSrc": "1770:87:8",
													"nodeType": "YulBlock",
													"src": "1770:87:8",
													"statements": [
														{
															"nativeSrc": "1780:26:8",
															"nodeType": "YulAssignment",
															"src": "1780:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1792:9:8",
																		"nodeType": "YulIdentifier",
																		"src": "1792:9:8"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1803:2:8",
																		"nodeType": "YulLiteral",
																		"src": "1803:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1788:3:8",
																	"nodeType": "YulIdentifier",
																	"src": "1788:3:8"
																},
																"nativeSrc": "1788:18:8",
																"nodeType": "YulFunctionCall",
																"src": "1788:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1780:4:8",
																	"nodeType": "YulIdentifier",
																	"src": "1780:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1822:9:8",
																		"nodeType": "YulIdentifier",
																		"src": "1822:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "1837:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "1837:6:8"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1845:4:8",
																				"nodeType": "YulLiteral",
																				"src": "1845:4:8",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "1833:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "1833:3:8"
																		},
																		"nativeSrc": "1833:17:8",
																		"nodeType": "YulFunctionCall",
																		"src": "1833:17:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1815:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "1815:6:8"
																},
																"nativeSrc": "1815:36:8",
																"nodeType": "YulFunctionCall",
																"src": "1815:36:8"
															},
															"nativeSrc": "1815:36:8",
															"nodeType": "YulExpressionStatement",
															"src": "1815:36:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nativeSrc": "1673:184:8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1739:9:8",
														"nodeType": "YulTypedName",
														"src": "1739:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1750:6:8",
														"nodeType": "YulTypedName",
														"src": "1750:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1761:4:8",
														"nodeType": "YulTypedName",
														"src": "1761:4:8",
														"type": ""
													}
												],
												"src": "1673:184:8"
											},
											{
												"body": {
													"nativeSrc": "1894:95:8",
													"nodeType": "YulBlock",
													"src": "1894:95:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1911:1:8",
																		"nodeType": "YulLiteral",
																		"src": "1911:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "1918:3:8",
																				"nodeType": "YulLiteral",
																				"src": "1918:3:8",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1923:10:8",
																				"nodeType": "YulLiteral",
																				"src": "1923:10:8",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "1914:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "1914:3:8"
																		},
																		"nativeSrc": "1914:20:8",
																		"nodeType": "YulFunctionCall",
																		"src": "1914:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1904:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "1904:6:8"
																},
																"nativeSrc": "1904:31:8",
																"nodeType": "YulFunctionCall",
																"src": "1904:31:8"
															},
															"nativeSrc": "1904:31:8",
															"nodeType": "YulExpressionStatement",
															"src": "1904:31:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1951:1:8",
																		"nodeType": "YulLiteral",
																		"src": "1951:1:8",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1954:4:8",
																		"nodeType": "YulLiteral",
																		"src": "1954:4:8",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1944:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "1944:6:8"
																},
																"nativeSrc": "1944:15:8",
																"nodeType": "YulFunctionCall",
																"src": "1944:15:8"
															},
															"nativeSrc": "1944:15:8",
															"nodeType": "YulExpressionStatement",
															"src": "1944:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1975:1:8",
																		"nodeType": "YulLiteral",
																		"src": "1975:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1978:4:8",
																		"nodeType": "YulLiteral",
																		"src": "1978:4:8",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1968:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "1968:6:8"
																},
																"nativeSrc": "1968:15:8",
																"nodeType": "YulFunctionCall",
																"src": "1968:15:8"
															},
															"nativeSrc": "1968:15:8",
															"nodeType": "YulExpressionStatement",
															"src": "1968:15:8"
														}
													]
												},
												"name": "panic_error_0x41",
												"nativeSrc": "1862:127:8",
												"nodeType": "YulFunctionDefinition",
												"src": "1862:127:8"
											},
											{
												"body": {
													"nativeSrc": "2047:673:8",
													"nodeType": "YulBlock",
													"src": "2047:673:8",
													"statements": [
														{
															"body": {
																"nativeSrc": "2096:16:8",
																"nodeType": "YulBlock",
																"src": "2096:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2105:1:8",
																					"nodeType": "YulLiteral",
																					"src": "2105:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2108:1:8",
																					"nodeType": "YulLiteral",
																					"src": "2108:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2098:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "2098:6:8"
																			},
																			"nativeSrc": "2098:12:8",
																			"nodeType": "YulFunctionCall",
																			"src": "2098:12:8"
																		},
																		"nativeSrc": "2098:12:8",
																		"nodeType": "YulExpressionStatement",
																		"src": "2098:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nativeSrc": "2075:6:8",
																						"nodeType": "YulIdentifier",
																						"src": "2075:6:8"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "2083:4:8",
																						"nodeType": "YulLiteral",
																						"src": "2083:4:8",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "2071:3:8",
																					"nodeType": "YulIdentifier",
																					"src": "2071:3:8"
																				},
																				"nativeSrc": "2071:17:8",
																				"nodeType": "YulFunctionCall",
																				"src": "2071:17:8"
																			},
																			{
																				"name": "end",
																				"nativeSrc": "2090:3:8",
																				"nodeType": "YulIdentifier",
																				"src": "2090:3:8"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nativeSrc": "2067:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "2067:3:8"
																		},
																		"nativeSrc": "2067:27:8",
																		"nodeType": "YulFunctionCall",
																		"src": "2067:27:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2060:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "2060:6:8"
																},
																"nativeSrc": "2060:35:8",
																"nodeType": "YulFunctionCall",
																"src": "2060:35:8"
															},
															"nativeSrc": "2057:55:8",
															"nodeType": "YulIf",
															"src": "2057:55:8"
														},
														{
															"nativeSrc": "2121:34:8",
															"nodeType": "YulVariableDeclaration",
															"src": "2121:34:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "2148:6:8",
																		"nodeType": "YulIdentifier",
																		"src": "2148:6:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "2135:12:8",
																	"nodeType": "YulIdentifier",
																	"src": "2135:12:8"
																},
																"nativeSrc": "2135:20:8",
																"nodeType": "YulFunctionCall",
																"src": "2135:20:8"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "2125:6:8",
																	"nodeType": "YulTypedName",
																	"src": "2125:6:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2198:22:8",
																"nodeType": "YulBlock",
																"src": "2198:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "2200:16:8",
																				"nodeType": "YulIdentifier",
																				"src": "2200:16:8"
																			},
																			"nativeSrc": "2200:18:8",
																			"nodeType": "YulFunctionCall",
																			"src": "2200:18:8"
																		},
																		"nativeSrc": "2200:18:8",
																		"nodeType": "YulExpressionStatement",
																		"src": "2200:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nativeSrc": "2170:6:8",
																		"nodeType": "YulIdentifier",
																		"src": "2170:6:8"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2178:18:8",
																		"nodeType": "YulLiteral",
																		"src": "2178:18:8",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "2167:2:8",
																	"nodeType": "YulIdentifier",
																	"src": "2167:2:8"
																},
																"nativeSrc": "2167:30:8",
																"nodeType": "YulFunctionCall",
																"src": "2167:30:8"
															},
															"nativeSrc": "2164:56:8",
															"nodeType": "YulIf",
															"src": "2164:56:8"
														},
														{
															"nativeSrc": "2229:23:8",
															"nodeType": "YulVariableDeclaration",
															"src": "2229:23:8",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2249:2:8",
																		"nodeType": "YulLiteral",
																		"src": "2249:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "2243:5:8",
																	"nodeType": "YulIdentifier",
																	"src": "2243:5:8"
																},
																"nativeSrc": "2243:9:8",
																"nodeType": "YulFunctionCall",
																"src": "2243:9:8"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nativeSrc": "2233:6:8",
																	"nodeType": "YulTypedName",
																	"src": "2233:6:8",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "2261:85:8",
															"nodeType": "YulVariableDeclaration",
															"src": "2261:85:8",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nativeSrc": "2283:6:8",
																		"nodeType": "YulIdentifier",
																		"src": "2283:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "length",
																										"nativeSrc": "2307:6:8",
																										"nodeType": "YulIdentifier",
																										"src": "2307:6:8"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "2315:4:8",
																										"nodeType": "YulLiteral",
																										"src": "2315:4:8",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "2303:3:8",
																									"nodeType": "YulIdentifier",
																									"src": "2303:3:8"
																								},
																								"nativeSrc": "2303:17:8",
																								"nodeType": "YulFunctionCall",
																								"src": "2303:17:8"
																							},
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "2326:2:8",
																										"nodeType": "YulLiteral",
																										"src": "2326:2:8",
																										"type": "",
																										"value": "31"
																									}
																								],
																								"functionName": {
																									"name": "not",
																									"nativeSrc": "2322:3:8",
																									"nodeType": "YulIdentifier",
																									"src": "2322:3:8"
																								},
																								"nativeSrc": "2322:7:8",
																								"nodeType": "YulFunctionCall",
																								"src": "2322:7:8"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nativeSrc": "2299:3:8",
																							"nodeType": "YulIdentifier",
																							"src": "2299:3:8"
																						},
																						"nativeSrc": "2299:31:8",
																						"nodeType": "YulFunctionCall",
																						"src": "2299:31:8"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "2332:2:8",
																						"nodeType": "YulLiteral",
																						"src": "2332:2:8",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "2295:3:8",
																					"nodeType": "YulIdentifier",
																					"src": "2295:3:8"
																				},
																				"nativeSrc": "2295:40:8",
																				"nodeType": "YulFunctionCall",
																				"src": "2295:40:8"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "2341:2:8",
																						"nodeType": "YulLiteral",
																						"src": "2341:2:8",
																						"type": "",
																						"value": "31"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "2337:3:8",
																					"nodeType": "YulIdentifier",
																					"src": "2337:3:8"
																				},
																				"nativeSrc": "2337:7:8",
																				"nodeType": "YulFunctionCall",
																				"src": "2337:7:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "2291:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "2291:3:8"
																		},
																		"nativeSrc": "2291:54:8",
																		"nodeType": "YulFunctionCall",
																		"src": "2291:54:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2279:3:8",
																	"nodeType": "YulIdentifier",
																	"src": "2279:3:8"
																},
																"nativeSrc": "2279:67:8",
																"nodeType": "YulFunctionCall",
																"src": "2279:67:8"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nativeSrc": "2265:10:8",
																	"nodeType": "YulTypedName",
																	"src": "2265:10:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2421:22:8",
																"nodeType": "YulBlock",
																"src": "2421:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "2423:16:8",
																				"nodeType": "YulIdentifier",
																				"src": "2423:16:8"
																			},
																			"nativeSrc": "2423:18:8",
																			"nodeType": "YulFunctionCall",
																			"src": "2423:18:8"
																		},
																		"nativeSrc": "2423:18:8",
																		"nodeType": "YulExpressionStatement",
																		"src": "2423:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nativeSrc": "2364:10:8",
																				"nodeType": "YulIdentifier",
																				"src": "2364:10:8"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2376:18:8",
																				"nodeType": "YulLiteral",
																				"src": "2376:18:8",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nativeSrc": "2361:2:8",
																			"nodeType": "YulIdentifier",
																			"src": "2361:2:8"
																		},
																		"nativeSrc": "2361:34:8",
																		"nodeType": "YulFunctionCall",
																		"src": "2361:34:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nativeSrc": "2400:10:8",
																				"nodeType": "YulIdentifier",
																				"src": "2400:10:8"
																			},
																			{
																				"name": "memPtr",
																				"nativeSrc": "2412:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "2412:6:8"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "2397:2:8",
																			"nodeType": "YulIdentifier",
																			"src": "2397:2:8"
																		},
																		"nativeSrc": "2397:22:8",
																		"nodeType": "YulFunctionCall",
																		"src": "2397:22:8"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "2358:2:8",
																	"nodeType": "YulIdentifier",
																	"src": "2358:2:8"
																},
																"nativeSrc": "2358:62:8",
																"nodeType": "YulFunctionCall",
																"src": "2358:62:8"
															},
															"nativeSrc": "2355:88:8",
															"nodeType": "YulIf",
															"src": "2355:88:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2459:2:8",
																		"nodeType": "YulLiteral",
																		"src": "2459:2:8",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nativeSrc": "2463:10:8",
																		"nodeType": "YulIdentifier",
																		"src": "2463:10:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2452:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "2452:6:8"
																},
																"nativeSrc": "2452:22:8",
																"nodeType": "YulFunctionCall",
																"src": "2452:22:8"
															},
															"nativeSrc": "2452:22:8",
															"nodeType": "YulExpressionStatement",
															"src": "2452:22:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nativeSrc": "2490:6:8",
																		"nodeType": "YulIdentifier",
																		"src": "2490:6:8"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "2498:6:8",
																		"nodeType": "YulIdentifier",
																		"src": "2498:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2483:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "2483:6:8"
																},
																"nativeSrc": "2483:22:8",
																"nodeType": "YulFunctionCall",
																"src": "2483:22:8"
															},
															"nativeSrc": "2483:22:8",
															"nodeType": "YulExpressionStatement",
															"src": "2483:22:8"
														},
														{
															"body": {
																"nativeSrc": "2557:16:8",
																"nodeType": "YulBlock",
																"src": "2557:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2566:1:8",
																					"nodeType": "YulLiteral",
																					"src": "2566:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2569:1:8",
																					"nodeType": "YulLiteral",
																					"src": "2569:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2559:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "2559:6:8"
																			},
																			"nativeSrc": "2559:12:8",
																			"nodeType": "YulFunctionCall",
																			"src": "2559:12:8"
																		},
																		"nativeSrc": "2559:12:8",
																		"nodeType": "YulExpressionStatement",
																		"src": "2559:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nativeSrc": "2528:6:8",
																						"nodeType": "YulIdentifier",
																						"src": "2528:6:8"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "2536:6:8",
																						"nodeType": "YulIdentifier",
																						"src": "2536:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "2524:3:8",
																					"nodeType": "YulIdentifier",
																					"src": "2524:3:8"
																				},
																				"nativeSrc": "2524:19:8",
																				"nodeType": "YulFunctionCall",
																				"src": "2524:19:8"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2545:4:8",
																				"nodeType": "YulLiteral",
																				"src": "2545:4:8",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2520:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "2520:3:8"
																		},
																		"nativeSrc": "2520:30:8",
																		"nodeType": "YulFunctionCall",
																		"src": "2520:30:8"
																	},
																	{
																		"name": "end",
																		"nativeSrc": "2552:3:8",
																		"nodeType": "YulIdentifier",
																		"src": "2552:3:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "2517:2:8",
																	"nodeType": "YulIdentifier",
																	"src": "2517:2:8"
																},
																"nativeSrc": "2517:39:8",
																"nodeType": "YulFunctionCall",
																"src": "2517:39:8"
															},
															"nativeSrc": "2514:59:8",
															"nodeType": "YulIf",
															"src": "2514:59:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nativeSrc": "2599:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "2599:6:8"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2607:4:8",
																				"nodeType": "YulLiteral",
																				"src": "2607:4:8",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2595:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "2595:3:8"
																		},
																		"nativeSrc": "2595:17:8",
																		"nodeType": "YulFunctionCall",
																		"src": "2595:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nativeSrc": "2618:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "2618:6:8"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2626:4:8",
																				"nodeType": "YulLiteral",
																				"src": "2626:4:8",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2614:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "2614:3:8"
																		},
																		"nativeSrc": "2614:17:8",
																		"nodeType": "YulFunctionCall",
																		"src": "2614:17:8"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "2633:6:8",
																		"nodeType": "YulIdentifier",
																		"src": "2633:6:8"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nativeSrc": "2582:12:8",
																	"nodeType": "YulIdentifier",
																	"src": "2582:12:8"
																},
																"nativeSrc": "2582:58:8",
																"nodeType": "YulFunctionCall",
																"src": "2582:58:8"
															},
															"nativeSrc": "2582:58:8",
															"nodeType": "YulExpressionStatement",
															"src": "2582:58:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memPtr",
																						"nativeSrc": "2664:6:8",
																						"nodeType": "YulIdentifier",
																						"src": "2664:6:8"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "2672:6:8",
																						"nodeType": "YulIdentifier",
																						"src": "2672:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "2660:3:8",
																					"nodeType": "YulIdentifier",
																					"src": "2660:3:8"
																				},
																				"nativeSrc": "2660:19:8",
																				"nodeType": "YulFunctionCall",
																				"src": "2660:19:8"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2681:4:8",
																				"nodeType": "YulLiteral",
																				"src": "2681:4:8",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2656:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "2656:3:8"
																		},
																		"nativeSrc": "2656:30:8",
																		"nodeType": "YulFunctionCall",
																		"src": "2656:30:8"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2688:1:8",
																		"nodeType": "YulLiteral",
																		"src": "2688:1:8",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2649:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "2649:6:8"
																},
																"nativeSrc": "2649:41:8",
																"nodeType": "YulFunctionCall",
																"src": "2649:41:8"
															},
															"nativeSrc": "2649:41:8",
															"nodeType": "YulExpressionStatement",
															"src": "2649:41:8"
														},
														{
															"nativeSrc": "2699:15:8",
															"nodeType": "YulAssignment",
															"src": "2699:15:8",
															"value": {
																"name": "memPtr",
																"nativeSrc": "2708:6:8",
																"nodeType": "YulIdentifier",
																"src": "2708:6:8"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nativeSrc": "2699:5:8",
																	"nodeType": "YulIdentifier",
																	"src": "2699:5:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_string",
												"nativeSrc": "1994:726:8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "2021:6:8",
														"nodeType": "YulTypedName",
														"src": "2021:6:8",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "2029:3:8",
														"nodeType": "YulTypedName",
														"src": "2029:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nativeSrc": "2037:5:8",
														"nodeType": "YulTypedName",
														"src": "2037:5:8",
														"type": ""
													}
												],
												"src": "1994:726:8"
											},
											{
												"body": {
													"nativeSrc": "2832:431:8",
													"nodeType": "YulBlock",
													"src": "2832:431:8",
													"statements": [
														{
															"body": {
																"nativeSrc": "2878:16:8",
																"nodeType": "YulBlock",
																"src": "2878:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2887:1:8",
																					"nodeType": "YulLiteral",
																					"src": "2887:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2890:1:8",
																					"nodeType": "YulLiteral",
																					"src": "2890:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2880:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "2880:6:8"
																			},
																			"nativeSrc": "2880:12:8",
																			"nodeType": "YulFunctionCall",
																			"src": "2880:12:8"
																		},
																		"nativeSrc": "2880:12:8",
																		"nodeType": "YulExpressionStatement",
																		"src": "2880:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2853:7:8",
																				"nodeType": "YulIdentifier",
																				"src": "2853:7:8"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "2862:9:8",
																				"nodeType": "YulIdentifier",
																				"src": "2862:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "2849:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "2849:3:8"
																		},
																		"nativeSrc": "2849:23:8",
																		"nodeType": "YulFunctionCall",
																		"src": "2849:23:8"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2874:2:8",
																		"nodeType": "YulLiteral",
																		"src": "2874:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "2845:3:8",
																	"nodeType": "YulIdentifier",
																	"src": "2845:3:8"
																},
																"nativeSrc": "2845:32:8",
																"nodeType": "YulFunctionCall",
																"src": "2845:32:8"
															},
															"nativeSrc": "2842:52:8",
															"nodeType": "YulIf",
															"src": "2842:52:8"
														},
														{
															"nativeSrc": "2903:37:8",
															"nodeType": "YulVariableDeclaration",
															"src": "2903:37:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2930:9:8",
																		"nodeType": "YulIdentifier",
																		"src": "2930:9:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "2917:12:8",
																	"nodeType": "YulIdentifier",
																	"src": "2917:12:8"
																},
																"nativeSrc": "2917:23:8",
																"nodeType": "YulFunctionCall",
																"src": "2917:23:8"
															},
															"variables": [
																{
																	"name": "offset",
																	"nativeSrc": "2907:6:8",
																	"nodeType": "YulTypedName",
																	"src": "2907:6:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2983:16:8",
																"nodeType": "YulBlock",
																"src": "2983:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2992:1:8",
																					"nodeType": "YulLiteral",
																					"src": "2992:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2995:1:8",
																					"nodeType": "YulLiteral",
																					"src": "2995:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2985:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "2985:6:8"
																			},
																			"nativeSrc": "2985:12:8",
																			"nodeType": "YulFunctionCall",
																			"src": "2985:12:8"
																		},
																		"nativeSrc": "2985:12:8",
																		"nodeType": "YulExpressionStatement",
																		"src": "2985:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "2955:6:8",
																		"nodeType": "YulIdentifier",
																		"src": "2955:6:8"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2963:18:8",
																		"nodeType": "YulLiteral",
																		"src": "2963:18:8",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "2952:2:8",
																	"nodeType": "YulIdentifier",
																	"src": "2952:2:8"
																},
																"nativeSrc": "2952:30:8",
																"nodeType": "YulFunctionCall",
																"src": "2952:30:8"
															},
															"nativeSrc": "2949:50:8",
															"nodeType": "YulIf",
															"src": "2949:50:8"
														},
														{
															"nativeSrc": "3008:60:8",
															"nodeType": "YulAssignment",
															"src": "3008:60:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3040:9:8",
																				"nodeType": "YulIdentifier",
																				"src": "3040:9:8"
																			},
																			{
																				"name": "offset",
																				"nativeSrc": "3051:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "3051:6:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3036:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "3036:3:8"
																		},
																		"nativeSrc": "3036:22:8",
																		"nodeType": "YulFunctionCall",
																		"src": "3036:22:8"
																	},
																	{
																		"name": "dataEnd",
																		"nativeSrc": "3060:7:8",
																		"nodeType": "YulIdentifier",
																		"src": "3060:7:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string",
																	"nativeSrc": "3018:17:8",
																	"nodeType": "YulIdentifier",
																	"src": "3018:17:8"
																},
																"nativeSrc": "3018:50:8",
																"nodeType": "YulFunctionCall",
																"src": "3018:50:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "3008:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "3008:6:8"
																}
															]
														},
														{
															"nativeSrc": "3077:48:8",
															"nodeType": "YulVariableDeclaration",
															"src": "3077:48:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3110:9:8",
																				"nodeType": "YulIdentifier",
																				"src": "3110:9:8"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3121:2:8",
																				"nodeType": "YulLiteral",
																				"src": "3121:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3106:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "3106:3:8"
																		},
																		"nativeSrc": "3106:18:8",
																		"nodeType": "YulFunctionCall",
																		"src": "3106:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "3093:12:8",
																	"nodeType": "YulIdentifier",
																	"src": "3093:12:8"
																},
																"nativeSrc": "3093:32:8",
																"nodeType": "YulFunctionCall",
																"src": "3093:32:8"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nativeSrc": "3081:8:8",
																	"nodeType": "YulTypedName",
																	"src": "3081:8:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "3170:16:8",
																"nodeType": "YulBlock",
																"src": "3170:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "3179:1:8",
																					"nodeType": "YulLiteral",
																					"src": "3179:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3182:1:8",
																					"nodeType": "YulLiteral",
																					"src": "3182:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "3172:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "3172:6:8"
																			},
																			"nativeSrc": "3172:12:8",
																			"nodeType": "YulFunctionCall",
																			"src": "3172:12:8"
																		},
																		"nativeSrc": "3172:12:8",
																		"nodeType": "YulExpressionStatement",
																		"src": "3172:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nativeSrc": "3140:8:8",
																		"nodeType": "YulIdentifier",
																		"src": "3140:8:8"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3150:18:8",
																		"nodeType": "YulLiteral",
																		"src": "3150:18:8",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "3137:2:8",
																	"nodeType": "YulIdentifier",
																	"src": "3137:2:8"
																},
																"nativeSrc": "3137:32:8",
																"nodeType": "YulFunctionCall",
																"src": "3137:32:8"
															},
															"nativeSrc": "3134:52:8",
															"nodeType": "YulIf",
															"src": "3134:52:8"
														},
														{
															"nativeSrc": "3195:62:8",
															"nodeType": "YulAssignment",
															"src": "3195:62:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3227:9:8",
																				"nodeType": "YulIdentifier",
																				"src": "3227:9:8"
																			},
																			{
																				"name": "offset_1",
																				"nativeSrc": "3238:8:8",
																				"nodeType": "YulIdentifier",
																				"src": "3238:8:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3223:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "3223:3:8"
																		},
																		"nativeSrc": "3223:24:8",
																		"nodeType": "YulFunctionCall",
																		"src": "3223:24:8"
																	},
																	{
																		"name": "dataEnd",
																		"nativeSrc": "3249:7:8",
																		"nodeType": "YulIdentifier",
																		"src": "3249:7:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string",
																	"nativeSrc": "3205:17:8",
																	"nodeType": "YulIdentifier",
																	"src": "3205:17:8"
																},
																"nativeSrc": "3205:52:8",
																"nodeType": "YulFunctionCall",
																"src": "3205:52:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "3195:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "3195:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr",
												"nativeSrc": "2725:538:8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2790:9:8",
														"nodeType": "YulTypedName",
														"src": "2790:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "2801:7:8",
														"nodeType": "YulTypedName",
														"src": "2801:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "2813:6:8",
														"nodeType": "YulTypedName",
														"src": "2813:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "2821:6:8",
														"nodeType": "YulTypedName",
														"src": "2821:6:8",
														"type": ""
													}
												],
												"src": "2725:538:8"
											},
											{
												"body": {
													"nativeSrc": "3338:116:8",
													"nodeType": "YulBlock",
													"src": "3338:116:8",
													"statements": [
														{
															"body": {
																"nativeSrc": "3384:16:8",
																"nodeType": "YulBlock",
																"src": "3384:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "3393:1:8",
																					"nodeType": "YulLiteral",
																					"src": "3393:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3396:1:8",
																					"nodeType": "YulLiteral",
																					"src": "3396:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "3386:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "3386:6:8"
																			},
																			"nativeSrc": "3386:12:8",
																			"nodeType": "YulFunctionCall",
																			"src": "3386:12:8"
																		},
																		"nativeSrc": "3386:12:8",
																		"nodeType": "YulExpressionStatement",
																		"src": "3386:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3359:7:8",
																				"nodeType": "YulIdentifier",
																				"src": "3359:7:8"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "3368:9:8",
																				"nodeType": "YulIdentifier",
																				"src": "3368:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "3355:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "3355:3:8"
																		},
																		"nativeSrc": "3355:23:8",
																		"nodeType": "YulFunctionCall",
																		"src": "3355:23:8"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3380:2:8",
																		"nodeType": "YulLiteral",
																		"src": "3380:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "3351:3:8",
																	"nodeType": "YulIdentifier",
																	"src": "3351:3:8"
																},
																"nativeSrc": "3351:32:8",
																"nodeType": "YulFunctionCall",
																"src": "3351:32:8"
															},
															"nativeSrc": "3348:52:8",
															"nodeType": "YulIf",
															"src": "3348:52:8"
														},
														{
															"nativeSrc": "3409:39:8",
															"nodeType": "YulAssignment",
															"src": "3409:39:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3438:9:8",
																		"nodeType": "YulIdentifier",
																		"src": "3438:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "3419:18:8",
																	"nodeType": "YulIdentifier",
																	"src": "3419:18:8"
																},
																"nativeSrc": "3419:29:8",
																"nodeType": "YulFunctionCall",
																"src": "3419:29:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "3409:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "3409:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nativeSrc": "3268:186:8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3304:9:8",
														"nodeType": "YulTypedName",
														"src": "3304:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "3315:7:8",
														"nodeType": "YulTypedName",
														"src": "3315:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "3327:6:8",
														"nodeType": "YulTypedName",
														"src": "3327:6:8",
														"type": ""
													}
												],
												"src": "3268:186:8"
											},
											{
												"body": {
													"nativeSrc": "3560:102:8",
													"nodeType": "YulBlock",
													"src": "3560:102:8",
													"statements": [
														{
															"nativeSrc": "3570:26:8",
															"nodeType": "YulAssignment",
															"src": "3570:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3582:9:8",
																		"nodeType": "YulIdentifier",
																		"src": "3582:9:8"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3593:2:8",
																		"nodeType": "YulLiteral",
																		"src": "3593:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3578:3:8",
																	"nodeType": "YulIdentifier",
																	"src": "3578:3:8"
																},
																"nativeSrc": "3578:18:8",
																"nodeType": "YulFunctionCall",
																"src": "3578:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3570:4:8",
																	"nodeType": "YulIdentifier",
																	"src": "3570:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3612:9:8",
																		"nodeType": "YulIdentifier",
																		"src": "3612:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "3627:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "3627:6:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "3643:3:8",
																								"nodeType": "YulLiteral",
																								"src": "3643:3:8",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "3648:1:8",
																								"nodeType": "YulLiteral",
																								"src": "3648:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "3639:3:8",
																							"nodeType": "YulIdentifier",
																							"src": "3639:3:8"
																						},
																						"nativeSrc": "3639:11:8",
																						"nodeType": "YulFunctionCall",
																						"src": "3639:11:8"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3652:1:8",
																						"nodeType": "YulLiteral",
																						"src": "3652:1:8",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "3635:3:8",
																					"nodeType": "YulIdentifier",
																					"src": "3635:3:8"
																				},
																				"nativeSrc": "3635:19:8",
																				"nodeType": "YulFunctionCall",
																				"src": "3635:19:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "3623:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "3623:3:8"
																		},
																		"nativeSrc": "3623:32:8",
																		"nodeType": "YulFunctionCall",
																		"src": "3623:32:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3605:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "3605:6:8"
																},
																"nativeSrc": "3605:51:8",
																"nodeType": "YulFunctionCall",
																"src": "3605:51:8"
															},
															"nativeSrc": "3605:51:8",
															"nodeType": "YulExpressionStatement",
															"src": "3605:51:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "3459:203:8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3529:9:8",
														"nodeType": "YulTypedName",
														"src": "3529:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3540:6:8",
														"nodeType": "YulTypedName",
														"src": "3540:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3551:4:8",
														"nodeType": "YulTypedName",
														"src": "3551:4:8",
														"type": ""
													}
												],
												"src": "3459:203:8"
											},
											{
												"body": {
													"nativeSrc": "3754:173:8",
													"nodeType": "YulBlock",
													"src": "3754:173:8",
													"statements": [
														{
															"body": {
																"nativeSrc": "3800:16:8",
																"nodeType": "YulBlock",
																"src": "3800:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "3809:1:8",
																					"nodeType": "YulLiteral",
																					"src": "3809:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3812:1:8",
																					"nodeType": "YulLiteral",
																					"src": "3812:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "3802:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "3802:6:8"
																			},
																			"nativeSrc": "3802:12:8",
																			"nodeType": "YulFunctionCall",
																			"src": "3802:12:8"
																		},
																		"nativeSrc": "3802:12:8",
																		"nodeType": "YulExpressionStatement",
																		"src": "3802:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3775:7:8",
																				"nodeType": "YulIdentifier",
																				"src": "3775:7:8"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "3784:9:8",
																				"nodeType": "YulIdentifier",
																				"src": "3784:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "3771:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "3771:3:8"
																		},
																		"nativeSrc": "3771:23:8",
																		"nodeType": "YulFunctionCall",
																		"src": "3771:23:8"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3796:2:8",
																		"nodeType": "YulLiteral",
																		"src": "3796:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "3767:3:8",
																	"nodeType": "YulIdentifier",
																	"src": "3767:3:8"
																},
																"nativeSrc": "3767:32:8",
																"nodeType": "YulFunctionCall",
																"src": "3767:32:8"
															},
															"nativeSrc": "3764:52:8",
															"nodeType": "YulIf",
															"src": "3764:52:8"
														},
														{
															"nativeSrc": "3825:39:8",
															"nodeType": "YulAssignment",
															"src": "3825:39:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3854:9:8",
																		"nodeType": "YulIdentifier",
																		"src": "3854:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "3835:18:8",
																	"nodeType": "YulIdentifier",
																	"src": "3835:18:8"
																},
																"nativeSrc": "3835:29:8",
																"nodeType": "YulFunctionCall",
																"src": "3835:29:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "3825:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "3825:6:8"
																}
															]
														},
														{
															"nativeSrc": "3873:48:8",
															"nodeType": "YulAssignment",
															"src": "3873:48:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3906:9:8",
																				"nodeType": "YulIdentifier",
																				"src": "3906:9:8"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3917:2:8",
																				"nodeType": "YulLiteral",
																				"src": "3917:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3902:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "3902:3:8"
																		},
																		"nativeSrc": "3902:18:8",
																		"nodeType": "YulFunctionCall",
																		"src": "3902:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "3883:18:8",
																	"nodeType": "YulIdentifier",
																	"src": "3883:18:8"
																},
																"nativeSrc": "3883:38:8",
																"nodeType": "YulFunctionCall",
																"src": "3883:38:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "3873:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "3873:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nativeSrc": "3667:260:8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3712:9:8",
														"nodeType": "YulTypedName",
														"src": "3712:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "3723:7:8",
														"nodeType": "YulTypedName",
														"src": "3723:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "3735:6:8",
														"nodeType": "YulTypedName",
														"src": "3735:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "3743:6:8",
														"nodeType": "YulTypedName",
														"src": "3743:6:8",
														"type": ""
													}
												],
												"src": "3667:260:8"
											},
											{
												"body": {
													"nativeSrc": "3987:325:8",
													"nodeType": "YulBlock",
													"src": "3987:325:8",
													"statements": [
														{
															"nativeSrc": "3997:22:8",
															"nodeType": "YulAssignment",
															"src": "3997:22:8",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "4011:1:8",
																		"nodeType": "YulLiteral",
																		"src": "4011:1:8",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nativeSrc": "4014:4:8",
																		"nodeType": "YulIdentifier",
																		"src": "4014:4:8"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "4007:3:8",
																	"nodeType": "YulIdentifier",
																	"src": "4007:3:8"
																},
																"nativeSrc": "4007:12:8",
																"nodeType": "YulFunctionCall",
																"src": "4007:12:8"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "3997:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "3997:6:8"
																}
															]
														},
														{
															"nativeSrc": "4028:38:8",
															"nodeType": "YulVariableDeclaration",
															"src": "4028:38:8",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "4058:4:8",
																		"nodeType": "YulIdentifier",
																		"src": "4058:4:8"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4064:1:8",
																		"nodeType": "YulLiteral",
																		"src": "4064:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "4054:3:8",
																	"nodeType": "YulIdentifier",
																	"src": "4054:3:8"
																},
																"nativeSrc": "4054:12:8",
																"nodeType": "YulFunctionCall",
																"src": "4054:12:8"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nativeSrc": "4032:18:8",
																	"nodeType": "YulTypedName",
																	"src": "4032:18:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "4105:31:8",
																"nodeType": "YulBlock",
																"src": "4105:31:8",
																"statements": [
																	{
																		"nativeSrc": "4107:27:8",
																		"nodeType": "YulAssignment",
																		"src": "4107:27:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nativeSrc": "4121:6:8",
																					"nodeType": "YulIdentifier",
																					"src": "4121:6:8"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4129:4:8",
																					"nodeType": "YulLiteral",
																					"src": "4129:4:8",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "4117:3:8",
																				"nodeType": "YulIdentifier",
																				"src": "4117:3:8"
																			},
																			"nativeSrc": "4117:17:8",
																			"nodeType": "YulFunctionCall",
																			"src": "4117:17:8"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nativeSrc": "4107:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "4107:6:8"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "4085:18:8",
																		"nodeType": "YulIdentifier",
																		"src": "4085:18:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "4078:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "4078:6:8"
																},
																"nativeSrc": "4078:26:8",
																"nodeType": "YulFunctionCall",
																"src": "4078:26:8"
															},
															"nativeSrc": "4075:61:8",
															"nodeType": "YulIf",
															"src": "4075:61:8"
														},
														{
															"body": {
																"nativeSrc": "4195:111:8",
																"nodeType": "YulBlock",
																"src": "4195:111:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4216:1:8",
																					"nodeType": "YulLiteral",
																					"src": "4216:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "4223:3:8",
																							"nodeType": "YulLiteral",
																							"src": "4223:3:8",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "4228:10:8",
																							"nodeType": "YulLiteral",
																							"src": "4228:10:8",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "4219:3:8",
																						"nodeType": "YulIdentifier",
																						"src": "4219:3:8"
																					},
																					"nativeSrc": "4219:20:8",
																					"nodeType": "YulFunctionCall",
																					"src": "4219:20:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "4209:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "4209:6:8"
																			},
																			"nativeSrc": "4209:31:8",
																			"nodeType": "YulFunctionCall",
																			"src": "4209:31:8"
																		},
																		"nativeSrc": "4209:31:8",
																		"nodeType": "YulExpressionStatement",
																		"src": "4209:31:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4260:1:8",
																					"nodeType": "YulLiteral",
																					"src": "4260:1:8",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4263:4:8",
																					"nodeType": "YulLiteral",
																					"src": "4263:4:8",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "4253:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "4253:6:8"
																			},
																			"nativeSrc": "4253:15:8",
																			"nodeType": "YulFunctionCall",
																			"src": "4253:15:8"
																		},
																		"nativeSrc": "4253:15:8",
																		"nodeType": "YulExpressionStatement",
																		"src": "4253:15:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4288:1:8",
																					"nodeType": "YulLiteral",
																					"src": "4288:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4291:4:8",
																					"nodeType": "YulLiteral",
																					"src": "4291:4:8",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "4281:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "4281:6:8"
																			},
																			"nativeSrc": "4281:15:8",
																			"nodeType": "YulFunctionCall",
																			"src": "4281:15:8"
																		},
																		"nativeSrc": "4281:15:8",
																		"nodeType": "YulExpressionStatement",
																		"src": "4281:15:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "4151:18:8",
																		"nodeType": "YulIdentifier",
																		"src": "4151:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "4174:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "4174:6:8"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4182:2:8",
																				"nodeType": "YulLiteral",
																				"src": "4182:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "4171:2:8",
																			"nodeType": "YulIdentifier",
																			"src": "4171:2:8"
																		},
																		"nativeSrc": "4171:14:8",
																		"nodeType": "YulFunctionCall",
																		"src": "4171:14:8"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nativeSrc": "4148:2:8",
																	"nodeType": "YulIdentifier",
																	"src": "4148:2:8"
																},
																"nativeSrc": "4148:38:8",
																"nodeType": "YulFunctionCall",
																"src": "4148:38:8"
															},
															"nativeSrc": "4145:161:8",
															"nodeType": "YulIf",
															"src": "4145:161:8"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nativeSrc": "3932:380:8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "3967:4:8",
														"nodeType": "YulTypedName",
														"src": "3967:4:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "3976:6:8",
														"nodeType": "YulTypedName",
														"src": "3976:6:8",
														"type": ""
													}
												],
												"src": "3932:380:8"
											},
											{
												"body": {
													"nativeSrc": "4349:95:8",
													"nodeType": "YulBlock",
													"src": "4349:95:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "4366:1:8",
																		"nodeType": "YulLiteral",
																		"src": "4366:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "4373:3:8",
																				"nodeType": "YulLiteral",
																				"src": "4373:3:8",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4378:10:8",
																				"nodeType": "YulLiteral",
																				"src": "4378:10:8",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "4369:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "4369:3:8"
																		},
																		"nativeSrc": "4369:20:8",
																		"nodeType": "YulFunctionCall",
																		"src": "4369:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4359:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "4359:6:8"
																},
																"nativeSrc": "4359:31:8",
																"nodeType": "YulFunctionCall",
																"src": "4359:31:8"
															},
															"nativeSrc": "4359:31:8",
															"nodeType": "YulExpressionStatement",
															"src": "4359:31:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "4406:1:8",
																		"nodeType": "YulLiteral",
																		"src": "4406:1:8",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4409:4:8",
																		"nodeType": "YulLiteral",
																		"src": "4409:4:8",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4399:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "4399:6:8"
																},
																"nativeSrc": "4399:15:8",
																"nodeType": "YulFunctionCall",
																"src": "4399:15:8"
															},
															"nativeSrc": "4399:15:8",
															"nodeType": "YulExpressionStatement",
															"src": "4399:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "4430:1:8",
																		"nodeType": "YulLiteral",
																		"src": "4430:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4433:4:8",
																		"nodeType": "YulLiteral",
																		"src": "4433:4:8",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "4423:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "4423:6:8"
																},
																"nativeSrc": "4423:15:8",
																"nodeType": "YulFunctionCall",
																"src": "4423:15:8"
															},
															"nativeSrc": "4423:15:8",
															"nodeType": "YulExpressionStatement",
															"src": "4423:15:8"
														}
													]
												},
												"name": "panic_error_0x11",
												"nativeSrc": "4317:127:8",
												"nodeType": "YulFunctionDefinition",
												"src": "4317:127:8"
											},
											{
												"body": {
													"nativeSrc": "4518:306:8",
													"nodeType": "YulBlock",
													"src": "4518:306:8",
													"statements": [
														{
															"nativeSrc": "4528:10:8",
															"nodeType": "YulAssignment",
															"src": "4528:10:8",
															"value": {
																"kind": "number",
																"nativeSrc": "4537:1:8",
																"nodeType": "YulLiteral",
																"src": "4537:1:8",
																"type": "",
																"value": "1"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "4528:5:8",
																	"nodeType": "YulIdentifier",
																	"src": "4528:5:8"
																}
															]
														},
														{
															"nativeSrc": "4547:13:8",
															"nodeType": "YulAssignment",
															"src": "4547:13:8",
															"value": {
																"name": "_base",
																"nativeSrc": "4555:5:8",
																"nodeType": "YulIdentifier",
																"src": "4555:5:8"
															},
															"variableNames": [
																{
																	"name": "base",
																	"nativeSrc": "4547:4:8",
																	"nodeType": "YulIdentifier",
																	"src": "4547:4:8"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "4605:213:8",
																"nodeType": "YulBlock",
																"src": "4605:213:8",
																"statements": [
																	{
																		"body": {
																			"nativeSrc": "4647:22:8",
																			"nodeType": "YulBlock",
																			"src": "4647:22:8",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nativeSrc": "4649:16:8",
																							"nodeType": "YulIdentifier",
																							"src": "4649:16:8"
																						},
																						"nativeSrc": "4649:18:8",
																						"nodeType": "YulFunctionCall",
																						"src": "4649:18:8"
																					},
																					"nativeSrc": "4649:18:8",
																					"nodeType": "YulExpressionStatement",
																					"src": "4649:18:8"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "4625:4:8",
																					"nodeType": "YulIdentifier",
																					"src": "4625:4:8"
																				},
																				{
																					"arguments": [
																						{
																							"name": "max",
																							"nativeSrc": "4635:3:8",
																							"nodeType": "YulIdentifier",
																							"src": "4635:3:8"
																						},
																						{
																							"name": "base",
																							"nativeSrc": "4640:4:8",
																							"nodeType": "YulIdentifier",
																							"src": "4640:4:8"
																						}
																					],
																					"functionName": {
																						"name": "div",
																						"nativeSrc": "4631:3:8",
																						"nodeType": "YulIdentifier",
																						"src": "4631:3:8"
																					},
																					"nativeSrc": "4631:14:8",
																					"nodeType": "YulFunctionCall",
																					"src": "4631:14:8"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nativeSrc": "4622:2:8",
																				"nodeType": "YulIdentifier",
																				"src": "4622:2:8"
																			},
																			"nativeSrc": "4622:24:8",
																			"nodeType": "YulFunctionCall",
																			"src": "4622:24:8"
																		},
																		"nativeSrc": "4619:50:8",
																		"nodeType": "YulIf",
																		"src": "4619:50:8"
																	},
																	{
																		"body": {
																			"nativeSrc": "4702:29:8",
																			"nodeType": "YulBlock",
																			"src": "4702:29:8",
																			"statements": [
																				{
																					"nativeSrc": "4704:25:8",
																					"nodeType": "YulAssignment",
																					"src": "4704:25:8",
																					"value": {
																						"arguments": [
																							{
																								"name": "power",
																								"nativeSrc": "4717:5:8",
																								"nodeType": "YulIdentifier",
																								"src": "4717:5:8"
																							},
																							{
																								"name": "base",
																								"nativeSrc": "4724:4:8",
																								"nodeType": "YulIdentifier",
																								"src": "4724:4:8"
																							}
																						],
																						"functionName": {
																							"name": "mul",
																							"nativeSrc": "4713:3:8",
																							"nodeType": "YulIdentifier",
																							"src": "4713:3:8"
																						},
																						"nativeSrc": "4713:16:8",
																						"nodeType": "YulFunctionCall",
																						"src": "4713:16:8"
																					},
																					"variableNames": [
																						{
																							"name": "power",
																							"nativeSrc": "4704:5:8",
																							"nodeType": "YulIdentifier",
																							"src": "4704:5:8"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nativeSrc": "4689:8:8",
																					"nodeType": "YulIdentifier",
																					"src": "4689:8:8"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4699:1:8",
																					"nodeType": "YulLiteral",
																					"src": "4699:1:8",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "4685:3:8",
																				"nodeType": "YulIdentifier",
																				"src": "4685:3:8"
																			},
																			"nativeSrc": "4685:16:8",
																			"nodeType": "YulFunctionCall",
																			"src": "4685:16:8"
																		},
																		"nativeSrc": "4682:49:8",
																		"nodeType": "YulIf",
																		"src": "4682:49:8"
																	},
																	{
																		"nativeSrc": "4744:23:8",
																		"nodeType": "YulAssignment",
																		"src": "4744:23:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "4756:4:8",
																					"nodeType": "YulIdentifier",
																					"src": "4756:4:8"
																				},
																				{
																					"name": "base",
																					"nativeSrc": "4762:4:8",
																					"nodeType": "YulIdentifier",
																					"src": "4762:4:8"
																				}
																			],
																			"functionName": {
																				"name": "mul",
																				"nativeSrc": "4752:3:8",
																				"nodeType": "YulIdentifier",
																				"src": "4752:3:8"
																			},
																			"nativeSrc": "4752:15:8",
																			"nodeType": "YulFunctionCall",
																			"src": "4752:15:8"
																		},
																		"variableNames": [
																			{
																				"name": "base",
																				"nativeSrc": "4744:4:8",
																				"nodeType": "YulIdentifier",
																				"src": "4744:4:8"
																			}
																		]
																	},
																	{
																		"nativeSrc": "4780:28:8",
																		"nodeType": "YulAssignment",
																		"src": "4780:28:8",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4796:1:8",
																					"nodeType": "YulLiteral",
																					"src": "4796:1:8",
																					"type": "",
																					"value": "1"
																				},
																				{
																					"name": "exponent",
																					"nativeSrc": "4799:8:8",
																					"nodeType": "YulIdentifier",
																					"src": "4799:8:8"
																				}
																			],
																			"functionName": {
																				"name": "shr",
																				"nativeSrc": "4792:3:8",
																				"nodeType": "YulIdentifier",
																				"src": "4792:3:8"
																			},
																			"nativeSrc": "4792:16:8",
																			"nodeType": "YulFunctionCall",
																			"src": "4792:16:8"
																		},
																		"variableNames": [
																			{
																				"name": "exponent",
																				"nativeSrc": "4780:8:8",
																				"nodeType": "YulIdentifier",
																				"src": "4780:8:8"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "4580:8:8",
																		"nodeType": "YulIdentifier",
																		"src": "4580:8:8"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4590:1:8",
																		"nodeType": "YulLiteral",
																		"src": "4590:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "4577:2:8",
																	"nodeType": "YulIdentifier",
																	"src": "4577:2:8"
																},
																"nativeSrc": "4577:15:8",
																"nodeType": "YulFunctionCall",
																"src": "4577:15:8"
															},
															"nativeSrc": "4569:249:8",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "4593:3:8",
																"nodeType": "YulBlock",
																"src": "4593:3:8",
																"statements": []
															},
															"pre": {
																"nativeSrc": "4573:3:8",
																"nodeType": "YulBlock",
																"src": "4573:3:8",
																"statements": []
															},
															"src": "4569:249:8"
														}
													]
												},
												"name": "checked_exp_helper",
												"nativeSrc": "4449:375:8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "_base",
														"nativeSrc": "4477:5:8",
														"nodeType": "YulTypedName",
														"src": "4477:5:8",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "4484:8:8",
														"nodeType": "YulTypedName",
														"src": "4484:8:8",
														"type": ""
													},
													{
														"name": "max",
														"nativeSrc": "4494:3:8",
														"nodeType": "YulTypedName",
														"src": "4494:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "4502:5:8",
														"nodeType": "YulTypedName",
														"src": "4502:5:8",
														"type": ""
													},
													{
														"name": "base",
														"nativeSrc": "4509:4:8",
														"nodeType": "YulTypedName",
														"src": "4509:4:8",
														"type": ""
													}
												],
												"src": "4449:375:8"
											},
											{
												"body": {
													"nativeSrc": "4888:843:8",
													"nodeType": "YulBlock",
													"src": "4888:843:8",
													"statements": [
														{
															"body": {
																"nativeSrc": "4926:52:8",
																"nodeType": "YulBlock",
																"src": "4926:52:8",
																"statements": [
																	{
																		"nativeSrc": "4940:10:8",
																		"nodeType": "YulAssignment",
																		"src": "4940:10:8",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "4949:1:8",
																			"nodeType": "YulLiteral",
																			"src": "4949:1:8",
																			"type": "",
																			"value": "1"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "4940:5:8",
																				"nodeType": "YulIdentifier",
																				"src": "4940:5:8"
																			}
																		]
																	},
																	{
																		"nativeSrc": "4963:5:8",
																		"nodeType": "YulLeave",
																		"src": "4963:5:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "4908:8:8",
																		"nodeType": "YulIdentifier",
																		"src": "4908:8:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "4901:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "4901:6:8"
																},
																"nativeSrc": "4901:16:8",
																"nodeType": "YulFunctionCall",
																"src": "4901:16:8"
															},
															"nativeSrc": "4898:80:8",
															"nodeType": "YulIf",
															"src": "4898:80:8"
														},
														{
															"body": {
																"nativeSrc": "5011:52:8",
																"nodeType": "YulBlock",
																"src": "5011:52:8",
																"statements": [
																	{
																		"nativeSrc": "5025:10:8",
																		"nodeType": "YulAssignment",
																		"src": "5025:10:8",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "5034:1:8",
																			"nodeType": "YulLiteral",
																			"src": "5034:1:8",
																			"type": "",
																			"value": "0"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "5025:5:8",
																				"nodeType": "YulIdentifier",
																				"src": "5025:5:8"
																			}
																		]
																	},
																	{
																		"nativeSrc": "5048:5:8",
																		"nodeType": "YulLeave",
																		"src": "5048:5:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "4997:4:8",
																		"nodeType": "YulIdentifier",
																		"src": "4997:4:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "4990:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "4990:6:8"
																},
																"nativeSrc": "4990:12:8",
																"nodeType": "YulFunctionCall",
																"src": "4990:12:8"
															},
															"nativeSrc": "4987:76:8",
															"nodeType": "YulIf",
															"src": "4987:76:8"
														},
														{
															"cases": [
																{
																	"body": {
																		"nativeSrc": "5099:52:8",
																		"nodeType": "YulBlock",
																		"src": "5099:52:8",
																		"statements": [
																			{
																				"nativeSrc": "5113:10:8",
																				"nodeType": "YulAssignment",
																				"src": "5113:10:8",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "5122:1:8",
																					"nodeType": "YulLiteral",
																					"src": "5122:1:8",
																					"type": "",
																					"value": "1"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nativeSrc": "5113:5:8",
																						"nodeType": "YulIdentifier",
																						"src": "5113:5:8"
																					}
																				]
																			},
																			{
																				"nativeSrc": "5136:5:8",
																				"nodeType": "YulLeave",
																				"src": "5136:5:8"
																			}
																		]
																	},
																	"nativeSrc": "5092:59:8",
																	"nodeType": "YulCase",
																	"src": "5092:59:8",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "5097:1:8",
																		"nodeType": "YulLiteral",
																		"src": "5097:1:8",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nativeSrc": "5167:167:8",
																		"nodeType": "YulBlock",
																		"src": "5167:167:8",
																		"statements": [
																			{
																				"body": {
																					"nativeSrc": "5202:22:8",
																					"nodeType": "YulBlock",
																					"src": "5202:22:8",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nativeSrc": "5204:16:8",
																									"nodeType": "YulIdentifier",
																									"src": "5204:16:8"
																								},
																								"nativeSrc": "5204:18:8",
																								"nodeType": "YulFunctionCall",
																								"src": "5204:18:8"
																							},
																							"nativeSrc": "5204:18:8",
																							"nodeType": "YulExpressionStatement",
																							"src": "5204:18:8"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nativeSrc": "5187:8:8",
																							"nodeType": "YulIdentifier",
																							"src": "5187:8:8"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "5197:3:8",
																							"nodeType": "YulLiteral",
																							"src": "5197:3:8",
																							"type": "",
																							"value": "255"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nativeSrc": "5184:2:8",
																						"nodeType": "YulIdentifier",
																						"src": "5184:2:8"
																					},
																					"nativeSrc": "5184:17:8",
																					"nodeType": "YulFunctionCall",
																					"src": "5184:17:8"
																				},
																				"nativeSrc": "5181:43:8",
																				"nodeType": "YulIf",
																				"src": "5181:43:8"
																			},
																			{
																				"nativeSrc": "5237:25:8",
																				"nodeType": "YulAssignment",
																				"src": "5237:25:8",
																				"value": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nativeSrc": "5250:8:8",
																							"nodeType": "YulIdentifier",
																							"src": "5250:8:8"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "5260:1:8",
																							"nodeType": "YulLiteral",
																							"src": "5260:1:8",
																							"type": "",
																							"value": "1"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "5246:3:8",
																						"nodeType": "YulIdentifier",
																						"src": "5246:3:8"
																					},
																					"nativeSrc": "5246:16:8",
																					"nodeType": "YulFunctionCall",
																					"src": "5246:16:8"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nativeSrc": "5237:5:8",
																						"nodeType": "YulIdentifier",
																						"src": "5237:5:8"
																					}
																				]
																			},
																			{
																				"nativeSrc": "5275:11:8",
																				"nodeType": "YulVariableDeclaration",
																				"src": "5275:11:8",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "5285:1:8",
																					"nodeType": "YulLiteral",
																					"src": "5285:1:8",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "_1",
																						"nativeSrc": "5279:2:8",
																						"nodeType": "YulTypedName",
																						"src": "5279:2:8",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "5299:7:8",
																				"nodeType": "YulAssignment",
																				"src": "5299:7:8",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "5305:1:8",
																					"nodeType": "YulLiteral",
																					"src": "5305:1:8",
																					"type": "",
																					"value": "0"
																				},
																				"variableNames": [
																					{
																						"name": "_1",
																						"nativeSrc": "5299:2:8",
																						"nodeType": "YulIdentifier",
																						"src": "5299:2:8"
																					}
																				]
																			},
																			{
																				"nativeSrc": "5319:5:8",
																				"nodeType": "YulLeave",
																				"src": "5319:5:8"
																			}
																		]
																	},
																	"nativeSrc": "5160:174:8",
																	"nodeType": "YulCase",
																	"src": "5160:174:8",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "5165:1:8",
																		"nodeType": "YulLiteral",
																		"src": "5165:1:8",
																		"type": "",
																		"value": "2"
																	}
																}
															],
															"expression": {
																"name": "base",
																"nativeSrc": "5079:4:8",
																"nodeType": "YulIdentifier",
																"src": "5079:4:8"
															},
															"nativeSrc": "5072:262:8",
															"nodeType": "YulSwitch",
															"src": "5072:262:8"
														},
														{
															"body": {
																"nativeSrc": "5432:114:8",
																"nodeType": "YulBlock",
																"src": "5432:114:8",
																"statements": [
																	{
																		"nativeSrc": "5446:28:8",
																		"nodeType": "YulAssignment",
																		"src": "5446:28:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "5459:4:8",
																					"nodeType": "YulIdentifier",
																					"src": "5459:4:8"
																				},
																				{
																					"name": "exponent",
																					"nativeSrc": "5465:8:8",
																					"nodeType": "YulIdentifier",
																					"src": "5465:8:8"
																				}
																			],
																			"functionName": {
																				"name": "exp",
																				"nativeSrc": "5455:3:8",
																				"nodeType": "YulIdentifier",
																				"src": "5455:3:8"
																			},
																			"nativeSrc": "5455:19:8",
																			"nodeType": "YulFunctionCall",
																			"src": "5455:19:8"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "5446:5:8",
																				"nodeType": "YulIdentifier",
																				"src": "5446:5:8"
																			}
																		]
																	},
																	{
																		"nativeSrc": "5487:11:8",
																		"nodeType": "YulVariableDeclaration",
																		"src": "5487:11:8",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "5497:1:8",
																			"nodeType": "YulLiteral",
																			"src": "5497:1:8",
																			"type": "",
																			"value": "0"
																		},
																		"variables": [
																			{
																				"name": "_2",
																				"nativeSrc": "5491:2:8",
																				"nodeType": "YulTypedName",
																				"src": "5491:2:8",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "5511:7:8",
																		"nodeType": "YulAssignment",
																		"src": "5511:7:8",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "5517:1:8",
																			"nodeType": "YulLiteral",
																			"src": "5517:1:8",
																			"type": "",
																			"value": "0"
																		},
																		"variableNames": [
																			{
																				"name": "_2",
																				"nativeSrc": "5511:2:8",
																				"nodeType": "YulIdentifier",
																				"src": "5511:2:8"
																			}
																		]
																	},
																	{
																		"nativeSrc": "5531:5:8",
																		"nodeType": "YulLeave",
																		"src": "5531:5:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nativeSrc": "5356:4:8",
																						"nodeType": "YulIdentifier",
																						"src": "5356:4:8"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "5362:2:8",
																						"nodeType": "YulLiteral",
																						"src": "5362:2:8",
																						"type": "",
																						"value": "11"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "5353:2:8",
																					"nodeType": "YulIdentifier",
																					"src": "5353:2:8"
																				},
																				"nativeSrc": "5353:12:8",
																				"nodeType": "YulFunctionCall",
																				"src": "5353:12:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nativeSrc": "5370:8:8",
																						"nodeType": "YulIdentifier",
																						"src": "5370:8:8"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "5380:2:8",
																						"nodeType": "YulLiteral",
																						"src": "5380:2:8",
																						"type": "",
																						"value": "78"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "5367:2:8",
																					"nodeType": "YulIdentifier",
																					"src": "5367:2:8"
																				},
																				"nativeSrc": "5367:16:8",
																				"nodeType": "YulFunctionCall",
																				"src": "5367:16:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "5349:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "5349:3:8"
																		},
																		"nativeSrc": "5349:35:8",
																		"nodeType": "YulFunctionCall",
																		"src": "5349:35:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nativeSrc": "5393:4:8",
																						"nodeType": "YulIdentifier",
																						"src": "5393:4:8"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "5399:3:8",
																						"nodeType": "YulLiteral",
																						"src": "5399:3:8",
																						"type": "",
																						"value": "307"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "5390:2:8",
																					"nodeType": "YulIdentifier",
																					"src": "5390:2:8"
																				},
																				"nativeSrc": "5390:13:8",
																				"nodeType": "YulFunctionCall",
																				"src": "5390:13:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nativeSrc": "5408:8:8",
																						"nodeType": "YulIdentifier",
																						"src": "5408:8:8"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "5418:2:8",
																						"nodeType": "YulLiteral",
																						"src": "5418:2:8",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "5405:2:8",
																					"nodeType": "YulIdentifier",
																					"src": "5405:2:8"
																				},
																				"nativeSrc": "5405:16:8",
																				"nodeType": "YulFunctionCall",
																				"src": "5405:16:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "5386:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "5386:3:8"
																		},
																		"nativeSrc": "5386:36:8",
																		"nodeType": "YulFunctionCall",
																		"src": "5386:36:8"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "5346:2:8",
																	"nodeType": "YulIdentifier",
																	"src": "5346:2:8"
																},
																"nativeSrc": "5346:77:8",
																"nodeType": "YulFunctionCall",
																"src": "5346:77:8"
															},
															"nativeSrc": "5343:203:8",
															"nodeType": "YulIf",
															"src": "5343:203:8"
														},
														{
															"nativeSrc": "5555:65:8",
															"nodeType": "YulVariableDeclaration",
															"src": "5555:65:8",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "5597:4:8",
																		"nodeType": "YulIdentifier",
																		"src": "5597:4:8"
																	},
																	{
																		"name": "exponent",
																		"nativeSrc": "5603:8:8",
																		"nodeType": "YulIdentifier",
																		"src": "5603:8:8"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "5617:1:8",
																				"nodeType": "YulLiteral",
																				"src": "5617:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "5613:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "5613:3:8"
																		},
																		"nativeSrc": "5613:6:8",
																		"nodeType": "YulFunctionCall",
																		"src": "5613:6:8"
																	}
																],
																"functionName": {
																	"name": "checked_exp_helper",
																	"nativeSrc": "5578:18:8",
																	"nodeType": "YulIdentifier",
																	"src": "5578:18:8"
																},
																"nativeSrc": "5578:42:8",
																"nodeType": "YulFunctionCall",
																"src": "5578:42:8"
															},
															"variables": [
																{
																	"name": "power_1",
																	"nativeSrc": "5559:7:8",
																	"nodeType": "YulTypedName",
																	"src": "5559:7:8",
																	"type": ""
																},
																{
																	"name": "base_1",
																	"nativeSrc": "5568:6:8",
																	"nodeType": "YulTypedName",
																	"src": "5568:6:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "5665:22:8",
																"nodeType": "YulBlock",
																"src": "5665:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "5667:16:8",
																				"nodeType": "YulIdentifier",
																				"src": "5667:16:8"
																			},
																			"nativeSrc": "5667:18:8",
																			"nodeType": "YulFunctionCall",
																			"src": "5667:18:8"
																		},
																		"nativeSrc": "5667:18:8",
																		"nodeType": "YulExpressionStatement",
																		"src": "5667:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nativeSrc": "5635:7:8",
																		"nodeType": "YulIdentifier",
																		"src": "5635:7:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "5652:1:8",
																						"nodeType": "YulLiteral",
																						"src": "5652:1:8",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "5648:3:8",
																					"nodeType": "YulIdentifier",
																					"src": "5648:3:8"
																				},
																				"nativeSrc": "5648:6:8",
																				"nodeType": "YulFunctionCall",
																				"src": "5648:6:8"
																			},
																			{
																				"name": "base_1",
																				"nativeSrc": "5656:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "5656:6:8"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "5644:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "5644:3:8"
																		},
																		"nativeSrc": "5644:19:8",
																		"nodeType": "YulFunctionCall",
																		"src": "5644:19:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "5632:2:8",
																	"nodeType": "YulIdentifier",
																	"src": "5632:2:8"
																},
																"nativeSrc": "5632:32:8",
																"nodeType": "YulFunctionCall",
																"src": "5632:32:8"
															},
															"nativeSrc": "5629:58:8",
															"nodeType": "YulIf",
															"src": "5629:58:8"
														},
														{
															"nativeSrc": "5696:29:8",
															"nodeType": "YulAssignment",
															"src": "5696:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nativeSrc": "5709:7:8",
																		"nodeType": "YulIdentifier",
																		"src": "5709:7:8"
																	},
																	{
																		"name": "base_1",
																		"nativeSrc": "5718:6:8",
																		"nodeType": "YulIdentifier",
																		"src": "5718:6:8"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "5705:3:8",
																	"nodeType": "YulIdentifier",
																	"src": "5705:3:8"
																},
																"nativeSrc": "5705:20:8",
																"nodeType": "YulFunctionCall",
																"src": "5705:20:8"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "5696:5:8",
																	"nodeType": "YulIdentifier",
																	"src": "5696:5:8"
																}
															]
														}
													]
												},
												"name": "checked_exp_unsigned",
												"nativeSrc": "4829:902:8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nativeSrc": "4859:4:8",
														"nodeType": "YulTypedName",
														"src": "4859:4:8",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "4865:8:8",
														"nodeType": "YulTypedName",
														"src": "4865:8:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "4878:5:8",
														"nodeType": "YulTypedName",
														"src": "4878:5:8",
														"type": ""
													}
												],
												"src": "4829:902:8"
											},
											{
												"body": {
													"nativeSrc": "5804:72:8",
													"nodeType": "YulBlock",
													"src": "5804:72:8",
													"statements": [
														{
															"nativeSrc": "5814:56:8",
															"nodeType": "YulAssignment",
															"src": "5814:56:8",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "5844:4:8",
																		"nodeType": "YulIdentifier",
																		"src": "5844:4:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "exponent",
																				"nativeSrc": "5854:8:8",
																				"nodeType": "YulIdentifier",
																				"src": "5854:8:8"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5864:4:8",
																				"nodeType": "YulLiteral",
																				"src": "5864:4:8",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "5850:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "5850:3:8"
																		},
																		"nativeSrc": "5850:19:8",
																		"nodeType": "YulFunctionCall",
																		"src": "5850:19:8"
																	}
																],
																"functionName": {
																	"name": "checked_exp_unsigned",
																	"nativeSrc": "5823:20:8",
																	"nodeType": "YulIdentifier",
																	"src": "5823:20:8"
																},
																"nativeSrc": "5823:47:8",
																"nodeType": "YulFunctionCall",
																"src": "5823:47:8"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "5814:5:8",
																	"nodeType": "YulIdentifier",
																	"src": "5814:5:8"
																}
															]
														}
													]
												},
												"name": "checked_exp_t_uint256_t_uint8",
												"nativeSrc": "5736:140:8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nativeSrc": "5775:4:8",
														"nodeType": "YulTypedName",
														"src": "5775:4:8",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "5781:8:8",
														"nodeType": "YulTypedName",
														"src": "5781:8:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "5794:5:8",
														"nodeType": "YulTypedName",
														"src": "5794:5:8",
														"type": ""
													}
												],
												"src": "5736:140:8"
											},
											{
												"body": {
													"nativeSrc": "5933:116:8",
													"nodeType": "YulBlock",
													"src": "5933:116:8",
													"statements": [
														{
															"nativeSrc": "5943:20:8",
															"nodeType": "YulAssignment",
															"src": "5943:20:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "5958:1:8",
																		"nodeType": "YulIdentifier",
																		"src": "5958:1:8"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "5961:1:8",
																		"nodeType": "YulIdentifier",
																		"src": "5961:1:8"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "5954:3:8",
																	"nodeType": "YulIdentifier",
																	"src": "5954:3:8"
																},
																"nativeSrc": "5954:9:8",
																"nodeType": "YulFunctionCall",
																"src": "5954:9:8"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nativeSrc": "5943:7:8",
																	"nodeType": "YulIdentifier",
																	"src": "5943:7:8"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "6021:22:8",
																"nodeType": "YulBlock",
																"src": "6021:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "6023:16:8",
																				"nodeType": "YulIdentifier",
																				"src": "6023:16:8"
																			},
																			"nativeSrc": "6023:18:8",
																			"nodeType": "YulFunctionCall",
																			"src": "6023:18:8"
																		},
																		"nativeSrc": "6023:18:8",
																		"nodeType": "YulExpressionStatement",
																		"src": "6023:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nativeSrc": "5992:1:8",
																						"nodeType": "YulIdentifier",
																						"src": "5992:1:8"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "5985:6:8",
																					"nodeType": "YulIdentifier",
																					"src": "5985:6:8"
																				},
																				"nativeSrc": "5985:9:8",
																				"nodeType": "YulFunctionCall",
																				"src": "5985:9:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "y",
																						"nativeSrc": "5999:1:8",
																						"nodeType": "YulIdentifier",
																						"src": "5999:1:8"
																					},
																					{
																						"arguments": [
																							{
																								"name": "product",
																								"nativeSrc": "6006:7:8",
																								"nodeType": "YulIdentifier",
																								"src": "6006:7:8"
																							},
																							{
																								"name": "x",
																								"nativeSrc": "6015:1:8",
																								"nodeType": "YulIdentifier",
																								"src": "6015:1:8"
																							}
																						],
																						"functionName": {
																							"name": "div",
																							"nativeSrc": "6002:3:8",
																							"nodeType": "YulIdentifier",
																							"src": "6002:3:8"
																						},
																						"nativeSrc": "6002:15:8",
																						"nodeType": "YulFunctionCall",
																						"src": "6002:15:8"
																					}
																				],
																				"functionName": {
																					"name": "eq",
																					"nativeSrc": "5996:2:8",
																					"nodeType": "YulIdentifier",
																					"src": "5996:2:8"
																				},
																				"nativeSrc": "5996:22:8",
																				"nodeType": "YulFunctionCall",
																				"src": "5996:22:8"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nativeSrc": "5982:2:8",
																			"nodeType": "YulIdentifier",
																			"src": "5982:2:8"
																		},
																		"nativeSrc": "5982:37:8",
																		"nodeType": "YulFunctionCall",
																		"src": "5982:37:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "5975:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "5975:6:8"
																},
																"nativeSrc": "5975:45:8",
																"nodeType": "YulFunctionCall",
																"src": "5975:45:8"
															},
															"nativeSrc": "5972:71:8",
															"nodeType": "YulIf",
															"src": "5972:71:8"
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nativeSrc": "5881:168:8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "5912:1:8",
														"nodeType": "YulTypedName",
														"src": "5912:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "5915:1:8",
														"nodeType": "YulTypedName",
														"src": "5915:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nativeSrc": "5921:7:8",
														"nodeType": "YulTypedName",
														"src": "5921:7:8",
														"type": ""
													}
												],
												"src": "5881:168:8"
											},
											{
												"body": {
													"nativeSrc": "6162:101:8",
													"nodeType": "YulBlock",
													"src": "6162:101:8",
													"statements": [
														{
															"nativeSrc": "6172:26:8",
															"nodeType": "YulAssignment",
															"src": "6172:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6184:9:8",
																		"nodeType": "YulIdentifier",
																		"src": "6184:9:8"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6195:2:8",
																		"nodeType": "YulLiteral",
																		"src": "6195:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6180:3:8",
																	"nodeType": "YulIdentifier",
																	"src": "6180:3:8"
																},
																"nativeSrc": "6180:18:8",
																"nodeType": "YulFunctionCall",
																"src": "6180:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "6172:4:8",
																	"nodeType": "YulIdentifier",
																	"src": "6172:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6214:9:8",
																		"nodeType": "YulIdentifier",
																		"src": "6214:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "6229:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "6229:6:8"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6237:18:8",
																				"nodeType": "YulLiteral",
																				"src": "6237:18:8",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "6225:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "6225:3:8"
																		},
																		"nativeSrc": "6225:31:8",
																		"nodeType": "YulFunctionCall",
																		"src": "6225:31:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6207:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "6207:6:8"
																},
																"nativeSrc": "6207:50:8",
																"nodeType": "YulFunctionCall",
																"src": "6207:50:8"
															},
															"nativeSrc": "6207:50:8",
															"nodeType": "YulExpressionStatement",
															"src": "6207:50:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed",
												"nativeSrc": "6054:209:8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6131:9:8",
														"nodeType": "YulTypedName",
														"src": "6131:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "6142:6:8",
														"nodeType": "YulTypedName",
														"src": "6142:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "6153:4:8",
														"nodeType": "YulTypedName",
														"src": "6153:4:8",
														"type": ""
													}
												],
												"src": "6054:209:8"
											},
											{
												"body": {
													"nativeSrc": "6425:188:8",
													"nodeType": "YulBlock",
													"src": "6425:188:8",
													"statements": [
														{
															"nativeSrc": "6435:26:8",
															"nodeType": "YulAssignment",
															"src": "6435:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6447:9:8",
																		"nodeType": "YulIdentifier",
																		"src": "6447:9:8"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6458:2:8",
																		"nodeType": "YulLiteral",
																		"src": "6458:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6443:3:8",
																	"nodeType": "YulIdentifier",
																	"src": "6443:3:8"
																},
																"nativeSrc": "6443:18:8",
																"nodeType": "YulFunctionCall",
																"src": "6443:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "6435:4:8",
																	"nodeType": "YulIdentifier",
																	"src": "6435:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6477:9:8",
																		"nodeType": "YulIdentifier",
																		"src": "6477:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "6492:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "6492:6:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "6508:3:8",
																								"nodeType": "YulLiteral",
																								"src": "6508:3:8",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "6513:1:8",
																								"nodeType": "YulLiteral",
																								"src": "6513:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "6504:3:8",
																							"nodeType": "YulIdentifier",
																							"src": "6504:3:8"
																						},
																						"nativeSrc": "6504:11:8",
																						"nodeType": "YulFunctionCall",
																						"src": "6504:11:8"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "6517:1:8",
																						"nodeType": "YulLiteral",
																						"src": "6517:1:8",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "6500:3:8",
																					"nodeType": "YulIdentifier",
																					"src": "6500:3:8"
																				},
																				"nativeSrc": "6500:19:8",
																				"nodeType": "YulFunctionCall",
																				"src": "6500:19:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "6488:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "6488:3:8"
																		},
																		"nativeSrc": "6488:32:8",
																		"nodeType": "YulFunctionCall",
																		"src": "6488:32:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6470:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "6470:6:8"
																},
																"nativeSrc": "6470:51:8",
																"nodeType": "YulFunctionCall",
																"src": "6470:51:8"
															},
															"nativeSrc": "6470:51:8",
															"nodeType": "YulExpressionStatement",
															"src": "6470:51:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6541:9:8",
																				"nodeType": "YulIdentifier",
																				"src": "6541:9:8"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6552:2:8",
																				"nodeType": "YulLiteral",
																				"src": "6552:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6537:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "6537:3:8"
																		},
																		"nativeSrc": "6537:18:8",
																		"nodeType": "YulFunctionCall",
																		"src": "6537:18:8"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "6557:6:8",
																		"nodeType": "YulIdentifier",
																		"src": "6557:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6530:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "6530:6:8"
																},
																"nativeSrc": "6530:34:8",
																"nodeType": "YulFunctionCall",
																"src": "6530:34:8"
															},
															"nativeSrc": "6530:34:8",
															"nodeType": "YulExpressionStatement",
															"src": "6530:34:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6584:9:8",
																				"nodeType": "YulIdentifier",
																				"src": "6584:9:8"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6595:2:8",
																				"nodeType": "YulLiteral",
																				"src": "6595:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6580:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "6580:3:8"
																		},
																		"nativeSrc": "6580:18:8",
																		"nodeType": "YulFunctionCall",
																		"src": "6580:18:8"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "6600:6:8",
																		"nodeType": "YulIdentifier",
																		"src": "6600:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6573:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "6573:6:8"
																},
																"nativeSrc": "6573:34:8",
																"nodeType": "YulFunctionCall",
																"src": "6573:34:8"
															},
															"nativeSrc": "6573:34:8",
															"nodeType": "YulExpressionStatement",
															"src": "6573:34:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "6268:345:8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6378:9:8",
														"nodeType": "YulTypedName",
														"src": "6378:9:8",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "6389:6:8",
														"nodeType": "YulTypedName",
														"src": "6389:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "6397:6:8",
														"nodeType": "YulTypedName",
														"src": "6397:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "6405:6:8",
														"nodeType": "YulTypedName",
														"src": "6405:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "6416:4:8",
														"nodeType": "YulTypedName",
														"src": "6416:4:8",
														"type": ""
													}
												],
												"src": "6268:345:8"
											},
											{
												"body": {
													"nativeSrc": "6666:77:8",
													"nodeType": "YulBlock",
													"src": "6666:77:8",
													"statements": [
														{
															"nativeSrc": "6676:16:8",
															"nodeType": "YulAssignment",
															"src": "6676:16:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "6687:1:8",
																		"nodeType": "YulIdentifier",
																		"src": "6687:1:8"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "6690:1:8",
																		"nodeType": "YulIdentifier",
																		"src": "6690:1:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6683:3:8",
																	"nodeType": "YulIdentifier",
																	"src": "6683:3:8"
																},
																"nativeSrc": "6683:9:8",
																"nodeType": "YulFunctionCall",
																"src": "6683:9:8"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nativeSrc": "6676:3:8",
																	"nodeType": "YulIdentifier",
																	"src": "6676:3:8"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "6715:22:8",
																"nodeType": "YulBlock",
																"src": "6715:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "6717:16:8",
																				"nodeType": "YulIdentifier",
																				"src": "6717:16:8"
																			},
																			"nativeSrc": "6717:18:8",
																			"nodeType": "YulFunctionCall",
																			"src": "6717:18:8"
																		},
																		"nativeSrc": "6717:18:8",
																		"nodeType": "YulExpressionStatement",
																		"src": "6717:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "6707:1:8",
																		"nodeType": "YulIdentifier",
																		"src": "6707:1:8"
																	},
																	{
																		"name": "sum",
																		"nativeSrc": "6710:3:8",
																		"nodeType": "YulIdentifier",
																		"src": "6710:3:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "6704:2:8",
																	"nodeType": "YulIdentifier",
																	"src": "6704:2:8"
																},
																"nativeSrc": "6704:10:8",
																"nodeType": "YulFunctionCall",
																"src": "6704:10:8"
															},
															"nativeSrc": "6701:36:8",
															"nodeType": "YulIf",
															"src": "6701:36:8"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nativeSrc": "6618:125:8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "6649:1:8",
														"nodeType": "YulTypedName",
														"src": "6649:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "6652:1:8",
														"nodeType": "YulTypedName",
														"src": "6652:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nativeSrc": "6658:3:8",
														"nodeType": "YulTypedName",
														"src": "6658:3:8",
														"type": ""
													}
												],
												"src": "6618:125:8"
											},
											{
												"body": {
													"nativeSrc": "6804:65:8",
													"nodeType": "YulBlock",
													"src": "6804:65:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "6821:1:8",
																		"nodeType": "YulLiteral",
																		"src": "6821:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nativeSrc": "6824:3:8",
																		"nodeType": "YulIdentifier",
																		"src": "6824:3:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6814:6:8",
																	"nodeType": "YulIdentifier",
																	"src": "6814:6:8"
																},
																"nativeSrc": "6814:14:8",
																"nodeType": "YulFunctionCall",
																"src": "6814:14:8"
															},
															"nativeSrc": "6814:14:8",
															"nodeType": "YulExpressionStatement",
															"src": "6814:14:8"
														},
														{
															"nativeSrc": "6837:26:8",
															"nodeType": "YulAssignment",
															"src": "6837:26:8",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "6855:1:8",
																		"nodeType": "YulLiteral",
																		"src": "6855:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6858:4:8",
																		"nodeType": "YulLiteral",
																		"src": "6858:4:8",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "6845:9:8",
																	"nodeType": "YulIdentifier",
																	"src": "6845:9:8"
																},
																"nativeSrc": "6845:18:8",
																"nodeType": "YulFunctionCall",
																"src": "6845:18:8"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "6837:4:8",
																	"nodeType": "YulIdentifier",
																	"src": "6837:4:8"
																}
															]
														}
													]
												},
												"name": "array_dataslot_string_storage",
												"nativeSrc": "6748:121:8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nativeSrc": "6787:3:8",
														"nodeType": "YulTypedName",
														"src": "6787:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nativeSrc": "6795:4:8",
														"nodeType": "YulTypedName",
														"src": "6795:4:8",
														"type": ""
													}
												],
												"src": "6748:121:8"
											},
											{
												"body": {
													"nativeSrc": "6955:437:8",
													"nodeType": "YulBlock",
													"src": "6955:437:8",
													"statements": [
														{
															"body": {
																"nativeSrc": "6988:398:8",
																"nodeType": "YulBlock",
																"src": "6988:398:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "7009:1:8",
																					"nodeType": "YulLiteral",
																					"src": "7009:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"name": "array",
																					"nativeSrc": "7012:5:8",
																					"nodeType": "YulIdentifier",
																					"src": "7012:5:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "7002:6:8",
																				"nodeType": "YulIdentifier",
																				"src": "7002:6:8"
																			},
																			"nativeSrc": "7002:16:8",
																			"nodeType": "YulFunctionCall",
																			"src": "7002:16:8"
																		},
																		"nativeSrc": "7002:16:8",
																		"nodeType": "YulExpressionStatement",
																		"src": "7002:16:8"
																	},
																	{
																		"nativeSrc": "7031:30:8",
																		"nodeType": "YulVariableDeclaration",
																		"src": "7031:30:8",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "7053:1:8",
																					"nodeType": "YulLiteral",
																					"src": "7053:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "7056:4:8",
																					"nodeType": "YulLiteral",
																					"src": "7056:4:8",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "keccak256",
																				"nativeSrc": "7043:9:8",
																				"nodeType": "YulIdentifier",
																				"src": "7043:9:8"
																			},
																			"nativeSrc": "7043:18:8",
																			"nodeType": "YulFunctionCall",
																			"src": "7043:18:8"
																		},
																		"variables": [
																			{
																				"name": "data",
																				"nativeSrc": "7035:4:8",
																				"nodeType": "YulTypedName",
																				"src": "7035:4:8",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "7074:57:8",
																		"nodeType": "YulVariableDeclaration",
																		"src": "7074:57:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nativeSrc": "7097:4:8",
																					"nodeType": "YulIdentifier",
																					"src": "7097:4:8"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "7107:1:8",
																							"nodeType": "YulLiteral",
																							"src": "7107:1:8",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "startIndex",
																									"nativeSrc": "7114:10:8",
																									"nodeType": "YulIdentifier",
																									"src": "7114:10:8"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "7126:2:8",
																									"nodeType": "YulLiteral",
																									"src": "7126:2:8",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "7110:3:8",
																								"nodeType": "YulIdentifier",
																								"src": "7110:3:8"
																							},
																							"nativeSrc": "7110:19:8",
																							"nodeType": "YulFunctionCall",
																							"src": "7110:19:8"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nativeSrc": "7103:3:8",
																						"nodeType": "YulIdentifier",
																						"src": "7103:3:8"
																					},
																					"nativeSrc": "7103:27:8",
																					"nodeType": "YulFunctionCall",
																					"src": "7103:27:8"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "7093:3:8",
																				"nodeType": "YulIdentifier",
																				"src": "7093:3:8"
																			},
																			"nativeSrc": "7093:38:8",
																			"nodeType": "YulFunctionCall",
																			"src": "7093:38:8"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nativeSrc": "7078:11:8",
																				"nodeType": "YulTypedName",
																				"src": "7078:11:8",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nativeSrc": "7168:23:8",
																			"nodeType": "YulBlock",
																			"src": "7168:23:8",
																			"statements": [
																				{
																					"nativeSrc": "7170:19:8",
																					"nodeType": "YulAssignment",
																					"src": "7170:19:8",
																					"value": {
																						"name": "data",
																						"nativeSrc": "7185:4:8",
																						"nodeType": "YulIdentifier",
																						"src": "7185:4:8"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nativeSrc": "7170:11:8",
																							"nodeType": "YulIdentifier",
																							"src": "7170:11:8"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nativeSrc": "7150:10:8",
																					"nodeType": "YulIdentifier",
																					"src": "7150:10:8"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "7162:4:8",
																					"nodeType": "YulLiteral",
																					"src": "7162:4:8",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nativeSrc": "7147:2:8",
																				"nodeType": "YulIdentifier",
																				"src": "7147:2:8"
																			},
																			"nativeSrc": "7147:20:8",
																			"nodeType": "YulFunctionCall",
																			"src": "7147:20:8"
																		},
																		"nativeSrc": "7144:47:8",
																		"nodeType": "YulIf",
																		"src": "7144:47:8"
																	},
																	{
																		"nativeSrc": "7204:41:8",
																		"nodeType": "YulVariableDeclaration",
																		"src": "7204:41:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nativeSrc": "7218:4:8",
																					"nodeType": "YulIdentifier",
																					"src": "7218:4:8"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "7228:1:8",
																							"nodeType": "YulLiteral",
																							"src": "7228:1:8",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nativeSrc": "7235:3:8",
																									"nodeType": "YulIdentifier",
																									"src": "7235:3:8"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "7240:2:8",
																									"nodeType": "YulLiteral",
																									"src": "7240:2:8",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "7231:3:8",
																								"nodeType": "YulIdentifier",
																								"src": "7231:3:8"
																							},
																							"nativeSrc": "7231:12:8",
																							"nodeType": "YulFunctionCall",
																							"src": "7231:12:8"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nativeSrc": "7224:3:8",
																						"nodeType": "YulIdentifier",
																						"src": "7224:3:8"
																					},
																					"nativeSrc": "7224:20:8",
																					"nodeType": "YulFunctionCall",
																					"src": "7224:20:8"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "7214:3:8",
																				"nodeType": "YulIdentifier",
																				"src": "7214:3:8"
																			},
																			"nativeSrc": "7214:31:8",
																			"nodeType": "YulFunctionCall",
																			"src": "7214:31:8"
																		},
																		"variables": [
																			{
																				"name": "_1",
																				"nativeSrc": "7208:2:8",
																				"nodeType": "YulTypedName",
																				"src": "7208:2:8",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "7258:24:8",
																		"nodeType": "YulVariableDeclaration",
																		"src": "7258:24:8",
																		"value": {
																			"name": "deleteStart",
																			"nativeSrc": "7271:11:8",
																			"nodeType": "YulIdentifier",
																			"src": "7271:11:8"
																		},
																		"variables": [
																			{
																				"name": "start",
																				"nativeSrc": "7262:5:8",
																				"nodeType": "YulTypedName",
																				"src": "7262:5:8",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nativeSrc": "7356:20:8",
																			"nodeType": "YulBlock",
																			"src": "7356:20:8",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [
																							{
																								"name": "start",
																								"nativeSrc": "7365:5:8",
																								"nodeType": "YulIdentifier",
																								"src": "7365:5:8"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "7372:1:8",
																								"nodeType": "YulLiteral",
																								"src": "7372:1:8",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "sstore",
																							"nativeSrc": "7358:6:8",
																							"nodeType": "YulIdentifier",
																							"src": "7358:6:8"
																						},
																						"nativeSrc": "7358:16:8",
																						"nodeType": "YulFunctionCall",
																						"src": "7358:16:8"
																					},
																					"nativeSrc": "7358:16:8",
																					"nodeType": "YulExpressionStatement",
																					"src": "7358:16:8"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "start",
																					"nativeSrc": "7306:5:8",
																					"nodeType": "YulIdentifier",
																					"src": "7306:5:8"
																				},
																				{
																					"name": "_1",
																					"nativeSrc": "7313:2:8",
																					"nodeType": "YulIdentifier",
																					"src": "7313:2:8"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nativeSrc": "7303:2:8",
																				"nodeType": "YulIdentifier",
																				"src": "7303:2:8"
																			},
																			"nativeSrc": "7303:13:8",
																			"nodeType": "YulFunctionCall",
																			"src": "7303:13:8"
																		},
																		"nativeSrc": "7295:81:8",
																		"nodeType": "YulForLoop",
																		"post": {
																			"nativeSrc": "7317:26:8",
																			"nodeType": "YulBlock",
																			"src": "7317:26:8",
																			"statements": [
																				{
																					"nativeSrc": "7319:22:8",
																					"nodeType": "YulAssignment",
																					"src": "7319:22:8",
																					"value": {
																						"arguments": [
																							{
																								"name": "start",
																								"nativeSrc": "7332:5:8",
																								"nodeType": "YulIdentifier",
																								"src": "7332:5:8"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "7339:1:8",
																								"nodeType": "YulLiteral",
																								"src": "7339:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nativeSrc": "7328:3:8",
																							"nodeType": "YulIdentifier",
																							"src": "7328:3:8"
																						},
																						"nativeSrc": "7328:13:8",
																						"nodeType": "YulFunctionCall",
																						"src": "7328:13:8"
																					},
																					"variableNames": [
																						{
																							"name": "start",
																							"nativeSrc": "7319:5:8",
																							"nodeType": "YulIdentifier",
																							"src": "7319:5:8"
																						}
																					]
																				}
																			]
																		},
																		"pre": {
																			"nativeSrc": "7299:3:8",
																			"nodeType": "YulBlock",
																			"src": "7299:3:8",
																			"statements": []
																		},
																		"src": "7295:81:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nativeSrc": "6971:3:8",
																		"nodeType": "YulIdentifier",
																		"src": "6971:3:8"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6976:2:8",
																		"nodeType": "YulLiteral",
																		"src": "6976:2:8",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "6968:2:8",
																	"nodeType": "YulIdentifier",
																	"src": "6968:2:8"
																},
																"nativeSrc": "6968:11:8",
																"nodeType": "YulFunctionCall",
																"src": "6968:11:8"
															},
															"nativeSrc": "6965:421:8",
															"nodeType": "YulIf",
															"src": "6965:421:8"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_string_storage",
												"nativeSrc": "6874:518:8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nativeSrc": "6927:5:8",
														"nodeType": "YulTypedName",
														"src": "6927:5:8",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "6934:3:8",
														"nodeType": "YulTypedName",
														"src": "6934:3:8",
														"type": ""
													},
													{
														"name": "startIndex",
														"nativeSrc": "6939:10:8",
														"nodeType": "YulTypedName",
														"src": "6939:10:8",
														"type": ""
													}
												],
												"src": "6874:518:8"
											},
											{
												"body": {
													"nativeSrc": "7482:81:8",
													"nodeType": "YulBlock",
													"src": "7482:81:8",
													"statements": [
														{
															"nativeSrc": "7492:65:8",
															"nodeType": "YulAssignment",
															"src": "7492:65:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "7507:4:8",
																				"nodeType": "YulIdentifier",
																				"src": "7507:4:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "7525:1:8",
																										"nodeType": "YulLiteral",
																										"src": "7525:1:8",
																										"type": "",
																										"value": "3"
																									},
																									{
																										"name": "len",
																										"nativeSrc": "7528:3:8",
																										"nodeType": "YulIdentifier",
																										"src": "7528:3:8"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "7521:3:8",
																									"nodeType": "YulIdentifier",
																									"src": "7521:3:8"
																								},
																								"nativeSrc": "7521:11:8",
																								"nodeType": "YulFunctionCall",
																								"src": "7521:11:8"
																							},
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "7538:1:8",
																										"nodeType": "YulLiteral",
																										"src": "7538:1:8",
																										"type": "",
																										"value": "0"
																									}
																								],
																								"functionName": {
																									"name": "not",
																									"nativeSrc": "7534:3:8",
																									"nodeType": "YulIdentifier",
																									"src": "7534:3:8"
																								},
																								"nativeSrc": "7534:6:8",
																								"nodeType": "YulFunctionCall",
																								"src": "7534:6:8"
																							}
																						],
																						"functionName": {
																							"name": "shr",
																							"nativeSrc": "7517:3:8",
																							"nodeType": "YulIdentifier",
																							"src": "7517:3:8"
																						},
																						"nativeSrc": "7517:24:8",
																						"nodeType": "YulFunctionCall",
																						"src": "7517:24:8"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "7513:3:8",
																					"nodeType": "YulIdentifier",
																					"src": "7513:3:8"
																				},
																				"nativeSrc": "7513:29:8",
																				"nodeType": "YulFunctionCall",
																				"src": "7513:29:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "7503:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "7503:3:8"
																		},
																		"nativeSrc": "7503:40:8",
																		"nodeType": "YulFunctionCall",
																		"src": "7503:40:8"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "7549:1:8",
																				"nodeType": "YulLiteral",
																				"src": "7549:1:8",
																				"type": "",
																				"value": "1"
																			},
																			{
																				"name": "len",
																				"nativeSrc": "7552:3:8",
																				"nodeType": "YulIdentifier",
																				"src": "7552:3:8"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "7545:3:8",
																			"nodeType": "YulIdentifier",
																			"src": "7545:3:8"
																		},
																		"nativeSrc": "7545:11:8",
																		"nodeType": "YulFunctionCall",
																		"src": "7545:11:8"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "7500:2:8",
																	"nodeType": "YulIdentifier",
																	"src": "7500:2:8"
																},
																"nativeSrc": "7500:57:8",
																"nodeType": "YulFunctionCall",
																"src": "7500:57:8"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nativeSrc": "7492:4:8",
																	"nodeType": "YulIdentifier",
																	"src": "7492:4:8"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nativeSrc": "7397:166:8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "7459:4:8",
														"nodeType": "YulTypedName",
														"src": "7459:4:8",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "7465:3:8",
														"nodeType": "YulTypedName",
														"src": "7465:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nativeSrc": "7473:4:8",
														"nodeType": "YulTypedName",
														"src": "7473:4:8",
														"type": ""
													}
												],
												"src": "7397:166:8"
											},
											{
												"body": {
													"nativeSrc": "7664:1203:8",
													"nodeType": "YulBlock",
													"src": "7664:1203:8",
													"statements": [
														{
															"nativeSrc": "7674:24:8",
															"nodeType": "YulVariableDeclaration",
															"src": "7674:24:8",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nativeSrc": "7694:3:8",
																		"nodeType": "YulIdentifier",
																		"src": "7694:3:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "7688:5:8",
																	"nodeType": "YulIdentifier",
																	"src": "7688:5:8"
																},
																"nativeSrc": "7688:10:8",
																"nodeType": "YulFunctionCall",
																"src": "7688:10:8"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nativeSrc": "7678:6:8",
																	"nodeType": "YulTypedName",
																	"src": "7678:6:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "7741:22:8",
																"nodeType": "YulBlock",
																"src": "7741:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "7743:16:8",
																				"nodeType": "YulIdentifier",
																				"src": "7743:16:8"
																			},
																			"nativeSrc": "7743:18:8",
																			"nodeType": "YulFunctionCall",
																			"src": "7743:18:8"
																		},
																		"nativeSrc": "7743:18:8",
																		"nodeType": "YulExpressionStatement",
																		"src": "7743:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "7713:6:8",
																		"nodeType": "YulIdentifier",
																		"src": "7713:6:8"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7721:18:8",
																		"nodeType": "YulLiteral",
																		"src": "7721:18:8",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "7710:2:8",
																	"nodeType": "YulIdentifier",
																	"src": "7710:2:8"
																},
																"nativeSrc": "7710:30:8",
																"nodeType": "YulFunctionCall",
																"src": "7710:30:8"
															},
															"nativeSrc": "7707:56:8",
															"nodeType": "YulIf",
															"src": "7707:56:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "7816:4:8",
																		"nodeType": "YulIdentifier",
																		"src": "7816:4:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nativeSrc": "7854:4:8",
																						"nodeType": "YulIdentifier",
																						"src": "7854:4:8"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nativeSrc": "7848:5:8",
																					"nodeType": "YulIdentifier",
																					"src": "7848:5:8"
																				},
																				"nativeSrc": "7848:11:8",
																				"nodeType": "YulFunctionCall",
																				"src": "7848:11:8"
																			}
																		],
																		"functionName": {
																			"name": "extract_byte_array_length",
																			"nativeSrc": "7822:25:8",
																			"nodeType": "YulIdentifier",
																			"src": "7822:25:8"
																		},
																		"nativeSrc": "7822:38:8",
																		"nodeType": "YulFunctionCall",
																		"src": "7822:38:8"
																	},
																	{
																		"name": "newLen",
																		"nativeSrc": "7862:6:8",
																		"nodeType": "YulIdentifier",
																		"src": "7862:6:8"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_string_storage",
																	"nativeSrc": "7772:43:8",
																	"nodeType": "YulIdentifier",
																	"src": "7772:43:8"
																},
																"nativeSrc": "7772:97:8",
																"nodeType": "YulFunctionCall",
																"src": "7772:97:8"
															},
															"nativeSrc": "7772:97:8",
															"nodeType": "YulExpressionStatement",
															"src": "7772:97:8"
														},
														{
															"nativeSrc": "7878:18:8",
															"nodeType": "YulVariableDeclaration",
															"src": "7878:18:8",
															"value": {
																"kind": "number",
																"nativeSrc": "7895:1:8",
																"nodeType": "YulLiteral",
																"src": "7895:1:8",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "7882:9:8",
																	"nodeType": "YulTypedName",
																	"src": "7882:9:8",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "7905:17:8",
															"nodeType": "YulAssignment",
															"src": "7905:17:8",
															"value": {
																"kind": "number",
																"nativeSrc": "7918:4:8",
																"nodeType": "YulLiteral",
																"src": "7918:4:8",
																"type": "",
																"value": "0x20"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "7905:9:8",
																	"nodeType": "YulIdentifier",
																	"src": "7905:9:8"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nativeSrc": "7968:642:8",
																		"nodeType": "YulBlock",
																		"src": "7968:642:8",
																		"statements": [
																			{
																				"nativeSrc": "7982:35:8",
																				"nodeType": "YulVariableDeclaration",
																				"src": "7982:35:8",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nativeSrc": "8001:6:8",
																							"nodeType": "YulIdentifier",
																							"src": "8001:6:8"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nativeSrc": "8013:2:8",
																									"nodeType": "YulLiteral",
																									"src": "8013:2:8",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nativeSrc": "8009:3:8",
																								"nodeType": "YulIdentifier",
																								"src": "8009:3:8"
																							},
																							"nativeSrc": "8009:7:8",
																							"nodeType": "YulFunctionCall",
																							"src": "8009:7:8"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nativeSrc": "7997:3:8",
																						"nodeType": "YulIdentifier",
																						"src": "7997:3:8"
																					},
																					"nativeSrc": "7997:20:8",
																					"nodeType": "YulFunctionCall",
																					"src": "7997:20:8"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nativeSrc": "7986:7:8",
																						"nodeType": "YulTypedName",
																						"src": "7986:7:8",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "8030:49:8",
																				"nodeType": "YulVariableDeclaration",
																				"src": "8030:49:8",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "8074:4:8",
																							"nodeType": "YulIdentifier",
																							"src": "8074:4:8"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_string_storage",
																						"nativeSrc": "8044:29:8",
																						"nodeType": "YulIdentifier",
																						"src": "8044:29:8"
																					},
																					"nativeSrc": "8044:35:8",
																					"nodeType": "YulFunctionCall",
																					"src": "8044:35:8"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nativeSrc": "8034:6:8",
																						"nodeType": "YulTypedName",
																						"src": "8034:6:8",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "8092:10:8",
																				"nodeType": "YulVariableDeclaration",
																				"src": "8092:10:8",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "8101:1:8",
																					"nodeType": "YulLiteral",
																					"src": "8101:1:8",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nativeSrc": "8096:1:8",
																						"nodeType": "YulTypedName",
																						"src": "8096:1:8",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "8172:165:8",
																					"nodeType": "YulBlock",
																					"src": "8172:165:8",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "8197:6:8",
																										"nodeType": "YulIdentifier",
																										"src": "8197:6:8"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nativeSrc": "8215:3:8",
																														"nodeType": "YulIdentifier",
																														"src": "8215:3:8"
																													},
																													{
																														"name": "srcOffset",
																														"nativeSrc": "8220:9:8",
																														"nodeType": "YulIdentifier",
																														"src": "8220:9:8"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nativeSrc": "8211:3:8",
																													"nodeType": "YulIdentifier",
																													"src": "8211:3:8"
																												},
																												"nativeSrc": "8211:19:8",
																												"nodeType": "YulFunctionCall",
																												"src": "8211:19:8"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nativeSrc": "8205:5:8",
																											"nodeType": "YulIdentifier",
																											"src": "8205:5:8"
																										},
																										"nativeSrc": "8205:26:8",
																										"nodeType": "YulFunctionCall",
																										"src": "8205:26:8"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "8190:6:8",
																									"nodeType": "YulIdentifier",
																									"src": "8190:6:8"
																								},
																								"nativeSrc": "8190:42:8",
																								"nodeType": "YulFunctionCall",
																								"src": "8190:42:8"
																							},
																							"nativeSrc": "8190:42:8",
																							"nodeType": "YulExpressionStatement",
																							"src": "8190:42:8"
																						},
																						{
																							"nativeSrc": "8249:24:8",
																							"nodeType": "YulAssignment",
																							"src": "8249:24:8",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "8263:6:8",
																										"nodeType": "YulIdentifier",
																										"src": "8263:6:8"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "8271:1:8",
																										"nodeType": "YulLiteral",
																										"src": "8271:1:8",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "8259:3:8",
																									"nodeType": "YulIdentifier",
																									"src": "8259:3:8"
																								},
																								"nativeSrc": "8259:14:8",
																								"nodeType": "YulFunctionCall",
																								"src": "8259:14:8"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nativeSrc": "8249:6:8",
																									"nodeType": "YulIdentifier",
																									"src": "8249:6:8"
																								}
																							]
																						},
																						{
																							"nativeSrc": "8290:33:8",
																							"nodeType": "YulAssignment",
																							"src": "8290:33:8",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nativeSrc": "8307:9:8",
																										"nodeType": "YulIdentifier",
																										"src": "8307:9:8"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "8318:4:8",
																										"nodeType": "YulLiteral",
																										"src": "8318:4:8",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "8303:3:8",
																									"nodeType": "YulIdentifier",
																									"src": "8303:3:8"
																								},
																								"nativeSrc": "8303:20:8",
																								"nodeType": "YulFunctionCall",
																								"src": "8303:20:8"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nativeSrc": "8290:9:8",
																									"nodeType": "YulIdentifier",
																									"src": "8290:9:8"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nativeSrc": "8126:1:8",
																							"nodeType": "YulIdentifier",
																							"src": "8126:1:8"
																						},
																						{
																							"name": "loopEnd",
																							"nativeSrc": "8129:7:8",
																							"nodeType": "YulIdentifier",
																							"src": "8129:7:8"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "8123:2:8",
																						"nodeType": "YulIdentifier",
																						"src": "8123:2:8"
																					},
																					"nativeSrc": "8123:14:8",
																					"nodeType": "YulFunctionCall",
																					"src": "8123:14:8"
																				},
																				"nativeSrc": "8115:222:8",
																				"nodeType": "YulForLoop",
																				"post": {
																					"nativeSrc": "8138:21:8",
																					"nodeType": "YulBlock",
																					"src": "8138:21:8",
																					"statements": [
																						{
																							"nativeSrc": "8140:17:8",
																							"nodeType": "YulAssignment",
																							"src": "8140:17:8",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nativeSrc": "8149:1:8",
																										"nodeType": "YulIdentifier",
																										"src": "8149:1:8"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "8152:4:8",
																										"nodeType": "YulLiteral",
																										"src": "8152:4:8",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "8145:3:8",
																									"nodeType": "YulIdentifier",
																									"src": "8145:3:8"
																								},
																								"nativeSrc": "8145:12:8",
																								"nodeType": "YulFunctionCall",
																								"src": "8145:12:8"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nativeSrc": "8140:1:8",
																									"nodeType": "YulIdentifier",
																									"src": "8140:1:8"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nativeSrc": "8119:3:8",
																					"nodeType": "YulBlock",
																					"src": "8119:3:8",
																					"statements": []
																				},
																				"src": "8115:222:8"
																			},
																			{
																				"body": {
																					"nativeSrc": "8385:166:8",
																					"nodeType": "YulBlock",
																					"src": "8385:166:8",
																					"statements": [
																						{
																							"nativeSrc": "8403:43:8",
																							"nodeType": "YulVariableDeclaration",
																							"src": "8403:43:8",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "8430:3:8",
																												"nodeType": "YulIdentifier",
																												"src": "8430:3:8"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "8435:9:8",
																												"nodeType": "YulIdentifier",
																												"src": "8435:9:8"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "8426:3:8",
																											"nodeType": "YulIdentifier",
																											"src": "8426:3:8"
																										},
																										"nativeSrc": "8426:19:8",
																										"nodeType": "YulFunctionCall",
																										"src": "8426:19:8"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "8420:5:8",
																									"nodeType": "YulIdentifier",
																									"src": "8420:5:8"
																								},
																								"nativeSrc": "8420:26:8",
																								"nodeType": "YulFunctionCall",
																								"src": "8420:26:8"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nativeSrc": "8407:9:8",
																									"nodeType": "YulTypedName",
																									"src": "8407:9:8",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "8470:6:8",
																										"nodeType": "YulIdentifier",
																										"src": "8470:6:8"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nativeSrc": "8482:9:8",
																												"nodeType": "YulIdentifier",
																												"src": "8482:9:8"
																											},
																											{
																												"arguments": [
																													{
																														"arguments": [
																															{
																																"arguments": [
																																	{
																																		"arguments": [
																																			{
																																				"kind": "number",
																																				"nativeSrc": "8509:1:8",
																																				"nodeType": "YulLiteral",
																																				"src": "8509:1:8",
																																				"type": "",
																																				"value": "3"
																																			},
																																			{
																																				"name": "newLen",
																																				"nativeSrc": "8512:6:8",
																																				"nodeType": "YulIdentifier",
																																				"src": "8512:6:8"
																																			}
																																		],
																																		"functionName": {
																																			"name": "shl",
																																			"nativeSrc": "8505:3:8",
																																			"nodeType": "YulIdentifier",
																																			"src": "8505:3:8"
																																		},
																																		"nativeSrc": "8505:14:8",
																																		"nodeType": "YulFunctionCall",
																																		"src": "8505:14:8"
																																	},
																																	{
																																		"kind": "number",
																																		"nativeSrc": "8521:3:8",
																																		"nodeType": "YulLiteral",
																																		"src": "8521:3:8",
																																		"type": "",
																																		"value": "248"
																																	}
																																],
																																"functionName": {
																																	"name": "and",
																																	"nativeSrc": "8501:3:8",
																																	"nodeType": "YulIdentifier",
																																	"src": "8501:3:8"
																																},
																																"nativeSrc": "8501:24:8",
																																"nodeType": "YulFunctionCall",
																																"src": "8501:24:8"
																															},
																															{
																																"arguments": [
																																	{
																																		"kind": "number",
																																		"nativeSrc": "8531:1:8",
																																		"nodeType": "YulLiteral",
																																		"src": "8531:1:8",
																																		"type": "",
																																		"value": "0"
																																	}
																																],
																																"functionName": {
																																	"name": "not",
																																	"nativeSrc": "8527:3:8",
																																	"nodeType": "YulIdentifier",
																																	"src": "8527:3:8"
																																},
																																"nativeSrc": "8527:6:8",
																																"nodeType": "YulFunctionCall",
																																"src": "8527:6:8"
																															}
																														],
																														"functionName": {
																															"name": "shr",
																															"nativeSrc": "8497:3:8",
																															"nodeType": "YulIdentifier",
																															"src": "8497:3:8"
																														},
																														"nativeSrc": "8497:37:8",
																														"nodeType": "YulFunctionCall",
																														"src": "8497:37:8"
																													}
																												],
																												"functionName": {
																													"name": "not",
																													"nativeSrc": "8493:3:8",
																													"nodeType": "YulIdentifier",
																													"src": "8493:3:8"
																												},
																												"nativeSrc": "8493:42:8",
																												"nodeType": "YulFunctionCall",
																												"src": "8493:42:8"
																											}
																										],
																										"functionName": {
																											"name": "and",
																											"nativeSrc": "8478:3:8",
																											"nodeType": "YulIdentifier",
																											"src": "8478:3:8"
																										},
																										"nativeSrc": "8478:58:8",
																										"nodeType": "YulFunctionCall",
																										"src": "8478:58:8"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "8463:6:8",
																									"nodeType": "YulIdentifier",
																									"src": "8463:6:8"
																								},
																								"nativeSrc": "8463:74:8",
																								"nodeType": "YulFunctionCall",
																								"src": "8463:74:8"
																							},
																							"nativeSrc": "8463:74:8",
																							"nodeType": "YulExpressionStatement",
																							"src": "8463:74:8"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nativeSrc": "8356:7:8",
																							"nodeType": "YulIdentifier",
																							"src": "8356:7:8"
																						},
																						{
																							"name": "newLen",
																							"nativeSrc": "8365:6:8",
																							"nodeType": "YulIdentifier",
																							"src": "8365:6:8"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "8353:2:8",
																						"nodeType": "YulIdentifier",
																						"src": "8353:2:8"
																					},
																					"nativeSrc": "8353:19:8",
																					"nodeType": "YulFunctionCall",
																					"src": "8353:19:8"
																				},
																				"nativeSrc": "8350:201:8",
																				"nodeType": "YulIf",
																				"src": "8350:201:8"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "8571:4:8",
																							"nodeType": "YulIdentifier",
																							"src": "8571:4:8"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nativeSrc": "8585:1:8",
																											"nodeType": "YulLiteral",
																											"src": "8585:1:8",
																											"type": "",
																											"value": "1"
																										},
																										{
																											"name": "newLen",
																											"nativeSrc": "8588:6:8",
																											"nodeType": "YulIdentifier",
																											"src": "8588:6:8"
																										}
																									],
																									"functionName": {
																										"name": "shl",
																										"nativeSrc": "8581:3:8",
																										"nodeType": "YulIdentifier",
																										"src": "8581:3:8"
																									},
																									"nativeSrc": "8581:14:8",
																									"nodeType": "YulFunctionCall",
																									"src": "8581:14:8"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "8597:1:8",
																									"nodeType": "YulLiteral",
																									"src": "8597:1:8",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "8577:3:8",
																								"nodeType": "YulIdentifier",
																								"src": "8577:3:8"
																							},
																							"nativeSrc": "8577:22:8",
																							"nodeType": "YulFunctionCall",
																							"src": "8577:22:8"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "8564:6:8",
																						"nodeType": "YulIdentifier",
																						"src": "8564:6:8"
																					},
																					"nativeSrc": "8564:36:8",
																					"nodeType": "YulFunctionCall",
																					"src": "8564:36:8"
																				},
																				"nativeSrc": "8564:36:8",
																				"nodeType": "YulExpressionStatement",
																				"src": "8564:36:8"
																			}
																		]
																	},
																	"nativeSrc": "7961:649:8",
																	"nodeType": "YulCase",
																	"src": "7961:649:8",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "7966:1:8",
																		"nodeType": "YulLiteral",
																		"src": "7966:1:8",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nativeSrc": "8627:234:8",
																		"nodeType": "YulBlock",
																		"src": "8627:234:8",
																		"statements": [
																			{
																				"nativeSrc": "8641:14:8",
																				"nodeType": "YulVariableDeclaration",
																				"src": "8641:14:8",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "8654:1:8",
																					"nodeType": "YulLiteral",
																					"src": "8654:1:8",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nativeSrc": "8645:5:8",
																						"nodeType": "YulTypedName",
																						"src": "8645:5:8",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "8690:67:8",
																					"nodeType": "YulBlock",
																					"src": "8690:67:8",
																					"statements": [
																						{
																							"nativeSrc": "8708:35:8",
																							"nodeType": "YulAssignment",
																							"src": "8708:35:8",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "8727:3:8",
																												"nodeType": "YulIdentifier",
																												"src": "8727:3:8"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "8732:9:8",
																												"nodeType": "YulIdentifier",
																												"src": "8732:9:8"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "8723:3:8",
																											"nodeType": "YulIdentifier",
																											"src": "8723:3:8"
																										},
																										"nativeSrc": "8723:19:8",
																										"nodeType": "YulFunctionCall",
																										"src": "8723:19:8"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "8717:5:8",
																									"nodeType": "YulIdentifier",
																									"src": "8717:5:8"
																								},
																								"nativeSrc": "8717:26:8",
																								"nodeType": "YulFunctionCall",
																								"src": "8717:26:8"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nativeSrc": "8708:5:8",
																									"nodeType": "YulIdentifier",
																									"src": "8708:5:8"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nativeSrc": "8671:6:8",
																					"nodeType": "YulIdentifier",
																					"src": "8671:6:8"
																				},
																				"nativeSrc": "8668:89:8",
																				"nodeType": "YulIf",
																				"src": "8668:89:8"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "8777:4:8",
																							"nodeType": "YulIdentifier",
																							"src": "8777:4:8"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nativeSrc": "8836:5:8",
																									"nodeType": "YulIdentifier",
																									"src": "8836:5:8"
																								},
																								{
																									"name": "newLen",
																									"nativeSrc": "8843:6:8",
																									"nodeType": "YulIdentifier",
																									"src": "8843:6:8"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nativeSrc": "8783:52:8",
																								"nodeType": "YulIdentifier",
																								"src": "8783:52:8"
																							},
																							"nativeSrc": "8783:67:8",
																							"nodeType": "YulFunctionCall",
																							"src": "8783:67:8"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "8770:6:8",
																						"nodeType": "YulIdentifier",
																						"src": "8770:6:8"
																					},
																					"nativeSrc": "8770:81:8",
																					"nodeType": "YulFunctionCall",
																					"src": "8770:81:8"
																				},
																				"nativeSrc": "8770:81:8",
																				"nodeType": "YulExpressionStatement",
																				"src": "8770:81:8"
																			}
																		]
																	},
																	"nativeSrc": "8619:242:8",
																	"nodeType": "YulCase",
																	"src": "8619:242:8",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "7941:6:8",
																		"nodeType": "YulIdentifier",
																		"src": "7941:6:8"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7949:2:8",
																		"nodeType": "YulLiteral",
																		"src": "7949:2:8",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "7938:2:8",
																	"nodeType": "YulIdentifier",
																	"src": "7938:2:8"
																},
																"nativeSrc": "7938:14:8",
																"nodeType": "YulFunctionCall",
																"src": "7938:14:8"
															},
															"nativeSrc": "7931:930:8",
															"nodeType": "YulSwitch",
															"src": "7931:930:8"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nativeSrc": "7568:1299:8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "7649:4:8",
														"nodeType": "YulTypedName",
														"src": "7649:4:8",
														"type": ""
													},
													{
														"name": "src",
														"nativeSrc": "7655:3:8",
														"nodeType": "YulTypedName",
														"src": "7655:3:8",
														"type": ""
													}
												],
												"src": "7568:1299:8"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        mcopy(add(headStart, 64), add(value0, 32), length)\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := 0\n        value := calldataload(add(headStart, 32))\n        value1 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let value := 0\n        value := calldataload(add(headStart, 64))\n        value2 := value\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(length, 0x1f), not(31)), 63), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, length)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), length)\n        mstore(add(add(memPtr, length), 0x20), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_string(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_string(add(headStart, offset_1), dataEnd)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_exp_helper(_base, exponent, max) -> power, base\n    {\n        power := 1\n        base := _base\n        for { } gt(exponent, 1) { }\n        {\n            if gt(base, div(max, base)) { panic_error_0x11() }\n            if and(exponent, 1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(1, exponent)\n        }\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            let _1 := 0\n            _1 := 0\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            let _2 := 0\n            _2 := 0\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent, not(0))\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, and(exponent, 0xff))\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _1 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _1) { start := add(start, 1) }\n            { sstore(start, 0) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        srcOffset := 0x20\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 0x20)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}",
									"id": 8,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561000f575f5ffd5b50600436106100e5575f3560e01c806370a082311161008857806395d89b411161006357806395d89b41146101f6578063a9059cbb146101fe578063dd62ed3e14610211578063f2fde38b14610224575f5ffd5b806370a082311461019a578063715018a6146101ce5780638da5cb5b146101d6575f5ffd5b806318160ddd116100c357806318160ddd1461013457806323b872dd14610165578063313ce567146101785780634cd88b7614610187575f5ffd5b806306fdde03146100e9578063095ea7b3146101075780631249c58b1461012a575b5f5ffd5b6100f1610237565b6040516100fe9190610a38565b60405180910390f35b61011a610115366004610a88565b6102f7565b60405190151581526020016100fe565b610132610310565b005b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace02545b6040519081526020016100fe565b61011a610173366004610ab0565b610346565b604051601281526020016100fe565b610132610195366004610b89565b610369565b6101576101a8366004610bee565b6001600160a01b03165f9081525f516020610ea65f395f51905f52602052604090205490565b610132610478565b6101de610489565b6040516001600160a01b0390911681526020016100fe565b6100f16104b7565b61011a61020c366004610a88565b6104f5565b61015761021f366004610c0e565b610502565b610132610232366004610bee565b61054b565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0380546060915f516020610ea65f395f51905f529161027590610c3f565b80601f01602080910402602001604051908101604052809291908181526020018280546102a190610c3f565b80156102ec5780601f106102c3576101008083540402835291602001916102ec565b820191905f5260205f20905b8154815290600101906020018083116102cf57829003601f168201915b505050505091505090565b5f3361030481858561058d565b60019150505b92915050565b61031861059f565b610344610323610489565b60125b61033190600a610d6e565b61033f90630bebc200610d7c565b6105d1565b565b5f33610353858285610609565b61035e85858561066d565b506001949350505050565b5f6103726106ca565b805490915060ff600160401b820416159067ffffffffffffffff165f811580156103995750825b90505f8267ffffffffffffffff1660011480156103b55750303b155b9050811580156103c3575080155b156103e15760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561040b57845460ff60401b1916600160401b1785555b610414336106f2565b61041e8787610703565b610429336012610326565b831561046f57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b61048061059f565b6103445f610715565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0480546060915f516020610ea65f395f51905f529161027590610c3f565b5f3361030481858561066d565b6001600160a01b039182165f9081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace016020908152604080832093909416825291909152205490565b61055361059f565b6001600160a01b03811661058157604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b61058a81610715565b50565b61059a8383836001610785565b505050565b336105a8610489565b6001600160a01b0316146103445760405163118cdaa760e01b8152336004820152602401610578565b6001600160a01b0382166105fa5760405163ec442f0560e01b81525f6004820152602401610578565b6106055f8383610869565b5050565b5f6106148484610502565b90505f19811015610667578181101561065957604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610578565b61066784848484035f610785565b50505050565b6001600160a01b03831661069657604051634b637e8f60e11b81525f6004820152602401610578565b6001600160a01b0382166106bf5760405163ec442f0560e01b81525f6004820152602401610578565b61059a838383610869565b5f807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0061030a565b6106fa6109a2565b61058a816109c7565b61070b6109a2565b61060582826109cf565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b5f516020610ea65f395f51905f526001600160a01b0385166107bc5760405163e602df0560e01b81525f6004820152602401610578565b6001600160a01b0384166107e557604051634a1406b160e11b81525f6004820152602401610578565b6001600160a01b038086165f9081526001830160209081526040808320938816835292905220839055811561086257836001600160a01b0316856001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258560405161085991815260200190565b60405180910390a35b5050505050565b5f516020610ea65f395f51905f526001600160a01b0384166108a35781816002015f8282546108989190610d93565b909155506109139050565b6001600160a01b0384165f90815260208290526040902054828110156108f55760405163391434e360e21b81526001600160a01b03861660048201526024810182905260448101849052606401610578565b6001600160a01b0385165f9081526020839052604090209083900390555b6001600160a01b03831661093157600281018054839003905561094f565b6001600160a01b0383165f9081526020829052604090208054830190555b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161099491815260200190565b60405180910390a350505050565b6109aa610a1f565b61034457604051631afcd79f60e31b815260040160405180910390fd5b6105536109a2565b6109d76109a2565b5f516020610ea65f395f51905f527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace03610a108482610dea565b50600481016106678382610dea565b5f610a286106ca565b54600160401b900460ff16919050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b0381168114610a83575f5ffd5b919050565b5f5f60408385031215610a99575f5ffd5b610aa283610a6d565b946020939093013593505050565b5f5f5f60608486031215610ac2575f5ffd5b610acb84610a6d565b9250610ad960208501610a6d565b929592945050506040919091013590565b634e487b7160e01b5f52604160045260245ffd5b5f82601f830112610b0d575f5ffd5b813567ffffffffffffffff811115610b2757610b27610aea565b604051601f8201601f19908116603f0116810167ffffffffffffffff81118282101715610b5657610b56610aea565b604052818152838201602001851015610b6d575f5ffd5b816020850160208301375f918101602001919091529392505050565b5f5f60408385031215610b9a575f5ffd5b823567ffffffffffffffff811115610bb0575f5ffd5b610bbc85828601610afe565b925050602083013567ffffffffffffffff811115610bd8575f5ffd5b610be485828601610afe565b9150509250929050565b5f60208284031215610bfe575f5ffd5b610c0782610a6d565b9392505050565b5f5f60408385031215610c1f575f5ffd5b610c2883610a6d565b9150610c3660208401610a6d565b90509250929050565b600181811c90821680610c5357607f821691505b602082108103610c7157634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52601160045260245ffd5b6001815b6001841115610cc657808504811115610caa57610caa610c77565b6001841615610cb857908102905b60019390931c928002610c8f565b935093915050565b5f82610cdc5750600161030a565b81610ce857505f61030a565b8160018114610cfe5760028114610d0857610d24565b600191505061030a565b60ff841115610d1957610d19610c77565b50506001821b61030a565b5060208310610133831016604e8410600b8410161715610d47575081810a61030a565b610d535f198484610c8b565b805f1904821115610d6657610d66610c77565b029392505050565b5f610c0760ff841683610cce565b808202811582820484141761030a5761030a610c77565b8082018082111561030a5761030a610c77565b601f82111561059a57805f5260205f20601f840160051c81016020851015610dcb5750805b601f840160051c820191505b81811015610862575f8155600101610dd7565b815167ffffffffffffffff811115610e0457610e04610aea565b610e1881610e128454610c3f565b84610da6565b6020601f821160018114610e4a575f8315610e335750848201515b5f19600385901b1c1916600184901b178455610862565b5f84815260208120601f198516915b82811015610e795787850151825560209485019460019092019101610e59565b5084821015610e9657868401515f19600387901b60f8161c191681555b50505050600190811b0190555056fe52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00a2646970667358221220577cd2639d5cd81a4a7c622dd699faea6593f5c8302dd404c7e292ef7058cd1f64736f6c634300081e0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xE5 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x88 JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x63 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1F6 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x211 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x224 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1CE JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1D6 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0xC3 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x134 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x165 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x4CD88B76 EQ PUSH2 0x187 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xE9 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x107 JUMPI DUP1 PUSH4 0x1249C58B EQ PUSH2 0x12A JUMPI JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0xF1 PUSH2 0x237 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFE SWAP2 SWAP1 PUSH2 0xA38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11A PUSH2 0x115 CALLDATASIZE PUSH1 0x4 PUSH2 0xA88 JUMP JUMPDEST PUSH2 0x2F7 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFE JUMP JUMPDEST PUSH2 0x132 PUSH2 0x310 JUMP JUMPDEST STOP JUMPDEST PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE02 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFE JUMP JUMPDEST PUSH2 0x11A PUSH2 0x173 CALLDATASIZE PUSH1 0x4 PUSH2 0xAB0 JUMP JUMPDEST PUSH2 0x346 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFE JUMP JUMPDEST PUSH2 0x132 PUSH2 0x195 CALLDATASIZE PUSH1 0x4 PUSH2 0xB89 JUMP JUMPDEST PUSH2 0x369 JUMP JUMPDEST PUSH2 0x157 PUSH2 0x1A8 CALLDATASIZE PUSH1 0x4 PUSH2 0xBEE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH0 MLOAD PUSH1 0x20 PUSH2 0xEA6 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x132 PUSH2 0x478 JUMP JUMPDEST PUSH2 0x1DE PUSH2 0x489 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xFE JUMP JUMPDEST PUSH2 0xF1 PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x11A PUSH2 0x20C CALLDATASIZE PUSH1 0x4 PUSH2 0xA88 JUMP JUMPDEST PUSH2 0x4F5 JUMP JUMPDEST PUSH2 0x157 PUSH2 0x21F CALLDATASIZE PUSH1 0x4 PUSH2 0xC0E JUMP JUMPDEST PUSH2 0x502 JUMP JUMPDEST PUSH2 0x132 PUSH2 0x232 CALLDATASIZE PUSH1 0x4 PUSH2 0xBEE JUMP JUMPDEST PUSH2 0x54B JUMP JUMPDEST PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE03 DUP1 SLOAD PUSH1 0x60 SWAP2 PUSH0 MLOAD PUSH1 0x20 PUSH2 0xEA6 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP2 PUSH2 0x275 SWAP1 PUSH2 0xC3F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2A1 SWAP1 PUSH2 0xC3F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2EC JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2C3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2EC JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2CF JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x304 DUP2 DUP6 DUP6 PUSH2 0x58D JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x318 PUSH2 0x59F JUMP JUMPDEST PUSH2 0x344 PUSH2 0x323 PUSH2 0x489 JUMP JUMPDEST PUSH1 0x12 JUMPDEST PUSH2 0x331 SWAP1 PUSH1 0xA PUSH2 0xD6E JUMP JUMPDEST PUSH2 0x33F SWAP1 PUSH4 0xBEBC200 PUSH2 0xD7C JUMP JUMPDEST PUSH2 0x5D1 JUMP JUMPDEST JUMP JUMPDEST PUSH0 CALLER PUSH2 0x353 DUP6 DUP3 DUP6 PUSH2 0x609 JUMP JUMPDEST PUSH2 0x35E DUP6 DUP6 DUP6 PUSH2 0x66D JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x372 PUSH2 0x6CA JUMP JUMPDEST DUP1 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF PUSH1 0x1 PUSH1 0x40 SHL DUP3 DIV AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH0 DUP2 ISZERO DUP1 ISZERO PUSH2 0x399 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x3B5 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x3C3 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x3E1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0x40B JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH2 0x414 CALLER PUSH2 0x6F2 JUMP JUMPDEST PUSH2 0x41E DUP8 DUP8 PUSH2 0x703 JUMP JUMPDEST PUSH2 0x429 CALLER PUSH1 0x12 PUSH2 0x326 JUMP JUMPDEST DUP4 ISZERO PUSH2 0x46F JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x480 PUSH2 0x59F JUMP JUMPDEST PUSH2 0x344 PUSH0 PUSH2 0x715 JUMP JUMPDEST PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE04 DUP1 SLOAD PUSH1 0x60 SWAP2 PUSH0 MLOAD PUSH1 0x20 PUSH2 0xEA6 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP2 PUSH2 0x275 SWAP1 PUSH2 0xC3F JUMP JUMPDEST PUSH0 CALLER PUSH2 0x304 DUP2 DUP6 DUP6 PUSH2 0x66D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE01 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x553 PUSH2 0x59F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x581 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x58A DUP2 PUSH2 0x715 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x59A DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x785 JUMP JUMPDEST POP POP POP JUMP JUMPDEST CALLER PUSH2 0x5A8 PUSH2 0x489 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x344 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x578 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5FA JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x578 JUMP JUMPDEST PUSH2 0x605 PUSH0 DUP4 DUP4 PUSH2 0x869 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH2 0x614 DUP5 DUP5 PUSH2 0x502 JUMP JUMPDEST SWAP1 POP PUSH0 NOT DUP2 LT ISZERO PUSH2 0x667 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x659 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x578 JUMP JUMPDEST PUSH2 0x667 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x785 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x696 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x578 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x6BF JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x578 JUMP JUMPDEST PUSH2 0x59A DUP4 DUP4 DUP4 PUSH2 0x869 JUMP JUMPDEST PUSH0 DUP1 PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 PUSH2 0x30A JUMP JUMPDEST PUSH2 0x6FA PUSH2 0x9A2 JUMP JUMPDEST PUSH2 0x58A DUP2 PUSH2 0x9C7 JUMP JUMPDEST PUSH2 0x70B PUSH2 0x9A2 JUMP JUMPDEST PUSH2 0x605 DUP3 DUP3 PUSH2 0x9CF JUMP JUMPDEST PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 DUP3 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP3 AND SWAP2 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 MLOAD PUSH1 0x20 PUSH2 0xEA6 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x7BC JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x578 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x7E5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x578 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP4 SWAP1 SSTORE DUP2 ISZERO PUSH2 0x862 JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP6 PUSH1 0x40 MLOAD PUSH2 0x859 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH0 MLOAD PUSH1 0x20 PUSH2 0xEA6 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x8A3 JUMPI DUP2 DUP2 PUSH1 0x2 ADD PUSH0 DUP3 DUP3 SLOAD PUSH2 0x898 SWAP2 SWAP1 PUSH2 0xD93 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x913 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0x8F5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x578 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP4 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x931 JUMPI PUSH1 0x2 DUP2 ADD DUP1 SLOAD DUP4 SWAP1 SUB SWAP1 SSTORE PUSH2 0x94F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP4 ADD SWAP1 SSTORE JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x994 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH2 0x9AA PUSH2 0xA1F JUMP JUMPDEST PUSH2 0x344 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AFCD79F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x553 PUSH2 0x9A2 JUMP JUMPDEST PUSH2 0x9D7 PUSH2 0x9A2 JUMP JUMPDEST PUSH0 MLOAD PUSH1 0x20 PUSH2 0xEA6 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE03 PUSH2 0xA10 DUP5 DUP3 PUSH2 0xDEA JUMP JUMPDEST POP PUSH1 0x4 DUP2 ADD PUSH2 0x667 DUP4 DUP3 PUSH2 0xDEA JUMP JUMPDEST PUSH0 PUSH2 0xA28 PUSH2 0x6CA JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE DUP1 PUSH1 0x20 DUP6 ADD PUSH1 0x40 DUP6 ADD MCOPY PUSH0 PUSH1 0x40 DUP3 DUP6 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP5 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA83 JUMPI PUSH0 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA99 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0xAA2 DUP4 PUSH2 0xA6D JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xAC2 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0xACB DUP5 PUSH2 0xA6D JUMP JUMPDEST SWAP3 POP PUSH2 0xAD9 PUSH1 0x20 DUP6 ADD PUSH2 0xA6D JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xB0D JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB27 JUMPI PUSH2 0xB27 PUSH2 0xAEA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xB56 JUMPI PUSH2 0xB56 PUSH2 0xAEA JUMP JUMPDEST PUSH1 0x40 MSTORE DUP2 DUP2 MSTORE DUP4 DUP3 ADD PUSH1 0x20 ADD DUP6 LT ISZERO PUSH2 0xB6D JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB9A JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xBB0 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0xBBC DUP6 DUP3 DUP7 ADD PUSH2 0xAFE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xBD8 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0xBE4 DUP6 DUP3 DUP7 ADD PUSH2 0xAFE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBFE JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0xC07 DUP3 PUSH2 0xA6D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xC1F JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0xC28 DUP4 PUSH2 0xA6D JUMP JUMPDEST SWAP2 POP PUSH2 0xC36 PUSH1 0x20 DUP5 ADD PUSH2 0xA6D JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xC53 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xC71 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 DUP2 JUMPDEST PUSH1 0x1 DUP5 GT ISZERO PUSH2 0xCC6 JUMPI DUP1 DUP6 DIV DUP2 GT ISZERO PUSH2 0xCAA JUMPI PUSH2 0xCAA PUSH2 0xC77 JUMP JUMPDEST PUSH1 0x1 DUP5 AND ISZERO PUSH2 0xCB8 JUMPI SWAP1 DUP2 MUL SWAP1 JUMPDEST PUSH1 0x1 SWAP4 SWAP1 SWAP4 SHR SWAP3 DUP1 MUL PUSH2 0xC8F JUMP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH2 0xCDC JUMPI POP PUSH1 0x1 PUSH2 0x30A JUMP JUMPDEST DUP2 PUSH2 0xCE8 JUMPI POP PUSH0 PUSH2 0x30A JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0xCFE JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0xD08 JUMPI PUSH2 0xD24 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x30A JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0xD19 JUMPI PUSH2 0xD19 PUSH2 0xC77 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x30A JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0xD47 JUMPI POP DUP2 DUP2 EXP PUSH2 0x30A JUMP JUMPDEST PUSH2 0xD53 PUSH0 NOT DUP5 DUP5 PUSH2 0xC8B JUMP JUMPDEST DUP1 PUSH0 NOT DIV DUP3 GT ISZERO PUSH2 0xD66 JUMPI PUSH2 0xD66 PUSH2 0xC77 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xC07 PUSH1 0xFF DUP5 AND DUP4 PUSH2 0xCCE JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x30A JUMPI PUSH2 0x30A PUSH2 0xC77 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x30A JUMPI PUSH2 0x30A PUSH2 0xC77 JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x59A JUMPI DUP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0xDCB JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x862 JUMPI PUSH0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xDD7 JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE04 JUMPI PUSH2 0xE04 PUSH2 0xAEA JUMP JUMPDEST PUSH2 0xE18 DUP2 PUSH2 0xE12 DUP5 SLOAD PUSH2 0xC3F JUMP JUMPDEST DUP5 PUSH2 0xDA6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 DUP2 EQ PUSH2 0xE4A JUMPI PUSH0 DUP4 ISZERO PUSH2 0xE33 JUMPI POP DUP5 DUP3 ADD MLOAD JUMPDEST PUSH0 NOT PUSH1 0x3 DUP6 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP5 SWAP1 SHL OR DUP5 SSTORE PUSH2 0x862 JUMP JUMPDEST PUSH0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP6 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xE79 JUMPI DUP8 DUP6 ADD MLOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0xE59 JUMP JUMPDEST POP DUP5 DUP3 LT ISZERO PUSH2 0xE96 JUMPI DUP7 DUP5 ADD MLOAD PUSH0 NOT PUSH1 0x3 DUP8 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP INVALID MSTORE 0xC6 ORIGIN SELFBALANCE RJUMPI 0xF47D 0xB1 SWAP14 TLOAD RJUMP 0x4600 ADDRESS 0xC4 SWAP8 CREATE PUSH8 0xCA4CEBF71BA98EEA 0xDA 0xBE KECCAK256 0xBA 0xCE STOP LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMPI PUSH29 0xD2639D5CD81A4A7C622DD699FAEA6593F5C8302DD404C7E292EF7058CD 0x1F PUSH5 0x736F6C6343 STOP ADDMOD 0x1E STOP CALLER ",
							"sourceMap": "263:412:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2697:144:2;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5191:186;;;;;;:::i;:::-;;:::i;:::-;;;1085:14:8;;1078:22;1060:41;;1048:2;1033:18;5191:186:2;920:187:8;573:100:7;;;:::i;:::-;;3877:152:2;4008:14;;3877:152;;;1258:25:8;;;1246:2;1231:18;3877:152:2;1112:177:8;5969:244:2;;;;;;:::i;:::-;;:::i;3735:82::-;;;3808:2;1815:36:8;;1803:2;1788:18;3735:82:2;1673:184:8;330:237:7;;;;;;:::i;:::-;;:::i;4087:171:2:-;;;;;;:::i;:::-;-1:-1:-1;;;;;4231:20:2;4152:7;4231:20;;;-1:-1:-1;;;;;;;;;;;4231:20:2;;;;;;;4087:171;3155:101:0;;;:::i;2441:144::-;;;:::i;:::-;;;-1:-1:-1;;;;;3623:32:8;;;3605:51;;3593:2;3578:18;2441:144:0;3459:203:8;2954:148:2;;;:::i;4453:178::-;;;;;;:::i;:::-;;:::i;4689:195::-;;;;;;:::i;:::-;;:::i;3405:215:0:-;;;;;;:::i;:::-;;:::i;2697:144:2:-;2827:7;2820:14;;2742:13;;-1:-1:-1;;;;;;;;;;;2064:20:2;2820:14;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2697:144;:::o;5191:186::-;5264:4;966:10:3;5318:31:2;966:10:3;5334:7:2;5343:5;5318:8;:31::i;:::-;5366:4;5359:11;;;5191:186;;;;;:::o;573:100:7:-;2334:13:0;:11;:13::i;:::-;616:50:7::1;628:7;:5;:7::i;:::-;3808:2:2::0;655:10:7::1;651:14;::::0;:2:::1;:14;:::i;:::-;637:28;::::0;:11:::1;:28;:::i;:::-;616:11;:50::i;:::-;573:100::o:0;5969:244:2:-;6056:4;966:10:3;6112:37:2;6128:4;966:10:3;6143:5:2;6112:15;:37::i;:::-;6159:26;6169:4;6175:2;6179:5;6159:9;:26::i;:::-;-1:-1:-1;6202:4:2;;5969:244;-1:-1:-1;;;;5969:244:2:o;330:237:7:-;4158:30:1;4191:26;:24;:26::i;:::-;4302:15;;4158:59;;-1:-1:-1;4302:15:1;-1:-1:-1;;;4302:15:1;;;4301:16;;4348:14;;4279:19;4724:16;;:34;;;;;4744:14;4724:34;4704:54;;4768:17;4788:11;:16;;4803:1;4788:16;:50;;;;-1:-1:-1;4816:4:1;4808:25;:30;4788:50;4768:70;;4854:12;4853:13;:30;;;;;4871:12;4870:13;4853:30;4849:91;;;4906:23;;-1:-1:-1;;;4906:23:1;;;;;;;;;;;4849:91;4949:18;;-1:-1:-1;;4949:18:1;4966:1;4949:18;;;4977:67;;;;5011:22;;-1:-1:-1;;;;5011:22:1;-1:-1:-1;;;5011:22:1;;;4977:67;441:26:7::1;456:10;441:14;:26::i;:::-;477;490:4;496:6;477:12;:26::i;:::-;513:47;519:10;3808:2:2::0;549:10:7::1;3735:82:2::0;513:47:7::1;5068:14:1::0;5064:101;;;5098:23;;-1:-1:-1;;;;5098:23:1;;;5140:14;;-1:-1:-1;6207:50:8;;5140:14:1;;6195:2:8;6180:18;5140:14:1;;;;;;;5064:101;4092:1079;;;;;330:237:7;;:::o;3155:101:0:-;2334:13;:11;:13::i;:::-;3219:30:::1;3246:1;3219:18;:30::i;2441:144::-:0;1313:22;2570:8;-1:-1:-1;;;;;2570:8:0;;2441:144::o;2954:148:2:-;3086:9;3079:16;;3001:13;;-1:-1:-1;;;;;;;;;;;2064:20:2;3079:16;;;:::i;4453:178::-;4522:4;966:10:3;4576:27:2;966:10:3;4593:2:2;4597:5;4576:9;:27::i;4689:195::-;-1:-1:-1;;;;;4848:20:2;;;4769:7;4848:20;;;:13;:20;;;;;;;;:29;;;;;;;;;;;;;4689:195::o;3405:215:0:-;2334:13;:11;:13::i;:::-;-1:-1:-1;;;;;3489:22:0;::::1;3485:91;;3534:31;::::0;-1:-1:-1;;;3534:31:0;;3562:1:::1;3534:31;::::0;::::1;3605:51:8::0;3578:18;;3534:31:0::1;;;;;;;;3485:91;3585:28;3604:8;3585:18;:28::i;:::-;3405:215:::0;:::o;9982:128:2:-;10066:37;10075:5;10082:7;10091:5;10098:4;10066:8;:37::i;:::-;9982:128;;;:::o;2658:162:0:-;966:10:3;2717:7:0;:5;:7::i;:::-;-1:-1:-1;;;;;2717:23:0;;2713:101;;2763:40;;-1:-1:-1;;;2763:40:0;;966:10:3;2763:40:0;;;3605:51:8;3578:18;;2763:40:0;3459:203:8;8714:208:2;-1:-1:-1;;;;;8784:21:2;;8780:91;;8828:32;;-1:-1:-1;;;8828:32:2;;8857:1;8828:32;;;3605:51:8;3578:18;;8828:32:2;3459:203:8;8780:91:2;8880:35;8896:1;8900:7;8909:5;8880:7;:35::i;:::-;8714:208;;:::o;11726:476::-;11825:24;11852:25;11862:5;11869:7;11852:9;:25::i;:::-;11825:52;;-1:-1:-1;;11891:16:2;:36;11887:309;;;11966:5;11947:16;:24;11943:130;;;11998:60;;-1:-1:-1;;;11998:60:2;;-1:-1:-1;;;;;6488:32:8;;11998:60:2;;;6470:51:8;6537:18;;;6530:34;;;6580:18;;;6573:34;;;6443:18;;11998:60:2;6268:345:8;11943:130:2;12114:57;12123:5;12130:7;12158:5;12139:16;:24;12165:5;12114:8;:57::i;:::-;11815:387;11726:476;;;:::o;6586:300::-;-1:-1:-1;;;;;6669:18:2;;6665:86;;6710:30;;-1:-1:-1;;;6710:30:2;;6737:1;6710:30;;;3605:51:8;3578:18;;6710:30:2;3459:203:8;6665:86:2;-1:-1:-1;;;;;6764:16:2;;6760:86;;6803:32;;-1:-1:-1;;;6803:32:2;;6832:1;6803:32;;;3605:51:8;3578:18;;6803:32:2;3459:203:8;6760:86:2;6855:24;6863:4;6869:2;6873:5;6855:7;:24::i;9071:205:1:-;9129:30;;3147:66;9186:27;8819:122;1847:127:0;6929:20:1;:18;:20::i;:::-;1929:38:0::1;1954:12;1929:24;:38::i;2263:147:2:-:0;6929:20:1;:18;:20::i;:::-;2365:38:2::1;2388:5;2395:7;2365:22;:38::i;3774:248:0:-:0;1313:22;3923:8;;-1:-1:-1;;;;;;3941:19:0;;-1:-1:-1;;;;;3941:19:0;;;;;;;;3975:40;;3923:8;;;;;3975:40;;3847:24;;3975:40;3837:185;;3774:248;:::o;10957:487:2:-;-1:-1:-1;;;;;;;;;;;;;;;;11122:19:2;;11118:89;;11164:32;;-1:-1:-1;;;11164:32:2;;11193:1;11164:32;;;3605:51:8;3578:18;;11164:32:2;3459:203:8;11118:89:2;-1:-1:-1;;;;;11220:21:2;;11216:90;;11264:31;;-1:-1:-1;;;11264:31:2;;11292:1;11264:31;;;3605:51:8;3578:18;;11264:31:2;3459:203:8;11216:90:2;-1:-1:-1;;;;;11315:20:2;;;;;;;:13;;;:20;;;;;;;;:29;;;;;;;;;:37;;;11362:76;;;;11412:7;-1:-1:-1;;;;;11396:31:2;11405:5;-1:-1:-1;;;;;11396:31:2;;11421:5;11396:31;;;;1258:25:8;;1246:2;1231:18;;1112:177;11396:31:2;;;;;;;;11362:76;11055:389;10957:487;;;;:::o;7201:1170::-;-1:-1:-1;;;;;;;;;;;;;;;;7343:18:2;;7339:546;;7497:5;7479:1;:14;;;:23;;;;;;;:::i;:::-;;;;-1:-1:-1;7339:546:2;;-1:-1:-1;7339:546:2;;-1:-1:-1;;;;;7555:17:2;;7533:19;7555:17;;;;;;;;;;;7590:19;;;7586:115;;;7636:50;;-1:-1:-1;;;7636:50:2;;-1:-1:-1;;;;;6488:32:8;;7636:50:2;;;6470:51:8;6537:18;;;6530:34;;;6580:18;;;6573:34;;;6443:18;;7636:50:2;6268:345:8;7586:115:2;-1:-1:-1;;;;;7821:17:2;;:11;:17;;;;;;;;;;7841:19;;;;7821:39;;7339:546;-1:-1:-1;;;;;7899:16:2;;7895:429;;8062:14;;;:23;;;;;;;7895:429;;;-1:-1:-1;;;;;8275:15:2;;:11;:15;;;;;;;;;;:24;;;;;;7895:429;8354:2;-1:-1:-1;;;;;8339:25:2;8348:4;-1:-1:-1;;;;;8339:25:2;;8358:5;8339:25;;;;1258::8;;1246:2;1231:18;;1112:177;8339:25:2;;;;;;;;7276:1095;7201:1170;;;:::o;7082:141:1:-;7149:17;:15;:17::i;:::-;7144:73;;7189:17;;-1:-1:-1;;;7189:17:1;;;;;;;;;;;1980:235:0;6929:20:1;:18;:20::i;2416:216:2:-;6929:20:1;:18;:20::i;:::-;-1:-1:-1;;;;;;;;;;;2581:7:2;:15:::1;2591:5:::0;2581:7;:15:::1;:::i;:::-;-1:-1:-1::0;2606:9:2::1;::::0;::::1;:19;2618:7:::0;2606:9;:19:::1;:::i;8485:120:1:-:0;8535:4;8558:26;:24;:26::i;:::-;:40;-1:-1:-1;;;8558:40:1;;;;;;-1:-1:-1;8485:120:1:o;14:418:8:-;163:2;152:9;145:21;126:4;195:6;189:13;238:6;233:2;222:9;218:18;211:34;297:6;292:2;284:6;280:15;275:2;264:9;260:18;254:50;353:1;348:2;339:6;328:9;324:22;320:31;313:42;423:2;416;412:7;407:2;399:6;395:15;391:29;380:9;376:45;372:54;364:62;;;14:418;;;;:::o;437:173::-;505:20;;-1:-1:-1;;;;;554:31:8;;544:42;;534:70;;600:1;597;590:12;534:70;437:173;;;:::o;615:300::-;683:6;691;744:2;732:9;723:7;719:23;715:32;712:52;;;760:1;757;750:12;712:52;783:29;802:9;783:29;:::i;:::-;773:39;881:2;866:18;;;;853:32;;-1:-1:-1;;;615:300:8:o;1294:374::-;1371:6;1379;1387;1440:2;1428:9;1419:7;1415:23;1411:32;1408:52;;;1456:1;1453;1446:12;1408:52;1479:29;1498:9;1479:29;:::i;:::-;1469:39;;1527:38;1561:2;1550:9;1546:18;1527:38;:::i;:::-;1294:374;;1517:48;;-1:-1:-1;;;1634:2:8;1619:18;;;;1606:32;;1294:374::o;1862:127::-;1923:10;1918:3;1914:20;1911:1;1904:31;1954:4;1951:1;1944:15;1978:4;1975:1;1968:15;1994:726;2037:5;2090:3;2083:4;2075:6;2071:17;2067:27;2057:55;;2108:1;2105;2098:12;2057:55;2148:6;2135:20;2178:18;2170:6;2167:30;2164:56;;;2200:18;;:::i;:::-;2249:2;2243:9;2341:2;2303:17;;-1:-1:-1;;2299:31:8;;;2332:2;2295:40;2291:54;2279:67;;2376:18;2361:34;;2397:22;;;2358:62;2355:88;;;2423:18;;:::i;:::-;2459:2;2452:22;2483;;;2524:19;;;2545:4;2520:30;2517:39;-1:-1:-1;2514:59:8;;;2569:1;2566;2559:12;2514:59;2633:6;2626:4;2618:6;2614:17;2607:4;2599:6;2595:17;2582:58;2688:1;2660:19;;;2681:4;2656:30;2649:41;;;;2664:6;1994:726;-1:-1:-1;;;1994:726:8:o;2725:538::-;2813:6;2821;2874:2;2862:9;2853:7;2849:23;2845:32;2842:52;;;2890:1;2887;2880:12;2842:52;2930:9;2917:23;2963:18;2955:6;2952:30;2949:50;;;2995:1;2992;2985:12;2949:50;3018;3060:7;3051:6;3040:9;3036:22;3018:50;:::i;:::-;3008:60;;;3121:2;3110:9;3106:18;3093:32;3150:18;3140:8;3137:32;3134:52;;;3182:1;3179;3172:12;3134:52;3205;3249:7;3238:8;3227:9;3223:24;3205:52;:::i;:::-;3195:62;;;2725:538;;;;;:::o;3268:186::-;3327:6;3380:2;3368:9;3359:7;3355:23;3351:32;3348:52;;;3396:1;3393;3386:12;3348:52;3419:29;3438:9;3419:29;:::i;:::-;3409:39;3268:186;-1:-1:-1;;;3268:186:8:o;3667:260::-;3735:6;3743;3796:2;3784:9;3775:7;3771:23;3767:32;3764:52;;;3812:1;3809;3802:12;3764:52;3835:29;3854:9;3835:29;:::i;:::-;3825:39;;3883:38;3917:2;3906:9;3902:18;3883:38;:::i;:::-;3873:48;;3667:260;;;;;:::o;3932:380::-;4011:1;4007:12;;;;4054;;;4075:61;;4129:4;4121:6;4117:17;4107:27;;4075:61;4182:2;4174:6;4171:14;4151:18;4148:38;4145:161;;4228:10;4223:3;4219:20;4216:1;4209:31;4263:4;4260:1;4253:15;4291:4;4288:1;4281:15;4145:161;;3932:380;;;:::o;4317:127::-;4378:10;4373:3;4369:20;4366:1;4359:31;4409:4;4406:1;4399:15;4433:4;4430:1;4423:15;4449:375;4537:1;4555:5;4569:249;4590:1;4580:8;4577:15;4569:249;;;4640:4;4635:3;4631:14;4625:4;4622:24;4619:50;;;4649:18;;:::i;:::-;4699:1;4689:8;4685:16;4682:49;;;4713:16;;;;4682:49;4796:1;4792:16;;;;;4752:15;;4569:249;;;4449:375;;;;;;:::o;4829:902::-;4878:5;4908:8;4898:80;;-1:-1:-1;4949:1:8;4963:5;;4898:80;4997:4;4987:76;;-1:-1:-1;5034:1:8;5048:5;;4987:76;5079:4;5097:1;5092:59;;;;5165:1;5160:174;;;;5072:262;;5092:59;5122:1;5113:10;;5136:5;;;5160:174;5197:3;5187:8;5184:17;5181:43;;;5204:18;;:::i;:::-;-1:-1:-1;;5260:1:8;5246:16;;5319:5;;5072:262;;5418:2;5408:8;5405:16;5399:3;5393:4;5390:13;5386:36;5380:2;5370:8;5367:16;5362:2;5356:4;5353:12;5349:35;5346:77;5343:203;;;-1:-1:-1;5455:19:8;;;5531:5;;5343:203;5578:42;-1:-1:-1;;5603:8:8;5597:4;5578:42;:::i;:::-;5656:6;5652:1;5648:6;5644:19;5635:7;5632:32;5629:58;;;5667:18;;:::i;:::-;5705:20;;4829:902;-1:-1:-1;;;4829:902:8:o;5736:140::-;5794:5;5823:47;5864:4;5854:8;5850:19;5844:4;5823:47;:::i;5881:168::-;5954:9;;;5985;;6002:15;;;5996:22;;5982:37;5972:71;;6023:18;;:::i;6618:125::-;6683:9;;;6704:10;;;6701:36;;;6717:18;;:::i;6874:518::-;6976:2;6971:3;6968:11;6965:421;;;7012:5;7009:1;7002:16;7056:4;7053:1;7043:18;7126:2;7114:10;7110:19;7107:1;7103:27;7097:4;7093:38;7162:4;7150:10;7147:20;7144:47;;;-1:-1:-1;7185:4:8;7144:47;7240:2;7235:3;7231:12;7228:1;7224:20;7218:4;7214:31;7204:41;;7295:81;7313:2;7306:5;7303:13;7295:81;;;7372:1;7358:16;;7339:1;7328:13;7295:81;;7568:1299;7694:3;7688:10;7721:18;7713:6;7710:30;7707:56;;;7743:18;;:::i;:::-;7772:97;7862:6;7822:38;7854:4;7848:11;7822:38;:::i;:::-;7816:4;7772:97;:::i;:::-;7918:4;7949:2;7938:14;;7966:1;7961:649;;;;8654:1;8671:6;8668:89;;;-1:-1:-1;8723:19:8;;;8717:26;8668:89;-1:-1:-1;;7525:1:8;7521:11;;;7517:24;7513:29;7503:40;7549:1;7545:11;;;7500:57;8770:81;;7931:930;;7961:649;6821:1;6814:14;;;6858:4;6845:18;;-1:-1:-1;;7997:20:8;;;8115:222;8129:7;8126:1;8123:14;8115:222;;;8211:19;;;8205:26;8190:42;;8318:4;8303:20;;;;8271:1;8259:14;;;;8145:12;8115:222;;;8119:3;8365:6;8356:7;8353:19;8350:201;;;8426:19;;;8420:26;-1:-1:-1;;8509:1:8;8505:14;;;8521:3;8501:24;8497:37;8493:42;8478:58;8463:74;;8350:201;-1:-1:-1;;;;8597:1:8;8581:14;;;8577:22;8564:36;;-1:-1:-1;7568:1299:8:o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "767000",
								"executionCost": "797",
								"totalCost": "767797"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "infinite",
								"decimals()": "243",
								"initialize(string,string)": "infinite",
								"mint()": "infinite",
								"name()": "infinite",
								"owner()": "2412",
								"renounceOwnership()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2303",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite",
								"transferOwnership(address)": "28465"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 263,
									"end": 675,
									"name": "PUSH",
									"source": 7,
									"value": "80"
								},
								{
									"begin": 263,
									"end": 675,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 263,
									"end": 675,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 263,
									"end": 675,
									"name": "CALLVALUE",
									"source": 7
								},
								{
									"begin": 263,
									"end": 675,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 263,
									"end": 675,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 263,
									"end": 675,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 263,
									"end": 675,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 263,
									"end": 675,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 263,
									"end": 675,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 263,
									"end": 675,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 263,
									"end": 675,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 263,
									"end": 675,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 263,
									"end": 675,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 263,
									"end": 675,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 263,
									"end": 675,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 263,
									"end": 675,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 263,
									"end": 675,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 263,
									"end": 675,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 263,
									"end": 675,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 263,
									"end": 675,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220577cd2639d5cd81a4a7c622dd699faea6593f5c8302dd404c7e292ef7058cd1f64736f6c634300081e0033",
									".code": [
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "tag",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "SHR",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "70A08231"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "17"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "95D89B41"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "18"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "95D89B41"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "13"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "A9059CBB"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "DD62ED3E"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "F2FDE38B"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "16"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "tag",
											"source": 7,
											"value": "18"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "70A08231"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "10"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "715018A6"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "8DA5CB5B"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "tag",
											"source": 7,
											"value": "17"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "18160DDD"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "19"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "18160DDD"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "23B872DD"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "313CE567"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "8"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "4CD88B76"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "9"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "tag",
											"source": 7,
											"value": "19"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "6FDDE03"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "95EA7B3"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "1249C58B"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "tag",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 263,
											"end": 675,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2697,
											"end": 2841,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2697,
											"end": 2841,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2697,
											"end": 2841,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2697,
											"end": 2841,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 2697,
											"end": 2841,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2697,
											"end": 2841,
											"name": "tag",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2697,
											"end": 2841,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2697,
											"end": 2841,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2697,
											"end": 2841,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2697,
											"end": 2841,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 2697,
											"end": 2841,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2697,
											"end": 2841,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2697,
											"end": 2841,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 2697,
											"end": 2841,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2697,
											"end": 2841,
											"name": "tag",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 2697,
											"end": 2841,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2697,
											"end": 2841,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2697,
											"end": 2841,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2697,
											"end": 2841,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2697,
											"end": 2841,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2697,
											"end": 2841,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2697,
											"end": 2841,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2697,
											"end": 2841,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 5191,
											"end": 5377,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5191,
											"end": 5377,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5191,
											"end": 5377,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 5191,
											"end": 5377,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 5191,
											"end": 5377,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 5191,
											"end": 5377,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5191,
											"end": 5377,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 5191,
											"end": 5377,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5191,
											"end": 5377,
											"name": "tag",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 5191,
											"end": 5377,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5191,
											"end": 5377,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 5191,
											"end": 5377,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5191,
											"end": 5377,
											"name": "tag",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 5191,
											"end": 5377,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5191,
											"end": 5377,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5191,
											"end": 5377,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1085,
											"end": 1099,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1085,
											"end": 1099,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1078,
											"end": 1100,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1060,
											"end": 1101,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1060,
											"end": 1101,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1048,
											"end": 1050,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1033,
											"end": 1051,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5191,
											"end": 5377,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 920,
											"end": 1107,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 573,
											"end": 673,
											"name": "tag",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 573,
											"end": 673,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 573,
											"end": 673,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 573,
											"end": 673,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "31"
										},
										{
											"begin": 573,
											"end": 673,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 573,
											"end": 673,
											"name": "tag",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 573,
											"end": 673,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 573,
											"end": 673,
											"name": "STOP",
											"source": 7
										},
										{
											"begin": 3877,
											"end": 4029,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 3877,
											"end": 4029,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4008,
											"end": 4022,
											"name": "PUSH",
											"source": 2,
											"value": "52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE02"
										},
										{
											"begin": 4008,
											"end": 4022,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3877,
											"end": 4029,
											"name": "tag",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 3877,
											"end": 4029,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3877,
											"end": 4029,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3877,
											"end": 4029,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1258,
											"end": 1283,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1258,
											"end": 1283,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1258,
											"end": 1283,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1246,
											"end": 1248,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1231,
											"end": 1249,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3877,
											"end": 4029,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 1112,
											"end": 1289,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5969,
											"end": 6213,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 5969,
											"end": 6213,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5969,
											"end": 6213,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 5969,
											"end": 6213,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 5969,
											"end": 6213,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 5969,
											"end": 6213,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5969,
											"end": 6213,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 5969,
											"end": 6213,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5969,
											"end": 6213,
											"name": "tag",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 5969,
											"end": 6213,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5969,
											"end": 6213,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 5969,
											"end": 6213,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3735,
											"end": 3817,
											"name": "tag",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 3735,
											"end": 3817,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3735,
											"end": 3817,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3735,
											"end": 3817,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3808,
											"end": 3810,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 1815,
											"end": 1851,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1815,
											"end": 1851,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1803,
											"end": 1805,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1788,
											"end": 1806,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3735,
											"end": 3817,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 1673,
											"end": 1857,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 330,
											"end": 567,
											"name": "tag",
											"source": 7,
											"value": "9"
										},
										{
											"begin": 330,
											"end": 567,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 330,
											"end": 567,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 330,
											"end": 567,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "46"
										},
										{
											"begin": 330,
											"end": 567,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 330,
											"end": 567,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 330,
											"end": 567,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "47"
										},
										{
											"begin": 330,
											"end": 567,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 330,
											"end": 567,
											"name": "tag",
											"source": 7,
											"value": "46"
										},
										{
											"begin": 330,
											"end": 567,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 330,
											"end": 567,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "48"
										},
										{
											"begin": 330,
											"end": 567,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4087,
											"end": 4258,
											"name": "tag",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 4087,
											"end": 4258,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4087,
											"end": 4258,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 4087,
											"end": 4258,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 4087,
											"end": 4258,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4087,
											"end": 4258,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4087,
											"end": 4258,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 4087,
											"end": 4258,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4087,
											"end": 4258,
											"name": "tag",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 4087,
											"end": 4258,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4231,
											"end": 4251,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4152,
											"end": 4159,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4231,
											"end": 4251,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4231,
											"end": 4251,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4231,
											"end": 4251,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "3874827173E8DF9F34323B12B251D1D3C53926CE129E30A0D69F1D47C277041B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 4231,
											"end": 4251,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4231,
											"end": 4251,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4231,
											"end": 4251,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4231,
											"end": 4251,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4231,
											"end": 4251,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4231,
											"end": 4251,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 4231,
											"end": 4251,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4087,
											"end": 4258,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 3155,
											"end": 3256,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 2441,
											"end": 2585,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "tag",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3623,
											"end": 3655,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3623,
											"end": 3655,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3623,
											"end": 3655,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3605,
											"end": 3656,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3605,
											"end": 3656,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3593,
											"end": 3595,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3578,
											"end": 3596,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 3459,
											"end": 3662,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2954,
											"end": 3102,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 2954,
											"end": 3102,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2954,
											"end": 3102,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2954,
											"end": 3102,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 2954,
											"end": 3102,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4453,
											"end": 4631,
											"name": "tag",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 4453,
											"end": 4631,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4453,
											"end": 4631,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 4453,
											"end": 4631,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 4453,
											"end": 4631,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4453,
											"end": 4631,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4453,
											"end": 4631,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 4453,
											"end": 4631,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4453,
											"end": 4631,
											"name": "tag",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 4453,
											"end": 4631,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4453,
											"end": 4631,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 4453,
											"end": 4631,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4689,
											"end": 4884,
											"name": "tag",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 4689,
											"end": 4884,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4689,
											"end": 4884,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 4689,
											"end": 4884,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 4689,
											"end": 4884,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4689,
											"end": 4884,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4689,
											"end": 4884,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 4689,
											"end": 4884,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4689,
											"end": 4884,
											"name": "tag",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 4689,
											"end": 4884,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4689,
											"end": 4884,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "70"
										},
										{
											"begin": 4689,
											"end": 4884,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 3405,
											"end": 3620,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "tag",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 3405,
											"end": 3620,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2697,
											"end": 2841,
											"name": "tag",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 2697,
											"end": 2841,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2827,
											"end": 2834,
											"name": "PUSH",
											"source": 2,
											"value": "52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE03"
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2742,
											"end": 2755,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2742,
											"end": 2755,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "3874827173E8DF9F34323B12B251D1D3C53926CE129E30A0D69F1D47C277041B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 2064,
											"end": 2084,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 2820,
											"end": 2834,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "tag",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 2820,
											"end": 2834,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "tag",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "82"
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "tag",
											"source": 2,
											"value": "82"
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "tag",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "tag",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2820,
											"end": 2834,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2697,
											"end": 2841,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2697,
											"end": 2841,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5191,
											"end": 5377,
											"name": "tag",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 5191,
											"end": 5377,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5264,
											"end": 5268,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 966,
											"end": 976,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 5318,
											"end": 5349,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 966,
											"end": 976,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5334,
											"end": 5341,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5343,
											"end": 5348,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5318,
											"end": 5326,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 5318,
											"end": 5349,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5318,
											"end": 5349,
											"name": "tag",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 5318,
											"end": 5349,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5366,
											"end": 5370,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5359,
											"end": 5370,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5359,
											"end": 5370,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5359,
											"end": 5370,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5191,
											"end": 5377,
											"name": "tag",
											"source": 2,
											"value": "84"
										},
										{
											"begin": 5191,
											"end": 5377,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5191,
											"end": 5377,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5191,
											"end": 5377,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5191,
											"end": 5377,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5191,
											"end": 5377,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5191,
											"end": 5377,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 573,
											"end": 673,
											"name": "tag",
											"source": 7,
											"value": "31"
										},
										{
											"begin": 573,
											"end": 673,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 2334,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 2334,
											"end": 2347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "tag",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 616,
											"end": 666,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "93"
										},
										{
											"begin": 628,
											"end": 635,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "94"
										},
										{
											"begin": 628,
											"end": 633,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "57"
										},
										{
											"begin": 628,
											"end": 635,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 628,
											"end": 635,
											"modifierDepth": 1,
											"name": "tag",
											"source": 7,
											"value": "94"
										},
										{
											"begin": 628,
											"end": 635,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3808,
											"end": 3810,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 655,
											"end": 665,
											"modifierDepth": 1,
											"name": "tag",
											"source": 7,
											"value": "95"
										},
										{
											"begin": 655,
											"end": 665,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 651,
											"end": 665,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "96"
										},
										{
											"begin": 651,
											"end": 665,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 651,
											"end": 653,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 7,
											"value": "A"
										},
										{
											"begin": 651,
											"end": 665,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "97"
										},
										{
											"begin": 651,
											"end": 665,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 651,
											"end": 665,
											"modifierDepth": 1,
											"name": "tag",
											"source": 7,
											"value": "96"
										},
										{
											"begin": 651,
											"end": 665,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 637,
											"end": 665,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "98"
										},
										{
											"begin": 637,
											"end": 665,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 637,
											"end": 648,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 7,
											"value": "BEBC200"
										},
										{
											"begin": 637,
											"end": 665,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "99"
										},
										{
											"begin": 637,
											"end": 665,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 637,
											"end": 665,
											"modifierDepth": 1,
											"name": "tag",
											"source": 7,
											"value": "98"
										},
										{
											"begin": 637,
											"end": 665,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 616,
											"end": 627,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 616,
											"end": 666,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 616,
											"end": 666,
											"modifierDepth": 1,
											"name": "tag",
											"source": 7,
											"value": "93"
										},
										{
											"begin": 616,
											"end": 666,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 573,
											"end": 673,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5969,
											"end": 6213,
											"name": "tag",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 5969,
											"end": 6213,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6056,
											"end": 6060,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 966,
											"end": 976,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 6112,
											"end": 6149,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "105"
										},
										{
											"begin": 6128,
											"end": 6132,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 966,
											"end": 976,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6143,
											"end": 6148,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6112,
											"end": 6127,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 6112,
											"end": 6149,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6112,
											"end": 6149,
											"name": "tag",
											"source": 2,
											"value": "105"
										},
										{
											"begin": 6112,
											"end": 6149,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6159,
											"end": 6185,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "107"
										},
										{
											"begin": 6169,
											"end": 6173,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6175,
											"end": 6177,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6179,
											"end": 6184,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6159,
											"end": 6168,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 6159,
											"end": 6185,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6159,
											"end": 6185,
											"name": "tag",
											"source": 2,
											"value": "107"
										},
										{
											"begin": 6159,
											"end": 6185,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6202,
											"end": 6206,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 6202,
											"end": 6206,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 5969,
											"end": 6213,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5969,
											"end": 6213,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 330,
											"end": 567,
											"name": "tag",
											"source": 7,
											"value": "48"
										},
										{
											"begin": 330,
											"end": 567,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4158,
											"end": 4188,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4191,
											"end": 4217,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "111"
										},
										{
											"begin": 4191,
											"end": 4215,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "112"
										},
										{
											"begin": 4191,
											"end": 4217,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4191,
											"end": 4217,
											"name": "tag",
											"source": 1,
											"value": "111"
										},
										{
											"begin": 4191,
											"end": 4217,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 4158,
											"end": 4217,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4158,
											"end": 4217,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4301,
											"end": 4317,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4301,
											"end": 4317,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4279,
											"end": 4298,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4724,
											"end": 4740,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4724,
											"end": 4740,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "113"
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4744,
											"end": 4758,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "tag",
											"source": 1,
											"value": "113"
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4704,
											"end": 4758,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4704,
											"end": 4758,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4768,
											"end": 4785,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4788,
											"end": 4799,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4788,
											"end": 4804,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4788,
											"end": 4804,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4803,
											"end": 4804,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 4788,
											"end": 4804,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 4788,
											"end": 4838,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4788,
											"end": 4838,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4788,
											"end": 4838,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "114"
										},
										{
											"begin": 4788,
											"end": 4838,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4816,
											"end": 4820,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 4808,
											"end": 4833,
											"name": "EXTCODESIZE",
											"source": 1
										},
										{
											"begin": 4808,
											"end": 4838,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4788,
											"end": 4838,
											"name": "tag",
											"source": 1,
											"value": "114"
										},
										{
											"begin": 4788,
											"end": 4838,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4768,
											"end": 4838,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4768,
											"end": 4838,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4854,
											"end": 4866,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4853,
											"end": 4866,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4853,
											"end": 4883,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4853,
											"end": 4883,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4853,
											"end": 4883,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "115"
										},
										{
											"begin": 4853,
											"end": 4883,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4853,
											"end": 4883,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4871,
											"end": 4883,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4870,
											"end": 4883,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4853,
											"end": 4883,
											"name": "tag",
											"source": 1,
											"value": "115"
										},
										{
											"begin": 4853,
											"end": 4883,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4849,
											"end": 4940,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4849,
											"end": 4940,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "116"
										},
										{
											"begin": 4849,
											"end": 4940,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F92EE8A9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 4849,
											"end": 4940,
											"name": "tag",
											"source": 1,
											"value": "116"
										},
										{
											"begin": 4849,
											"end": 4940,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4949,
											"end": 4967,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 4949,
											"end": 4967,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4949,
											"end": 4967,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4966,
											"end": 4967,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 4949,
											"end": 4967,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 4949,
											"end": 4967,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4949,
											"end": 4967,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 4977,
											"end": 5044,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4977,
											"end": 5044,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4977,
											"end": 5044,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "117"
										},
										{
											"begin": 4977,
											"end": 5044,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5011,
											"end": 5033,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 5011,
											"end": 5033,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5011,
											"end": 5033,
											"name": "AND",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5011,
											"end": 5033,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 5011,
											"end": 5033,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5011,
											"end": 5033,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 4977,
											"end": 5044,
											"name": "tag",
											"source": 1,
											"value": "117"
										},
										{
											"begin": 4977,
											"end": 5044,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 441,
											"end": 467,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "119"
										},
										{
											"begin": 456,
											"end": 466,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 441,
											"end": 455,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "120"
										},
										{
											"begin": 441,
											"end": 467,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 441,
											"end": 467,
											"modifierDepth": 1,
											"name": "tag",
											"source": 7,
											"value": "119"
										},
										{
											"begin": 441,
											"end": 467,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 477,
											"end": 503,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "121"
										},
										{
											"begin": 490,
											"end": 494,
											"modifierDepth": 1,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 496,
											"end": 502,
											"modifierDepth": 1,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 477,
											"end": 489,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "122"
										},
										{
											"begin": 477,
											"end": 503,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 477,
											"end": 503,
											"modifierDepth": 1,
											"name": "tag",
											"source": 7,
											"value": "121"
										},
										{
											"begin": 477,
											"end": 503,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 513,
											"end": 560,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "123"
										},
										{
											"begin": 519,
											"end": 529,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 3808,
											"end": 3810,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 549,
											"end": 559,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "95"
										},
										{
											"begin": 3735,
											"end": 3817,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 513,
											"end": 560,
											"modifierDepth": 1,
											"name": "tag",
											"source": 7,
											"value": "123"
										},
										{
											"begin": 513,
											"end": 560,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5068,
											"end": 5082,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5064,
											"end": 5165,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5064,
											"end": 5165,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "127"
										},
										{
											"begin": 5064,
											"end": 5165,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5098,
											"end": 5121,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 5098,
											"end": 5121,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5098,
											"end": 5121,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5098,
											"end": 5121,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5098,
											"end": 5121,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 6207,
											"end": 6257,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6207,
											"end": 6257,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "PUSH",
											"source": 1,
											"value": "C7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2"
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6195,
											"end": 6197,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6180,
											"end": 6198,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "LOG1",
											"source": 1
										},
										{
											"begin": 5064,
											"end": 5165,
											"name": "tag",
											"source": 1,
											"value": "127"
										},
										{
											"begin": 5064,
											"end": 5165,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4092,
											"end": 5171,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4092,
											"end": 5171,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4092,
											"end": 5171,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4092,
											"end": 5171,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4092,
											"end": 5171,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 330,
											"end": 567,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 330,
											"end": 567,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 330,
											"end": 567,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "tag",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 3155,
											"end": 3256,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 2334,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 2334,
											"end": 2347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "tag",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3219,
											"end": 3249,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 3246,
											"end": 3247,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3219,
											"end": 3237,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "136"
										},
										{
											"begin": 3219,
											"end": 3249,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "tag",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 2441,
											"end": 2585,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1313,
											"end": 1335,
											"name": "PUSH",
											"source": 0,
											"value": "9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300"
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2570,
											"end": 2578,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2441,
											"end": 2585,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2954,
											"end": 3102,
											"name": "tag",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 2954,
											"end": 3102,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3086,
											"end": 3095,
											"name": "PUSH",
											"source": 2,
											"value": "52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE04"
										},
										{
											"begin": 3079,
											"end": 3095,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3079,
											"end": 3095,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3001,
											"end": 3014,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 3001,
											"end": 3014,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "3874827173E8DF9F34323B12B251D1D3C53926CE129E30A0D69F1D47C277041B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 2064,
											"end": 2084,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3079,
											"end": 3095,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 3079,
											"end": 3095,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3079,
											"end": 3095,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 3079,
											"end": 3095,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4453,
											"end": 4631,
											"name": "tag",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 4453,
											"end": 4631,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4522,
											"end": 4526,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 966,
											"end": 976,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 4576,
											"end": 4603,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 966,
											"end": 976,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4593,
											"end": 4595,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4597,
											"end": 4602,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4576,
											"end": 4585,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 4576,
											"end": 4603,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4689,
											"end": 4884,
											"name": "tag",
											"source": 2,
											"value": "70"
										},
										{
											"begin": 4689,
											"end": 4884,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4848,
											"end": 4868,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4848,
											"end": 4868,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4848,
											"end": 4868,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4769,
											"end": 4776,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4848,
											"end": 4868,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4848,
											"end": 4868,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4848,
											"end": 4868,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4848,
											"end": 4861,
											"name": "PUSH",
											"source": 2,
											"value": "52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE01"
										},
										{
											"begin": 4848,
											"end": 4868,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4848,
											"end": 4868,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4848,
											"end": 4868,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4848,
											"end": 4868,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4848,
											"end": 4868,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4848,
											"end": 4868,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4848,
											"end": 4868,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4848,
											"end": 4868,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4848,
											"end": 4877,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 4848,
											"end": 4877,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4848,
											"end": 4877,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 4848,
											"end": 4877,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4848,
											"end": 4877,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4848,
											"end": 4877,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4848,
											"end": 4877,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4848,
											"end": 4877,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4848,
											"end": 4877,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4848,
											"end": 4877,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4848,
											"end": 4877,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4848,
											"end": 4877,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 4848,
											"end": 4877,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4689,
											"end": 4884,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "tag",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "153"
										},
										{
											"begin": 2334,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 2334,
											"end": 2347,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "tag",
											"source": 0,
											"value": "153"
										},
										{
											"begin": 2334,
											"end": 2347,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3489,
											"end": 3511,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3489,
											"end": 3511,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3485,
											"end": 3576,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "155"
										},
										{
											"begin": 3485,
											"end": 3576,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3534,
											"end": 3565,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1E4FBDF7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3534,
											"end": 3565,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3562,
											"end": 3563,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3534,
											"end": 3565,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3605,
											"end": 3656,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3578,
											"end": 3596,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 3578,
											"end": 3596,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3534,
											"end": 3565,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 3485,
											"end": 3576,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "155"
										},
										{
											"begin": 3485,
											"end": 3576,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3585,
											"end": 3613,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "157"
										},
										{
											"begin": 3604,
											"end": 3612,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3585,
											"end": 3603,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "136"
										},
										{
											"begin": 3585,
											"end": 3613,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3585,
											"end": 3613,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "157"
										},
										{
											"begin": 3585,
											"end": 3613,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3405,
											"end": 3620,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 9982,
											"end": 10110,
											"name": "tag",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 9982,
											"end": 10110,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10066,
											"end": 10103,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "161"
										},
										{
											"begin": 10075,
											"end": 10080,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10082,
											"end": 10089,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10091,
											"end": 10096,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10098,
											"end": 10102,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 10066,
											"end": 10074,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "162"
										},
										{
											"begin": 10066,
											"end": 10103,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10066,
											"end": 10103,
											"name": "tag",
											"source": 2,
											"value": "161"
										},
										{
											"begin": 10066,
											"end": 10103,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9982,
											"end": 10110,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9982,
											"end": 10110,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9982,
											"end": 10110,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9982,
											"end": 10110,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2658,
											"end": 2820,
											"name": "tag",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 2658,
											"end": 2820,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 966,
											"end": 976,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 2717,
											"end": 2724,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 2717,
											"end": 2722,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 2717,
											"end": 2724,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2717,
											"end": 2724,
											"name": "tag",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 2717,
											"end": 2724,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2717,
											"end": 2740,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2717,
											"end": 2740,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2713,
											"end": 2814,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 2713,
											"end": 2814,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "118CDAA7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 966,
											"end": 976,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3605,
											"end": 3656,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3578,
											"end": 3596,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 3578,
											"end": 3596,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 3459,
											"end": 3662,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8714,
											"end": 8922,
											"name": "tag",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 8714,
											"end": 8922,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8784,
											"end": 8805,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8784,
											"end": 8805,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8780,
											"end": 8871,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "170"
										},
										{
											"begin": 8780,
											"end": 8871,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8828,
											"end": 8860,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8828,
											"end": 8860,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "EC442F05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8828,
											"end": 8860,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8828,
											"end": 8860,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8857,
											"end": 8858,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8828,
											"end": 8860,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 8828,
											"end": 8860,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8828,
											"end": 8860,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3605,
											"end": 3656,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3578,
											"end": 3596,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 3578,
											"end": 3596,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8828,
											"end": 8860,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 3459,
											"end": 3662,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8780,
											"end": 8871,
											"name": "tag",
											"source": 2,
											"value": "170"
										},
										{
											"begin": 8780,
											"end": 8871,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8880,
											"end": 8915,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "172"
										},
										{
											"begin": 8896,
											"end": 8897,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8900,
											"end": 8907,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8909,
											"end": 8914,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8880,
											"end": 8887,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "173"
										},
										{
											"begin": 8880,
											"end": 8915,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 8880,
											"end": 8915,
											"name": "tag",
											"source": 2,
											"value": "172"
										},
										{
											"begin": 8880,
											"end": 8915,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8714,
											"end": 8922,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8714,
											"end": 8922,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8714,
											"end": 8922,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11726,
											"end": 12202,
											"name": "tag",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 11726,
											"end": 12202,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11825,
											"end": 11849,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11852,
											"end": 11877,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "175"
										},
										{
											"begin": 11862,
											"end": 11867,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11869,
											"end": 11876,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11852,
											"end": 11861,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "70"
										},
										{
											"begin": 11852,
											"end": 11877,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11852,
											"end": 11877,
											"name": "tag",
											"source": 2,
											"value": "175"
										},
										{
											"begin": 11852,
											"end": 11877,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11825,
											"end": 11877,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11825,
											"end": 11877,
											"name": "POP",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11891,
											"end": 11907,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11891,
											"end": 11927,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 11887,
											"end": 12196,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11887,
											"end": 12196,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 11887,
											"end": 12196,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11966,
											"end": 11971,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11947,
											"end": 11963,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11947,
											"end": 11971,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 11943,
											"end": 12073,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11943,
											"end": 12073,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "177"
										},
										{
											"begin": 11943,
											"end": 12073,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11998,
											"end": 12058,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11998,
											"end": 12058,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7DC7A0D9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11998,
											"end": 12058,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11998,
											"end": 12058,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6488,
											"end": 6520,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 6488,
											"end": 6520,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 11998,
											"end": 12058,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11998,
											"end": 12058,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11998,
											"end": 12058,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6470,
											"end": 6521,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6537,
											"end": 6555,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 6537,
											"end": 6555,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6537,
											"end": 6555,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6530,
											"end": 6564,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6530,
											"end": 6564,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6530,
											"end": 6564,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6580,
											"end": 6598,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 6580,
											"end": 6598,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6580,
											"end": 6598,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6573,
											"end": 6607,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6573,
											"end": 6607,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6573,
											"end": 6607,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6443,
											"end": 6461,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 6443,
											"end": 6461,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11998,
											"end": 12058,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 6268,
											"end": 6613,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 11943,
											"end": 12073,
											"name": "tag",
											"source": 2,
											"value": "177"
										},
										{
											"begin": 11943,
											"end": 12073,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12114,
											"end": 12171,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 12123,
											"end": 12128,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12130,
											"end": 12137,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12158,
											"end": 12163,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12139,
											"end": 12155,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12139,
											"end": 12163,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 12165,
											"end": 12170,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12114,
											"end": 12122,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "162"
										},
										{
											"begin": 12114,
											"end": 12171,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12114,
											"end": 12171,
											"name": "tag",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 12114,
											"end": 12171,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11815,
											"end": 12202,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11726,
											"end": 12202,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11726,
											"end": 12202,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11726,
											"end": 12202,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11726,
											"end": 12202,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6586,
											"end": 6886,
											"name": "tag",
											"source": 2,
											"value": "108"
										},
										{
											"begin": 6586,
											"end": 6886,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6669,
											"end": 6687,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6669,
											"end": 6687,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6665,
											"end": 6751,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "182"
										},
										{
											"begin": 6665,
											"end": 6751,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6710,
											"end": 6740,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6710,
											"end": 6740,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4B637E8F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6710,
											"end": 6740,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6710,
											"end": 6740,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6737,
											"end": 6738,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6710,
											"end": 6740,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6710,
											"end": 6740,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6710,
											"end": 6740,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3605,
											"end": 3656,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3578,
											"end": 3596,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 3578,
											"end": 3596,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6710,
											"end": 6740,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 3459,
											"end": 3662,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6665,
											"end": 6751,
											"name": "tag",
											"source": 2,
											"value": "182"
										},
										{
											"begin": 6665,
											"end": 6751,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6764,
											"end": 6780,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6764,
											"end": 6780,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6760,
											"end": 6846,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "184"
										},
										{
											"begin": 6760,
											"end": 6846,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6803,
											"end": 6835,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6803,
											"end": 6835,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "EC442F05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6803,
											"end": 6835,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6803,
											"end": 6835,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6832,
											"end": 6833,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6803,
											"end": 6835,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6803,
											"end": 6835,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6803,
											"end": 6835,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3605,
											"end": 3656,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3578,
											"end": 3596,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 3578,
											"end": 3596,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6803,
											"end": 6835,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 3459,
											"end": 3662,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6760,
											"end": 6846,
											"name": "tag",
											"source": 2,
											"value": "184"
										},
										{
											"begin": 6760,
											"end": 6846,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6855,
											"end": 6879,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "161"
										},
										{
											"begin": 6863,
											"end": 6867,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6869,
											"end": 6871,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6873,
											"end": 6878,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6855,
											"end": 6862,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "173"
										},
										{
											"begin": 6855,
											"end": 6879,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9071,
											"end": 9276,
											"name": "tag",
											"source": 1,
											"value": "112"
										},
										{
											"begin": 9071,
											"end": 9276,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9129,
											"end": 9159,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 9129,
											"end": 9159,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3147,
											"end": 3213,
											"name": "PUSH",
											"source": 1,
											"value": "F0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00"
										},
										{
											"begin": 9186,
											"end": 9213,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "84"
										},
										{
											"begin": 8819,
											"end": 8941,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 1847,
											"end": 1974,
											"name": "tag",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 1847,
											"end": 1974,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6929,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "191"
										},
										{
											"begin": 6929,
											"end": 6947,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "192"
										},
										{
											"begin": 6929,
											"end": 6949,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6929,
											"end": 6949,
											"name": "tag",
											"source": 1,
											"value": "191"
										},
										{
											"begin": 6929,
											"end": 6949,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1929,
											"end": 1967,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "157"
										},
										{
											"begin": 1954,
											"end": 1966,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1929,
											"end": 1953,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "195"
										},
										{
											"begin": 1929,
											"end": 1967,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2263,
											"end": 2410,
											"name": "tag",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 2263,
											"end": 2410,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6929,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "197"
										},
										{
											"begin": 6929,
											"end": 6947,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "192"
										},
										{
											"begin": 6929,
											"end": 6949,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6929,
											"end": 6949,
											"name": "tag",
											"source": 1,
											"value": "197"
										},
										{
											"begin": 6929,
											"end": 6949,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2365,
											"end": 2403,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "172"
										},
										{
											"begin": 2388,
											"end": 2393,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2395,
											"end": 2402,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2365,
											"end": 2387,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "200"
										},
										{
											"begin": 2365,
											"end": 2403,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3774,
											"end": 4022,
											"name": "tag",
											"source": 0,
											"value": "136"
										},
										{
											"begin": 3774,
											"end": 4022,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1313,
											"end": 1335,
											"name": "PUSH",
											"source": 0,
											"value": "9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300"
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3941,
											"end": 3960,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3923,
											"end": 3931,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3847,
											"end": 3871,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3847,
											"end": 3871,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 3837,
											"end": 4022,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3837,
											"end": 4022,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3774,
											"end": 4022,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3774,
											"end": 4022,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 10957,
											"end": 11444,
											"name": "tag",
											"source": 2,
											"value": "162"
										},
										{
											"begin": 10957,
											"end": 11444,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "3874827173E8DF9F34323B12B251D1D3C53926CE129E30A0D69F1D47C277041B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11122,
											"end": 11141,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 11122,
											"end": 11141,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11118,
											"end": 11207,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "206"
										},
										{
											"begin": 11118,
											"end": 11207,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11164,
											"end": 11196,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11164,
											"end": 11196,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E602DF05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11164,
											"end": 11196,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11164,
											"end": 11196,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11193,
											"end": 11194,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11164,
											"end": 11196,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11164,
											"end": 11196,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11164,
											"end": 11196,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3605,
											"end": 3656,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3578,
											"end": 3596,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 3578,
											"end": 3596,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11164,
											"end": 11196,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 3459,
											"end": 3662,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 11118,
											"end": 11207,
											"name": "tag",
											"source": 2,
											"value": "206"
										},
										{
											"begin": 11118,
											"end": 11207,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11220,
											"end": 11241,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11220,
											"end": 11241,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11216,
											"end": 11306,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "208"
										},
										{
											"begin": 11216,
											"end": 11306,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11264,
											"end": 11295,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11264,
											"end": 11295,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4A1406B1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11264,
											"end": 11295,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11264,
											"end": 11295,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11292,
											"end": 11293,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11264,
											"end": 11295,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11264,
											"end": 11295,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11264,
											"end": 11295,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3605,
											"end": 3656,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3578,
											"end": 3596,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 3578,
											"end": 3596,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11264,
											"end": 11295,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 3459,
											"end": 3662,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 11216,
											"end": 11306,
											"name": "tag",
											"source": 2,
											"value": "208"
										},
										{
											"begin": 11216,
											"end": 11306,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11315,
											"end": 11335,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11315,
											"end": 11335,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 11315,
											"end": 11335,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11315,
											"end": 11335,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11315,
											"end": 11335,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11315,
											"end": 11335,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11315,
											"end": 11335,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11315,
											"end": 11328,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 11315,
											"end": 11328,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11315,
											"end": 11328,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11315,
											"end": 11335,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11315,
											"end": 11335,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11315,
											"end": 11335,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11315,
											"end": 11335,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11315,
											"end": 11335,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11315,
											"end": 11335,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11315,
											"end": 11335,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11315,
											"end": 11335,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 11315,
											"end": 11344,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 11315,
											"end": 11344,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 11315,
											"end": 11344,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11315,
											"end": 11344,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11315,
											"end": 11344,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11315,
											"end": 11344,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 11315,
											"end": 11344,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11315,
											"end": 11344,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11315,
											"end": 11344,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 11315,
											"end": 11352,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11315,
											"end": 11352,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11315,
											"end": 11352,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 11362,
											"end": 11438,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11362,
											"end": 11438,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11362,
											"end": 11438,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "210"
										},
										{
											"begin": 11362,
											"end": 11438,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11412,
											"end": 11419,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11396,
											"end": 11427,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11405,
											"end": 11410,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11396,
											"end": 11427,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11396,
											"end": 11427,
											"name": "PUSH",
											"source": 2,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 11421,
											"end": 11426,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 11396,
											"end": 11427,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11396,
											"end": 11427,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 11396,
											"end": 11427,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "211"
										},
										{
											"begin": 11396,
											"end": 11427,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1258,
											"end": 1283,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1258,
											"end": 1283,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1246,
											"end": 1248,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1231,
											"end": 1249,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1231,
											"end": 1249,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1112,
											"end": 1289,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 11396,
											"end": 11427,
											"name": "tag",
											"source": 2,
											"value": "211"
										},
										{
											"begin": 11396,
											"end": 11427,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11396,
											"end": 11427,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11396,
											"end": 11427,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 11396,
											"end": 11427,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11396,
											"end": 11427,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11396,
											"end": 11427,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11396,
											"end": 11427,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11396,
											"end": 11427,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 11362,
											"end": 11438,
											"name": "tag",
											"source": 2,
											"value": "210"
										},
										{
											"begin": 11362,
											"end": 11438,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11055,
											"end": 11444,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10957,
											"end": 11444,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10957,
											"end": 11444,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10957,
											"end": 11444,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10957,
											"end": 11444,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10957,
											"end": 11444,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7201,
											"end": 8371,
											"name": "tag",
											"source": 2,
											"value": "173"
										},
										{
											"begin": 7201,
											"end": 8371,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "3874827173E8DF9F34323B12B251D1D3C53926CE129E30A0D69F1D47C277041B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7343,
											"end": 7361,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7343,
											"end": 7361,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7339,
											"end": 7885,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "214"
										},
										{
											"begin": 7339,
											"end": 7885,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7497,
											"end": 7502,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7479,
											"end": 7480,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7479,
											"end": 7493,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 7479,
											"end": 7493,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7479,
											"end": 7493,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7479,
											"end": 7502,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7479,
											"end": 7502,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7479,
											"end": 7502,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7479,
											"end": 7502,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "215"
										},
										{
											"begin": 7479,
											"end": 7502,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7479,
											"end": 7502,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7479,
											"end": 7502,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "216"
										},
										{
											"begin": 7479,
											"end": 7502,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7479,
											"end": 7502,
											"name": "tag",
											"source": 2,
											"value": "215"
										},
										{
											"begin": 7479,
											"end": 7502,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7479,
											"end": 7502,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7479,
											"end": 7502,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7479,
											"end": 7502,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7339,
											"end": 7885,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "217"
										},
										{
											"begin": 7339,
											"end": 7885,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7339,
											"end": 7885,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7339,
											"end": 7885,
											"name": "tag",
											"source": 2,
											"value": "214"
										},
										{
											"begin": 7339,
											"end": 7885,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7555,
											"end": 7572,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7555,
											"end": 7572,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7533,
											"end": 7552,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7555,
											"end": 7572,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7555,
											"end": 7572,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7555,
											"end": 7572,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7555,
											"end": 7572,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7555,
											"end": 7572,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7555,
											"end": 7572,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7555,
											"end": 7572,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7555,
											"end": 7572,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7555,
											"end": 7572,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7555,
											"end": 7572,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7555,
											"end": 7572,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7590,
											"end": 7609,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7590,
											"end": 7609,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7590,
											"end": 7609,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 7586,
											"end": 7701,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7586,
											"end": 7701,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "218"
										},
										{
											"begin": 7586,
											"end": 7701,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7636,
											"end": 7686,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7636,
											"end": 7686,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "391434E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7636,
											"end": 7686,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7636,
											"end": 7686,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6488,
											"end": 6520,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 6488,
											"end": 6520,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 7636,
											"end": 7686,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7636,
											"end": 7686,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7636,
											"end": 7686,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6470,
											"end": 6521,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6537,
											"end": 6555,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 6537,
											"end": 6555,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6537,
											"end": 6555,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6530,
											"end": 6564,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6530,
											"end": 6564,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6530,
											"end": 6564,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6580,
											"end": 6598,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 6580,
											"end": 6598,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6580,
											"end": 6598,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6573,
											"end": 6607,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 6573,
											"end": 6607,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6573,
											"end": 6607,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6443,
											"end": 6461,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 6443,
											"end": 6461,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7636,
											"end": 7686,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 6268,
											"end": 6613,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7586,
											"end": 7701,
											"name": "tag",
											"source": 2,
											"value": "218"
										},
										{
											"begin": 7586,
											"end": 7701,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7821,
											"end": 7838,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 7821,
											"end": 7838,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7821,
											"end": 7832,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7821,
											"end": 7838,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7821,
											"end": 7838,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7821,
											"end": 7838,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7821,
											"end": 7838,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7821,
											"end": 7838,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7821,
											"end": 7838,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7821,
											"end": 7838,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7821,
											"end": 7838,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7821,
											"end": 7838,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7821,
											"end": 7838,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7841,
											"end": 7860,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7841,
											"end": 7860,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7841,
											"end": 7860,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7841,
											"end": 7860,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7821,
											"end": 7860,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7821,
											"end": 7860,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 7339,
											"end": 7885,
											"name": "tag",
											"source": 2,
											"value": "217"
										},
										{
											"begin": 7339,
											"end": 7885,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7899,
											"end": 7915,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7899,
											"end": 7915,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7895,
											"end": 8324,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "220"
										},
										{
											"begin": 7895,
											"end": 8324,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8062,
											"end": 8076,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 8062,
											"end": 8076,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8062,
											"end": 8076,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8062,
											"end": 8085,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8062,
											"end": 8085,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8062,
											"end": 8085,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8062,
											"end": 8085,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8062,
											"end": 8085,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8062,
											"end": 8085,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8062,
											"end": 8085,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 7895,
											"end": 8324,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "221"
										},
										{
											"begin": 7895,
											"end": 8324,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7895,
											"end": 8324,
											"name": "tag",
											"source": 2,
											"value": "220"
										},
										{
											"begin": 7895,
											"end": 8324,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8275,
											"end": 8290,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8275,
											"end": 8290,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8275,
											"end": 8286,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8275,
											"end": 8290,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8275,
											"end": 8290,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8275,
											"end": 8290,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8275,
											"end": 8290,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 8275,
											"end": 8290,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8275,
											"end": 8290,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8275,
											"end": 8290,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8275,
											"end": 8290,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8275,
											"end": 8290,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8275,
											"end": 8290,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8275,
											"end": 8299,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8275,
											"end": 8299,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8275,
											"end": 8299,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8275,
											"end": 8299,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8275,
											"end": 8299,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8275,
											"end": 8299,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 7895,
											"end": 8324,
											"name": "tag",
											"source": 2,
											"value": "221"
										},
										{
											"begin": 7895,
											"end": 8324,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8354,
											"end": 8356,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8339,
											"end": 8364,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8348,
											"end": 8352,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8339,
											"end": 8364,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8339,
											"end": 8364,
											"name": "PUSH",
											"source": 2,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8358,
											"end": 8363,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8339,
											"end": 8364,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8339,
											"end": 8364,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8339,
											"end": 8364,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "222"
										},
										{
											"begin": 8339,
											"end": 8364,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1258,
											"end": 1283,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1258,
											"end": 1283,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1246,
											"end": 1248,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1231,
											"end": 1249,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1231,
											"end": 1249,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1112,
											"end": 1289,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8339,
											"end": 8364,
											"name": "tag",
											"source": 2,
											"value": "222"
										},
										{
											"begin": 8339,
											"end": 8364,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8339,
											"end": 8364,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8339,
											"end": 8364,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8339,
											"end": 8364,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8339,
											"end": 8364,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8339,
											"end": 8364,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8339,
											"end": 8364,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8339,
											"end": 8364,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 7276,
											"end": 8371,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7201,
											"end": 8371,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7201,
											"end": 8371,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7201,
											"end": 8371,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7201,
											"end": 8371,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7082,
											"end": 7223,
											"name": "tag",
											"source": 1,
											"value": "192"
										},
										{
											"begin": 7082,
											"end": 7223,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7149,
											"end": 7166,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "225"
										},
										{
											"begin": 7149,
											"end": 7164,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "226"
										},
										{
											"begin": 7149,
											"end": 7166,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7149,
											"end": 7166,
											"name": "tag",
											"source": 1,
											"value": "225"
										},
										{
											"begin": 7149,
											"end": 7166,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7144,
											"end": 7217,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "93"
										},
										{
											"begin": 7144,
											"end": 7217,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1AFCD79F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 1980,
											"end": 2215,
											"name": "tag",
											"source": 0,
											"value": "195"
										},
										{
											"begin": 1980,
											"end": 2215,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6929,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "153"
										},
										{
											"begin": 6929,
											"end": 6947,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "192"
										},
										{
											"begin": 6929,
											"end": 6949,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2416,
											"end": 2632,
											"name": "tag",
											"source": 2,
											"value": "200"
										},
										{
											"begin": 2416,
											"end": 2632,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6929,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "235"
										},
										{
											"begin": 6929,
											"end": 6947,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "192"
										},
										{
											"begin": 6929,
											"end": 6949,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6929,
											"end": 6949,
											"name": "tag",
											"source": 1,
											"value": "235"
										},
										{
											"begin": 6929,
											"end": 6949,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "3874827173E8DF9F34323B12B251D1D3C53926CE129E30A0D69F1D47C277041B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 2581,
											"end": 2588,
											"name": "PUSH",
											"source": 2,
											"value": "52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE03"
										},
										{
											"begin": 2581,
											"end": 2596,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "238"
										},
										{
											"begin": 2591,
											"end": 2596,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2581,
											"end": 2588,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2581,
											"end": 2596,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "239"
										},
										{
											"begin": 2581,
											"end": 2596,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2581,
											"end": 2596,
											"modifierDepth": 1,
											"name": "tag",
											"source": 2,
											"value": "238"
										},
										{
											"begin": 2581,
											"end": 2596,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2606,
											"end": 2615,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2606,
											"end": 2615,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2606,
											"end": 2615,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2606,
											"end": 2625,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 2618,
											"end": 2625,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2606,
											"end": 2615,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2606,
											"end": 2625,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "239"
										},
										{
											"begin": 2606,
											"end": 2625,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 8485,
											"end": 8605,
											"name": "tag",
											"source": 1,
											"value": "226"
										},
										{
											"begin": 8485,
											"end": 8605,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8535,
											"end": 8539,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8558,
											"end": 8584,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "242"
										},
										{
											"begin": 8558,
											"end": 8582,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "112"
										},
										{
											"begin": 8558,
											"end": 8584,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 8558,
											"end": 8584,
											"name": "tag",
											"source": 1,
											"value": "242"
										},
										{
											"begin": 8558,
											"end": 8584,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8558,
											"end": 8598,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8558,
											"end": 8598,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8558,
											"end": 8598,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 8558,
											"end": 8598,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 8558,
											"end": 8598,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 8558,
											"end": 8598,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 8558,
											"end": 8598,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8485,
											"end": 8605,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 14,
											"end": 432,
											"name": "tag",
											"source": 8,
											"value": "23"
										},
										{
											"begin": 14,
											"end": 432,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 163,
											"end": 165,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 152,
											"end": 161,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 145,
											"end": 166,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 126,
											"end": 130,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 195,
											"end": 201,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 189,
											"end": 202,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 238,
											"end": 244,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 233,
											"end": 235,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 222,
											"end": 231,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 218,
											"end": 236,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 211,
											"end": 245,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 297,
											"end": 303,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 292,
											"end": 294,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 284,
											"end": 290,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 280,
											"end": 295,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 275,
											"end": 277,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 264,
											"end": 273,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 260,
											"end": 278,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 254,
											"end": 304,
											"name": "MCOPY",
											"source": 8
										},
										{
											"begin": 353,
											"end": 354,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 348,
											"end": 350,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 339,
											"end": 345,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 328,
											"end": 337,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 324,
											"end": 346,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 320,
											"end": 351,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 313,
											"end": 355,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 423,
											"end": 425,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 416,
											"end": 418,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 412,
											"end": 419,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 407,
											"end": 409,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 399,
											"end": 405,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 395,
											"end": 410,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 391,
											"end": 420,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 380,
											"end": 389,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 376,
											"end": 421,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 372,
											"end": 426,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 364,
											"end": 426,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 364,
											"end": 426,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 364,
											"end": 426,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14,
											"end": 432,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 14,
											"end": 432,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 14,
											"end": 432,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14,
											"end": 432,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 14,
											"end": 432,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 437,
											"end": 610,
											"name": "tag",
											"source": 8,
											"value": "243"
										},
										{
											"begin": 437,
											"end": 610,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 505,
											"end": 525,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 505,
											"end": 525,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 554,
											"end": 585,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 554,
											"end": 585,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 544,
											"end": 586,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 544,
											"end": 586,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 534,
											"end": 604,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "255"
										},
										{
											"begin": 534,
											"end": 604,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 600,
											"end": 601,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 597,
											"end": 598,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 590,
											"end": 602,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 534,
											"end": 604,
											"name": "tag",
											"source": 8,
											"value": "255"
										},
										{
											"begin": 534,
											"end": 604,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 437,
											"end": 610,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 437,
											"end": 610,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 437,
											"end": 610,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 437,
											"end": 610,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 615,
											"end": 915,
											"name": "tag",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 615,
											"end": 915,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 683,
											"end": 689,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 691,
											"end": 697,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 744,
											"end": 746,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 732,
											"end": 741,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 723,
											"end": 730,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 719,
											"end": 742,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 715,
											"end": 747,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 712,
											"end": 764,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 712,
											"end": 764,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "257"
										},
										{
											"begin": 712,
											"end": 764,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 760,
											"end": 761,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 757,
											"end": 758,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 750,
											"end": 762,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 712,
											"end": 764,
											"name": "tag",
											"source": 8,
											"value": "257"
										},
										{
											"begin": 712,
											"end": 764,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 783,
											"end": 812,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "258"
										},
										{
											"begin": 802,
											"end": 811,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 783,
											"end": 812,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "243"
										},
										{
											"begin": 783,
											"end": 812,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 783,
											"end": 812,
											"name": "tag",
											"source": 8,
											"value": "258"
										},
										{
											"begin": 783,
											"end": 812,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 773,
											"end": 812,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 881,
											"end": 883,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 866,
											"end": 884,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 866,
											"end": 884,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 866,
											"end": 884,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 866,
											"end": 884,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 853,
											"end": 885,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 853,
											"end": 885,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 615,
											"end": 915,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1294,
											"end": 1668,
											"name": "tag",
											"source": 8,
											"value": "38"
										},
										{
											"begin": 1294,
											"end": 1668,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1371,
											"end": 1377,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1379,
											"end": 1385,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1387,
											"end": 1393,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1440,
											"end": 1442,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 1428,
											"end": 1437,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1419,
											"end": 1426,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 1415,
											"end": 1438,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1411,
											"end": 1443,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1408,
											"end": 1460,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1408,
											"end": 1460,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "262"
										},
										{
											"begin": 1408,
											"end": 1460,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1456,
											"end": 1457,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1453,
											"end": 1454,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1446,
											"end": 1458,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1408,
											"end": 1460,
											"name": "tag",
											"source": 8,
											"value": "262"
										},
										{
											"begin": 1408,
											"end": 1460,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1479,
											"end": 1508,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "263"
										},
										{
											"begin": 1498,
											"end": 1507,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1479,
											"end": 1508,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "243"
										},
										{
											"begin": 1479,
											"end": 1508,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1479,
											"end": 1508,
											"name": "tag",
											"source": 8,
											"value": "263"
										},
										{
											"begin": 1479,
											"end": 1508,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1469,
											"end": 1508,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1469,
											"end": 1508,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1527,
											"end": 1565,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "264"
										},
										{
											"begin": 1561,
											"end": 1563,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1550,
											"end": 1559,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1546,
											"end": 1564,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1527,
											"end": 1565,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "243"
										},
										{
											"begin": 1527,
											"end": 1565,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1527,
											"end": 1565,
											"name": "tag",
											"source": 8,
											"value": "264"
										},
										{
											"begin": 1527,
											"end": 1565,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1294,
											"end": 1668,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1294,
											"end": 1668,
											"name": "SWAP6",
											"source": 8
										},
										{
											"begin": 1517,
											"end": 1565,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1517,
											"end": 1565,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1634,
											"end": 1636,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1619,
											"end": 1637,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1619,
											"end": 1637,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1619,
											"end": 1637,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1619,
											"end": 1637,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1606,
											"end": 1638,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1606,
											"end": 1638,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1294,
											"end": 1668,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1862,
											"end": 1989,
											"name": "tag",
											"source": 8,
											"value": "244"
										},
										{
											"begin": 1862,
											"end": 1989,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1923,
											"end": 1933,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 1918,
											"end": 1921,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 1914,
											"end": 1934,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 1911,
											"end": 1912,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1904,
											"end": 1935,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1954,
											"end": 1958,
											"name": "PUSH",
											"source": 8,
											"value": "41"
										},
										{
											"begin": 1951,
											"end": 1952,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1944,
											"end": 1959,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1978,
											"end": 1982,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1975,
											"end": 1976,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1968,
											"end": 1983,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1994,
											"end": 2720,
											"name": "tag",
											"source": 8,
											"value": "245"
										},
										{
											"begin": 1994,
											"end": 2720,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2037,
											"end": 2042,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2090,
											"end": 2093,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2083,
											"end": 2087,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 2075,
											"end": 2081,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2071,
											"end": 2088,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2067,
											"end": 2094,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 2057,
											"end": 2112,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "268"
										},
										{
											"begin": 2057,
											"end": 2112,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2108,
											"end": 2109,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2105,
											"end": 2106,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2098,
											"end": 2110,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2057,
											"end": 2112,
											"name": "tag",
											"source": 8,
											"value": "268"
										},
										{
											"begin": 2057,
											"end": 2112,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2148,
											"end": 2154,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2135,
											"end": 2155,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 2178,
											"end": 2196,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2170,
											"end": 2176,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2167,
											"end": 2197,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 2164,
											"end": 2220,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2164,
											"end": 2220,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "270"
										},
										{
											"begin": 2164,
											"end": 2220,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2200,
											"end": 2218,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "270"
										},
										{
											"begin": 2200,
											"end": 2218,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "244"
										},
										{
											"begin": 2200,
											"end": 2218,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2200,
											"end": 2218,
											"name": "tag",
											"source": 8,
											"value": "270"
										},
										{
											"begin": 2200,
											"end": 2218,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2249,
											"end": 2251,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2243,
											"end": 2252,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2341,
											"end": 2343,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 2303,
											"end": 2320,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2303,
											"end": 2320,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2299,
											"end": 2330,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2299,
											"end": 2330,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2299,
											"end": 2330,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2332,
											"end": 2334,
											"name": "PUSH",
											"source": 8,
											"value": "3F"
										},
										{
											"begin": 2295,
											"end": 2335,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2291,
											"end": 2345,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2279,
											"end": 2346,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2279,
											"end": 2346,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2376,
											"end": 2394,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2361,
											"end": 2395,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2361,
											"end": 2395,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 2397,
											"end": 2419,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2397,
											"end": 2419,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2397,
											"end": 2419,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 2358,
											"end": 2420,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 2355,
											"end": 2443,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2355,
											"end": 2443,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "272"
										},
										{
											"begin": 2355,
											"end": 2443,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2423,
											"end": 2441,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "272"
										},
										{
											"begin": 2423,
											"end": 2441,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "244"
										},
										{
											"begin": 2423,
											"end": 2441,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2423,
											"end": 2441,
											"name": "tag",
											"source": 8,
											"value": "272"
										},
										{
											"begin": 2423,
											"end": 2441,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2459,
											"end": 2461,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2452,
											"end": 2474,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2483,
											"end": 2505,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2483,
											"end": 2505,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2483,
											"end": 2505,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2524,
											"end": 2543,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2524,
											"end": 2543,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2524,
											"end": 2543,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2545,
											"end": 2549,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2520,
											"end": 2550,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2517,
											"end": 2556,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 2514,
											"end": 2573,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2514,
											"end": 2573,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "273"
										},
										{
											"begin": 2514,
											"end": 2573,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2569,
											"end": 2570,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2566,
											"end": 2567,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2559,
											"end": 2571,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2514,
											"end": 2573,
											"name": "tag",
											"source": 8,
											"value": "273"
										},
										{
											"begin": 2514,
											"end": 2573,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2633,
											"end": 2639,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2626,
											"end": 2630,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2618,
											"end": 2624,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 2614,
											"end": 2631,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2607,
											"end": 2611,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2599,
											"end": 2605,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2595,
											"end": 2612,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2582,
											"end": 2640,
											"name": "CALLDATACOPY",
											"source": 8
										},
										{
											"begin": 2688,
											"end": 2689,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2660,
											"end": 2679,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2660,
											"end": 2679,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2660,
											"end": 2679,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2681,
											"end": 2685,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2656,
											"end": 2686,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2649,
											"end": 2690,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2649,
											"end": 2690,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2649,
											"end": 2690,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2649,
											"end": 2690,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2664,
											"end": 2670,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1994,
											"end": 2720,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1994,
											"end": 2720,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2725,
											"end": 3263,
											"name": "tag",
											"source": 8,
											"value": "47"
										},
										{
											"begin": 2725,
											"end": 3263,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2813,
											"end": 2819,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2821,
											"end": 2827,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2874,
											"end": 2876,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2862,
											"end": 2871,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2853,
											"end": 2860,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 2849,
											"end": 2872,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2845,
											"end": 2877,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 2842,
											"end": 2894,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2842,
											"end": 2894,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "275"
										},
										{
											"begin": 2842,
											"end": 2894,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2890,
											"end": 2891,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2887,
											"end": 2888,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2880,
											"end": 2892,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2842,
											"end": 2894,
											"name": "tag",
											"source": 8,
											"value": "275"
										},
										{
											"begin": 2842,
											"end": 2894,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2930,
											"end": 2939,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2917,
											"end": 2940,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 2963,
											"end": 2981,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2955,
											"end": 2961,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2952,
											"end": 2982,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 2949,
											"end": 2999,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2949,
											"end": 2999,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "276"
										},
										{
											"begin": 2949,
											"end": 2999,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2995,
											"end": 2996,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2992,
											"end": 2993,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2985,
											"end": 2997,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2949,
											"end": 2999,
											"name": "tag",
											"source": 8,
											"value": "276"
										},
										{
											"begin": 2949,
											"end": 2999,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3018,
											"end": 3068,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "277"
										},
										{
											"begin": 3060,
											"end": 3067,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 3051,
											"end": 3057,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3040,
											"end": 3049,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 3036,
											"end": 3058,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3018,
											"end": 3068,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "245"
										},
										{
											"begin": 3018,
											"end": 3068,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3018,
											"end": 3068,
											"name": "tag",
											"source": 8,
											"value": "277"
										},
										{
											"begin": 3018,
											"end": 3068,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3008,
											"end": 3068,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3008,
											"end": 3068,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3008,
											"end": 3068,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3121,
											"end": 3123,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3110,
											"end": 3119,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3106,
											"end": 3124,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3093,
											"end": 3125,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 3150,
											"end": 3168,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3140,
											"end": 3148,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3137,
											"end": 3169,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 3134,
											"end": 3186,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3134,
											"end": 3186,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "278"
										},
										{
											"begin": 3134,
											"end": 3186,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3182,
											"end": 3183,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3179,
											"end": 3180,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3172,
											"end": 3184,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 3134,
											"end": 3186,
											"name": "tag",
											"source": 8,
											"value": "278"
										},
										{
											"begin": 3134,
											"end": 3186,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3205,
											"end": 3257,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "279"
										},
										{
											"begin": 3249,
											"end": 3256,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 3238,
											"end": 3246,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3227,
											"end": 3236,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 3223,
											"end": 3247,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3205,
											"end": 3257,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "245"
										},
										{
											"begin": 3205,
											"end": 3257,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3205,
											"end": 3257,
											"name": "tag",
											"source": 8,
											"value": "279"
										},
										{
											"begin": 3205,
											"end": 3257,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3195,
											"end": 3257,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3195,
											"end": 3257,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3195,
											"end": 3257,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2725,
											"end": 3263,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2725,
											"end": 3263,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2725,
											"end": 3263,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2725,
											"end": 3263,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2725,
											"end": 3263,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2725,
											"end": 3263,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3268,
											"end": 3454,
											"name": "tag",
											"source": 8,
											"value": "51"
										},
										{
											"begin": 3268,
											"end": 3454,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3327,
											"end": 3333,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3380,
											"end": 3382,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3368,
											"end": 3377,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3359,
											"end": 3366,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3355,
											"end": 3378,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3351,
											"end": 3383,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 3348,
											"end": 3400,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3348,
											"end": 3400,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "281"
										},
										{
											"begin": 3348,
											"end": 3400,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3396,
											"end": 3397,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3393,
											"end": 3394,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3386,
											"end": 3398,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 3348,
											"end": 3400,
											"name": "tag",
											"source": 8,
											"value": "281"
										},
										{
											"begin": 3348,
											"end": 3400,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3419,
											"end": 3448,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "282"
										},
										{
											"begin": 3438,
											"end": 3447,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3419,
											"end": 3448,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "243"
										},
										{
											"begin": 3419,
											"end": 3448,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3419,
											"end": 3448,
											"name": "tag",
											"source": 8,
											"value": "282"
										},
										{
											"begin": 3419,
											"end": 3448,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3409,
											"end": 3448,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 3268,
											"end": 3454,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3268,
											"end": 3454,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3927,
											"name": "tag",
											"source": 8,
											"value": "69"
										},
										{
											"begin": 3667,
											"end": 3927,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3735,
											"end": 3741,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3743,
											"end": 3749,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3796,
											"end": 3798,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3784,
											"end": 3793,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3775,
											"end": 3782,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 3771,
											"end": 3794,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3767,
											"end": 3799,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 3764,
											"end": 3816,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3764,
											"end": 3816,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "285"
										},
										{
											"begin": 3764,
											"end": 3816,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3812,
											"end": 3813,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3809,
											"end": 3810,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3802,
											"end": 3814,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 3764,
											"end": 3816,
											"name": "tag",
											"source": 8,
											"value": "285"
										},
										{
											"begin": 3764,
											"end": 3816,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3835,
											"end": 3864,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "286"
										},
										{
											"begin": 3854,
											"end": 3863,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3835,
											"end": 3864,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "243"
										},
										{
											"begin": 3835,
											"end": 3864,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3835,
											"end": 3864,
											"name": "tag",
											"source": 8,
											"value": "286"
										},
										{
											"begin": 3835,
											"end": 3864,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3825,
											"end": 3864,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3825,
											"end": 3864,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3883,
											"end": 3921,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "287"
										},
										{
											"begin": 3917,
											"end": 3919,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3906,
											"end": 3915,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3902,
											"end": 3920,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3883,
											"end": 3921,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "243"
										},
										{
											"begin": 3883,
											"end": 3921,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3883,
											"end": 3921,
											"name": "tag",
											"source": 8,
											"value": "287"
										},
										{
											"begin": 3883,
											"end": 3921,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3873,
											"end": 3921,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3873,
											"end": 3921,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3927,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3927,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3927,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3927,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3927,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3927,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3932,
											"end": 4312,
											"name": "tag",
											"source": 8,
											"value": "79"
										},
										{
											"begin": 3932,
											"end": 4312,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4011,
											"end": 4012,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 4007,
											"end": 4019,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4007,
											"end": 4019,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4007,
											"end": 4019,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 4007,
											"end": 4019,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4054,
											"end": 4066,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4054,
											"end": 4066,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4054,
											"end": 4066,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4075,
											"end": 4136,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "289"
										},
										{
											"begin": 4075,
											"end": 4136,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4129,
											"end": 4133,
											"name": "PUSH",
											"source": 8,
											"value": "7F"
										},
										{
											"begin": 4121,
											"end": 4127,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4117,
											"end": 4134,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4107,
											"end": 4134,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4107,
											"end": 4134,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4075,
											"end": 4136,
											"name": "tag",
											"source": 8,
											"value": "289"
										},
										{
											"begin": 4075,
											"end": 4136,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4182,
											"end": 4184,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4174,
											"end": 4180,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4171,
											"end": 4185,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 4151,
											"end": 4169,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4148,
											"end": 4186,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 4145,
											"end": 4306,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "290"
										},
										{
											"begin": 4145,
											"end": 4306,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4228,
											"end": 4238,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 4223,
											"end": 4226,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 4219,
											"end": 4239,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 4216,
											"end": 4217,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4209,
											"end": 4240,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4263,
											"end": 4267,
											"name": "PUSH",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 4260,
											"end": 4261,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 4253,
											"end": 4268,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4291,
											"end": 4295,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 4288,
											"end": 4289,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4281,
											"end": 4296,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 4145,
											"end": 4306,
											"name": "tag",
											"source": 8,
											"value": "290"
										},
										{
											"begin": 4145,
											"end": 4306,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4145,
											"end": 4306,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3932,
											"end": 4312,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3932,
											"end": 4312,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3932,
											"end": 4312,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3932,
											"end": 4312,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4317,
											"end": 4444,
											"name": "tag",
											"source": 8,
											"value": "246"
										},
										{
											"begin": 4317,
											"end": 4444,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4378,
											"end": 4388,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 4373,
											"end": 4376,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 4369,
											"end": 4389,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 4366,
											"end": 4367,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4359,
											"end": 4390,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4409,
											"end": 4413,
											"name": "PUSH",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 4406,
											"end": 4407,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 4399,
											"end": 4414,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4433,
											"end": 4437,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 4430,
											"end": 4431,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4423,
											"end": 4438,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 4449,
											"end": 4824,
											"name": "tag",
											"source": 8,
											"value": "247"
										},
										{
											"begin": 4449,
											"end": 4824,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4537,
											"end": 4538,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 4555,
											"end": 4560,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4569,
											"end": 4818,
											"name": "tag",
											"source": 8,
											"value": "293"
										},
										{
											"begin": 4569,
											"end": 4818,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4590,
											"end": 4591,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 4580,
											"end": 4588,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4577,
											"end": 4592,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 4569,
											"end": 4818,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4569,
											"end": 4818,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "295"
										},
										{
											"begin": 4569,
											"end": 4818,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4640,
											"end": 4644,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4635,
											"end": 4638,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4645,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 4625,
											"end": 4629,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4622,
											"end": 4646,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 4619,
											"end": 4669,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4619,
											"end": 4669,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "297"
										},
										{
											"begin": 4619,
											"end": 4669,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4649,
											"end": 4667,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "297"
										},
										{
											"begin": 4649,
											"end": 4667,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "246"
										},
										{
											"begin": 4649,
											"end": 4667,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4649,
											"end": 4667,
											"name": "tag",
											"source": 8,
											"value": "297"
										},
										{
											"begin": 4649,
											"end": 4667,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4699,
											"end": 4700,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 4689,
											"end": 4697,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4685,
											"end": 4701,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4682,
											"end": 4731,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4682,
											"end": 4731,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "298"
										},
										{
											"begin": 4682,
											"end": 4731,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4713,
											"end": 4729,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4713,
											"end": 4729,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4713,
											"end": 4729,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 4713,
											"end": 4729,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4682,
											"end": 4731,
											"name": "tag",
											"source": 8,
											"value": "298"
										},
										{
											"begin": 4682,
											"end": 4731,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4796,
											"end": 4797,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 4792,
											"end": 4808,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 4792,
											"end": 4808,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4792,
											"end": 4808,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 4792,
											"end": 4808,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 4792,
											"end": 4808,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 4752,
											"end": 4767,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4752,
											"end": 4767,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 4569,
											"end": 4818,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "293"
										},
										{
											"begin": 4569,
											"end": 4818,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4569,
											"end": 4818,
											"name": "tag",
											"source": 8,
											"value": "295"
										},
										{
											"begin": 4569,
											"end": 4818,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4449,
											"end": 4824,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 4449,
											"end": 4824,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4449,
											"end": 4824,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 4449,
											"end": 4824,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4449,
											"end": 4824,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4449,
											"end": 4824,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4449,
											"end": 4824,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4829,
											"end": 5731,
											"name": "tag",
											"source": 8,
											"value": "248"
										},
										{
											"begin": 4829,
											"end": 5731,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4878,
											"end": 4883,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4908,
											"end": 4916,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4898,
											"end": 4978,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "300"
										},
										{
											"begin": 4898,
											"end": 4978,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4949,
											"end": 4950,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 4963,
											"end": 4968,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 4963,
											"end": 4968,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4898,
											"end": 4978,
											"name": "tag",
											"source": 8,
											"value": "300"
										},
										{
											"begin": 4898,
											"end": 4978,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4997,
											"end": 5001,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4987,
											"end": 5063,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "301"
										},
										{
											"begin": 4987,
											"end": 5063,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5034,
											"end": 5035,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5048,
											"end": 5053,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 5048,
											"end": 5053,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4987,
											"end": 5063,
											"name": "tag",
											"source": 8,
											"value": "301"
										},
										{
											"begin": 4987,
											"end": 5063,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5079,
											"end": 5083,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5097,
											"end": 5098,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 5092,
											"end": 5151,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5092,
											"end": 5151,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 5092,
											"end": 5151,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "303"
										},
										{
											"begin": 5092,
											"end": 5151,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5165,
											"end": 5166,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 5160,
											"end": 5334,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5160,
											"end": 5334,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 5160,
											"end": 5334,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "304"
										},
										{
											"begin": 5160,
											"end": 5334,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5072,
											"end": 5334,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "302"
										},
										{
											"begin": 5072,
											"end": 5334,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5092,
											"end": 5151,
											"name": "tag",
											"source": 8,
											"value": "303"
										},
										{
											"begin": 5092,
											"end": 5151,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5122,
											"end": 5123,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 5113,
											"end": 5123,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5113,
											"end": 5123,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5136,
											"end": 5141,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5136,
											"end": 5141,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 5136,
											"end": 5141,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5160,
											"end": 5334,
											"name": "tag",
											"source": 8,
											"value": "304"
										},
										{
											"begin": 5160,
											"end": 5334,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5197,
											"end": 5200,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 5187,
											"end": 5195,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 5184,
											"end": 5201,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 5181,
											"end": 5224,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5181,
											"end": 5224,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "306"
										},
										{
											"begin": 5181,
											"end": 5224,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5204,
											"end": 5222,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "306"
										},
										{
											"begin": 5204,
											"end": 5222,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "246"
										},
										{
											"begin": 5204,
											"end": 5222,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5204,
											"end": 5222,
											"name": "tag",
											"source": 8,
											"value": "306"
										},
										{
											"begin": 5204,
											"end": 5222,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5260,
											"end": 5261,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 5246,
											"end": 5262,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5246,
											"end": 5262,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 5319,
											"end": 5324,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 5319,
											"end": 5324,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5072,
											"end": 5334,
											"name": "tag",
											"source": 8,
											"value": "302"
										},
										{
											"begin": 5072,
											"end": 5334,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5072,
											"end": 5334,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5418,
											"end": 5420,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5408,
											"end": 5416,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5405,
											"end": 5421,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 5399,
											"end": 5402,
											"name": "PUSH",
											"source": 8,
											"value": "133"
										},
										{
											"begin": 5393,
											"end": 5397,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5390,
											"end": 5403,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 5386,
											"end": 5422,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5380,
											"end": 5382,
											"name": "PUSH",
											"source": 8,
											"value": "4E"
										},
										{
											"begin": 5370,
											"end": 5378,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 5367,
											"end": 5383,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 5362,
											"end": 5364,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 5356,
											"end": 5360,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 5353,
											"end": 5365,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 5349,
											"end": 5384,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5346,
											"end": 5423,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 5343,
											"end": 5546,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5343,
											"end": 5546,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "307"
										},
										{
											"begin": 5343,
											"end": 5546,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5455,
											"end": 5474,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5455,
											"end": 5474,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5455,
											"end": 5474,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 5531,
											"end": 5536,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 5531,
											"end": 5536,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5343,
											"end": 5546,
											"name": "tag",
											"source": 8,
											"value": "307"
										},
										{
											"begin": 5343,
											"end": 5546,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5578,
											"end": 5620,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "308"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5603,
											"end": 5611,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 5597,
											"end": 5601,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 5578,
											"end": 5620,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "247"
										},
										{
											"begin": 5578,
											"end": 5620,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5578,
											"end": 5620,
											"name": "tag",
											"source": 8,
											"value": "308"
										},
										{
											"begin": 5578,
											"end": 5620,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5656,
											"end": 5662,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5652,
											"end": 5653,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5648,
											"end": 5654,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 5644,
											"end": 5663,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 5635,
											"end": 5642,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5632,
											"end": 5664,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 5629,
											"end": 5687,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5629,
											"end": 5687,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "310"
										},
										{
											"begin": 5629,
											"end": 5687,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5667,
											"end": 5685,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "310"
										},
										{
											"begin": 5667,
											"end": 5685,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "246"
										},
										{
											"begin": 5667,
											"end": 5685,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5667,
											"end": 5685,
											"name": "tag",
											"source": 8,
											"value": "310"
										},
										{
											"begin": 5667,
											"end": 5685,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5705,
											"end": 5725,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 5705,
											"end": 5725,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 4829,
											"end": 5731,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4829,
											"end": 5731,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5736,
											"end": 5876,
											"name": "tag",
											"source": 8,
											"value": "97"
										},
										{
											"begin": 5736,
											"end": 5876,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5794,
											"end": 5799,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5823,
											"end": 5870,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "282"
										},
										{
											"begin": 5864,
											"end": 5868,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 5854,
											"end": 5862,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 5850,
											"end": 5869,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5844,
											"end": 5848,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5823,
											"end": 5870,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "248"
										},
										{
											"begin": 5823,
											"end": 5870,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5881,
											"end": 6049,
											"name": "tag",
											"source": 8,
											"value": "99"
										},
										{
											"begin": 5881,
											"end": 6049,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5954,
											"end": 5963,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5954,
											"end": 5963,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5954,
											"end": 5963,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 5985,
											"end": 5994,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5985,
											"end": 5994,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6002,
											"end": 6017,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6002,
											"end": 6017,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6002,
											"end": 6017,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 5996,
											"end": 6018,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 5996,
											"end": 6018,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 5982,
											"end": 6019,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 5972,
											"end": 6043,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 5972,
											"end": 6043,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6023,
											"end": 6041,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 6023,
											"end": 6041,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "246"
										},
										{
											"begin": 6023,
											"end": 6041,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6618,
											"end": 6743,
											"name": "tag",
											"source": 8,
											"value": "216"
										},
										{
											"begin": 6618,
											"end": 6743,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6683,
											"end": 6692,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6683,
											"end": 6692,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6683,
											"end": 6692,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6704,
											"end": 6714,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6704,
											"end": 6714,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6704,
											"end": 6714,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 6701,
											"end": 6737,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6701,
											"end": 6737,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 6701,
											"end": 6737,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6717,
											"end": 6735,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 6717,
											"end": 6735,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "246"
										},
										{
											"begin": 6717,
											"end": 6735,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6874,
											"end": 7392,
											"name": "tag",
											"source": 8,
											"value": "250"
										},
										{
											"begin": 6874,
											"end": 7392,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6976,
											"end": 6978,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 6971,
											"end": 6974,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6968,
											"end": 6979,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 6965,
											"end": 7386,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6965,
											"end": 7386,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "161"
										},
										{
											"begin": 6965,
											"end": 7386,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 7012,
											"end": 7017,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7009,
											"end": 7010,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7002,
											"end": 7018,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7056,
											"end": 7060,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7053,
											"end": 7054,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7043,
											"end": 7061,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 7126,
											"end": 7128,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 7114,
											"end": 7124,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 7110,
											"end": 7129,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7107,
											"end": 7108,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 7103,
											"end": 7130,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 7097,
											"end": 7101,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7093,
											"end": 7131,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7162,
											"end": 7166,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7150,
											"end": 7160,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 7147,
											"end": 7167,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 7144,
											"end": 7191,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 7144,
											"end": 7191,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "324"
										},
										{
											"begin": 7144,
											"end": 7191,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7185,
											"end": 7189,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7144,
											"end": 7191,
											"name": "tag",
											"source": 8,
											"value": "324"
										},
										{
											"begin": 7144,
											"end": 7191,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7240,
											"end": 7242,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 7235,
											"end": 7238,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 7231,
											"end": 7243,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7228,
											"end": 7229,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 7224,
											"end": 7244,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 7218,
											"end": 7222,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7214,
											"end": 7245,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7204,
											"end": 7245,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7204,
											"end": 7245,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7295,
											"end": 7376,
											"name": "tag",
											"source": 8,
											"value": "325"
										},
										{
											"begin": 7295,
											"end": 7376,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7313,
											"end": 7315,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7306,
											"end": 7311,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7303,
											"end": 7316,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 7295,
											"end": 7376,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 7295,
											"end": 7376,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "210"
										},
										{
											"begin": 7295,
											"end": 7376,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 7372,
											"end": 7373,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7358,
											"end": 7374,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7358,
											"end": 7374,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 7339,
											"end": 7340,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 7328,
											"end": 7341,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7295,
											"end": 7376,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "325"
										},
										{
											"begin": 7295,
											"end": 7376,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7568,
											"end": 8867,
											"name": "tag",
											"source": 8,
											"value": "239"
										},
										{
											"begin": 7568,
											"end": 8867,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7694,
											"end": 7697,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7688,
											"end": 7698,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 7721,
											"end": 7739,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7713,
											"end": 7719,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7710,
											"end": 7740,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 7707,
											"end": 7763,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 7707,
											"end": 7763,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "331"
										},
										{
											"begin": 7707,
											"end": 7763,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 7743,
											"end": 7761,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "331"
										},
										{
											"begin": 7743,
											"end": 7761,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "244"
										},
										{
											"begin": 7743,
											"end": 7761,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7743,
											"end": 7761,
											"name": "tag",
											"source": 8,
											"value": "331"
										},
										{
											"begin": 7743,
											"end": 7761,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7772,
											"end": 7869,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "332"
										},
										{
											"begin": 7862,
											"end": 7868,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7822,
											"end": 7860,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "333"
										},
										{
											"begin": 7854,
											"end": 7858,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 7848,
											"end": 7859,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 7822,
											"end": 7860,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "79"
										},
										{
											"begin": 7822,
											"end": 7860,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7822,
											"end": 7860,
											"name": "tag",
											"source": 8,
											"value": "333"
										},
										{
											"begin": 7822,
											"end": 7860,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7816,
											"end": 7820,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 7772,
											"end": 7869,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "250"
										},
										{
											"begin": 7772,
											"end": 7869,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7772,
											"end": 7869,
											"name": "tag",
											"source": 8,
											"value": "332"
										},
										{
											"begin": 7772,
											"end": 7869,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7918,
											"end": 7922,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7949,
											"end": 7951,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 7938,
											"end": 7952,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7938,
											"end": 7952,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 7966,
											"end": 7967,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 7961,
											"end": 8610,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7961,
											"end": 8610,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 7961,
											"end": 8610,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "335"
										},
										{
											"begin": 7961,
											"end": 8610,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 8654,
											"end": 8655,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8671,
											"end": 8677,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 8668,
											"end": 8757,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8668,
											"end": 8757,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "336"
										},
										{
											"begin": 8668,
											"end": 8757,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8723,
											"end": 8742,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 8723,
											"end": 8742,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8723,
											"end": 8742,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8717,
											"end": 8743,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8668,
											"end": 8757,
											"name": "tag",
											"source": 8,
											"value": "336"
										},
										{
											"begin": 8668,
											"end": 8757,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7525,
											"end": 7526,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 7521,
											"end": 7532,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 7521,
											"end": 7532,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7521,
											"end": 7532,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 7517,
											"end": 7541,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 7513,
											"end": 7542,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 7503,
											"end": 7543,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 7549,
											"end": 7550,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 7545,
											"end": 7556,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 7545,
											"end": 7556,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7545,
											"end": 7556,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 7500,
											"end": 7557,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 8770,
											"end": 8851,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 8770,
											"end": 8851,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 7931,
											"end": 8861,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "210"
										},
										{
											"begin": 7931,
											"end": 8861,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7961,
											"end": 8610,
											"name": "tag",
											"source": 8,
											"value": "335"
										},
										{
											"begin": 7961,
											"end": 8610,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6821,
											"end": 6822,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6814,
											"end": 6828,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 6814,
											"end": 6828,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6814,
											"end": 6828,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6858,
											"end": 6862,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6845,
											"end": 6863,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6845,
											"end": 6863,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7997,
											"end": 8017,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 7997,
											"end": 8017,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 7997,
											"end": 8017,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8115,
											"end": 8337,
											"name": "tag",
											"source": 8,
											"value": "339"
										},
										{
											"begin": 8115,
											"end": 8337,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8129,
											"end": 8136,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8126,
											"end": 8127,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8123,
											"end": 8137,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 8115,
											"end": 8337,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8115,
											"end": 8337,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "341"
										},
										{
											"begin": 8115,
											"end": 8337,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 8211,
											"end": 8230,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 8211,
											"end": 8230,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 8211,
											"end": 8230,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8205,
											"end": 8231,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8190,
											"end": 8232,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8190,
											"end": 8232,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 8318,
											"end": 8322,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8303,
											"end": 8323,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 8303,
											"end": 8323,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 8303,
											"end": 8323,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8303,
											"end": 8323,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 8271,
											"end": 8272,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 8259,
											"end": 8273,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8259,
											"end": 8273,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 8259,
											"end": 8273,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8259,
											"end": 8273,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8145,
											"end": 8157,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8115,
											"end": 8337,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "339"
										},
										{
											"begin": 8115,
											"end": 8337,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8115,
											"end": 8337,
											"name": "tag",
											"source": 8,
											"value": "341"
										},
										{
											"begin": 8115,
											"end": 8337,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8119,
											"end": 8122,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8365,
											"end": 8371,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 8356,
											"end": 8363,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8353,
											"end": 8372,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 8350,
											"end": 8551,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8350,
											"end": 8551,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "342"
										},
										{
											"begin": 8350,
											"end": 8551,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 8426,
											"end": 8445,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 8426,
											"end": 8445,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 8426,
											"end": 8445,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8420,
											"end": 8446,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 8509,
											"end": 8510,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 8505,
											"end": 8519,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 8505,
											"end": 8519,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8505,
											"end": 8519,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 8521,
											"end": 8524,
											"name": "PUSH",
											"source": 8,
											"value": "F8"
										},
										{
											"begin": 8501,
											"end": 8525,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8497,
											"end": 8534,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 8493,
											"end": 8535,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 8478,
											"end": 8536,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8463,
											"end": 8537,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8463,
											"end": 8537,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 8350,
											"end": 8551,
											"name": "tag",
											"source": 8,
											"value": "342"
										},
										{
											"begin": 8350,
											"end": 8551,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8597,
											"end": 8598,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 8581,
											"end": 8595,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8581,
											"end": 8595,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8581,
											"end": 8595,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 8577,
											"end": 8599,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8564,
											"end": 8600,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8564,
											"end": 8600,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7568,
											"end": 8867,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										}
									],
									".data": {
										"3874827173E8DF9F34323B12B251D1D3C53926CE129E30A0D69F1D47C277041B": "52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00"
									}
								}
							},
							"sourceList": [
								"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
								"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"contracts/Mock/CustomToken.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"initialize(string,string)": "4cd88b76",
							"mint()": "1249c58b",
							"name()": "06fdde03",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Mock/CustomToken.sol\":\"CustomToken\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9706d43a0124053d9880f6e31a59f31bc0a6a3dc1acd66ce0a16e1111658c5f6\",\"dweb:/ipfs/QmUFmfowzkRwGtDu36cXV9SPTBHJ3n7dG9xQiK5B28jTf2\"]},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08\",\"dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0xa0e86b70fa5a7bd63795161c0882676fde6a18bbb1991938ef014fb0184b4b13\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1727a5d693a56ed6af48bace20d8ec26232f0a8f78ff482c5a691cc5c348a019\",\"dweb:/ipfs/QmdXaYmoETBqAv4YBnSmZyuoovjQMsDjfjnCnBFqXhhQEB\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"contracts/Mock/CustomToken.sol\":{\"keccak256\":\"0xe04b58e9514c3e80b2b14e6b01046547eae92397d50e2f1083f84b4569b54980\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://808c00d88f34d9a42301c8c0d3a8aefbcd32ce7aefdd51fc9931ef344e68053b\",\"dweb:/ipfs/QmfZHv3B7AFi3zsS266psEYT91yjQXr5NGGQwio1z7dCaJ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							1125
						],
						"Initializable": [
							462
						],
						"OwnableUpgradeable": [
							194
						]
					},
					"id": 195,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../utils/ContextUpgradeable.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 195,
							"sourceUnit": 1126,
							"src": "128:67:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "ContextUpgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1125,
										"src": "136:18:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 5,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 195,
							"sourceUnit": 463,
							"src": "196:63:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 4,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 462,
										"src": "204:13:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 7,
										"name": "Initializable",
										"nameLocations": [
											"789:13:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 462,
										"src": "789:13:0"
									},
									"id": 8,
									"nodeType": "InheritanceSpecifier",
									"src": "789:13:0"
								},
								{
									"baseName": {
										"id": 9,
										"name": "ContextUpgradeable",
										"nameLocations": [
											"804:18:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1125,
										"src": "804:18:0"
									},
									"id": 10,
									"nodeType": "InheritanceSpecifier",
									"src": "804:18:0"
								}
							],
							"canonicalName": "OwnableUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 6,
								"nodeType": "StructuredDocumentation",
								"src": "261:487:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 194,
							"linearizedBaseContracts": [
								194,
								1125,
								462
							],
							"name": "OwnableUpgradeable",
							"nameLocation": "767:18:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "OwnableUpgradeable.OwnableStorage",
									"documentation": {
										"id": 11,
										"nodeType": "StructuredDocumentation",
										"src": "829:65:0",
										"text": "@custom:storage-location erc7201:openzeppelin.storage.Ownable"
									},
									"id": 14,
									"members": [
										{
											"constant": false,
											"id": 13,
											"mutability": "mutable",
											"name": "_owner",
											"nameLocation": "939:6:0",
											"nodeType": "VariableDeclaration",
											"scope": 14,
											"src": "931:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 12,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "931:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "OwnableStorage",
									"nameLocation": "906:14:0",
									"nodeType": "StructDefinition",
									"scope": 194,
									"src": "899:53:0",
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 17,
									"mutability": "constant",
									"name": "OwnableStorageLocation",
									"nameLocation": "1094:22:0",
									"nodeType": "VariableDeclaration",
									"scope": 194,
									"src": "1069:116:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 15,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1069:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307839303136643039643732643430666461653266643863656163366236323334633737303632313466643339633163643165363039613035323863313939333030",
										"id": 16,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1119:66:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_65173360639460082030725920392146925864023520599682862633725751242436743107328_by_1",
											"typeString": "int_const 6517...(69 digits omitted)...7328"
										},
										"value": "0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 24,
										"nodeType": "Block",
										"src": "1270:81:0",
										"statements": [
											{
												"AST": {
													"nativeSrc": "1289:56:0",
													"nodeType": "YulBlock",
													"src": "1289:56:0",
													"statements": [
														{
															"nativeSrc": "1303:32:0",
															"nodeType": "YulAssignment",
															"src": "1303:32:0",
															"value": {
																"name": "OwnableStorageLocation",
																"nativeSrc": "1313:22:0",
																"nodeType": "YulIdentifier",
																"src": "1313:22:0"
															},
															"variableNames": [
																{
																	"name": "$.slot",
																	"nativeSrc": "1303:6:0",
																	"nodeType": "YulIdentifier",
																	"src": "1303:6:0"
																}
															]
														}
													]
												},
												"evmVersion": "prague",
												"externalReferences": [
													{
														"declaration": 21,
														"isOffset": false,
														"isSlot": true,
														"src": "1303:6:0",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 17,
														"isOffset": false,
														"isSlot": false,
														"src": "1313:22:0",
														"valueSize": 1
													}
												],
												"id": 23,
												"nodeType": "InlineAssembly",
												"src": "1280:65:0"
											}
										]
									},
									"id": 25,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getOwnableStorage",
									"nameLocation": "1201:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1219:2:0"
									},
									"returnParameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 21,
												"mutability": "mutable",
												"name": "$",
												"nameLocation": "1267:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 25,
												"src": "1244:24:0",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
													"typeString": "struct OwnableUpgradeable.OwnableStorage"
												},
												"typeName": {
													"id": 20,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 19,
														"name": "OwnableStorage",
														"nameLocations": [
															"1244:14:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 14,
														"src": "1244:14:0"
													},
													"referencedDeclaration": 14,
													"src": "1244:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
														"typeString": "struct OwnableUpgradeable.OwnableStorage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1243:26:0"
									},
									"scope": 194,
									"src": "1192:159:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 26,
										"nodeType": "StructuredDocumentation",
										"src": "1357:85:0",
										"text": " @dev The caller account is not authorized to perform an operation."
									},
									"errorSelector": "118cdaa7",
									"id": 30,
									"name": "OwnableUnauthorizedAccount",
									"nameLocation": "1453:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 28,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1488:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "1480:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 27,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1480:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1479:17:0"
									},
									"src": "1447:50:0"
								},
								{
									"documentation": {
										"id": 31,
										"nodeType": "StructuredDocumentation",
										"src": "1503:82:0",
										"text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
									},
									"errorSelector": "1e4fbdf7",
									"id": 35,
									"name": "OwnableInvalidOwner",
									"nameLocation": "1596:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 33,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1624:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 35,
												"src": "1616:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 32,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1616:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1615:15:0"
									},
									"src": "1590:41:0"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 41,
									"name": "OwnershipTransferred",
									"nameLocation": "1643:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 37,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "1680:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 41,
												"src": "1664:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 36,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1664:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1711:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 41,
												"src": "1695:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 38,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1695:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1663:57:0"
									},
									"src": "1637:84:0"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "1919:55:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 50,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 44,
															"src": "1954:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 49,
														"name": "__Ownable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 81,
														"src": "1929:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 51,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1929:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 52,
												"nodeType": "ExpressionStatement",
												"src": "1929:38:0"
											}
										]
									},
									"documentation": {
										"id": 42,
										"nodeType": "StructuredDocumentation",
										"src": "1727:115:0",
										"text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
									},
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 47,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 46,
												"name": "onlyInitializing",
												"nameLocations": [
													"1902:16:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "1902:16:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1902:16:0"
										}
									],
									"name": "__Ownable_init",
									"nameLocation": "1856:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 45,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 44,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "1879:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1871:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 43,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1871:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1870:22:0"
									},
									"returnParameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1919:0:0"
									},
									"scope": 194,
									"src": "1847:127:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 80,
										"nodeType": "Block",
										"src": "2062:153:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 66,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 61,
														"name": "initialOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 56,
														"src": "2076:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 64,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2100:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 63,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2092:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 62,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2092:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 65,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2092:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2076:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 75,
												"nodeType": "IfStatement",
												"src": "2072:95:0",
												"trueBody": {
													"id": 74,
													"nodeType": "Block",
													"src": "2104:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 70,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2153:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 69,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2145:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 68,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2145:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 71,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2145:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 67,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 35,
																	"src": "2125:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 72,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2125:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 73,
															"nodeType": "RevertStatement",
															"src": "2118:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 77,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 56,
															"src": "2195:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 76,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 193,
														"src": "2176:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 78,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2176:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 79,
												"nodeType": "ExpressionStatement",
												"src": "2176:32:0"
											}
										]
									},
									"id": 81,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 59,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 58,
												"name": "onlyInitializing",
												"nameLocations": [
													"2045:16:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "2045:16:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2045:16:0"
										}
									],
									"name": "__Ownable_init_unchained",
									"nameLocation": "1989:24:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 57,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 56,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "2022:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 81,
												"src": "2014:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 55,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2014:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2013:22:0"
									},
									"returnParameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2062:0:0"
									},
									"scope": 194,
									"src": "1980:235:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 88,
										"nodeType": "Block",
										"src": "2324:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 84,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 122,
														"src": "2334:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 85,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2334:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 86,
												"nodeType": "ExpressionStatement",
												"src": "2334:13:0"
											},
											{
												"id": 87,
												"nodeType": "PlaceholderStatement",
												"src": "2357:1:0"
											}
										]
									},
									"documentation": {
										"id": 82,
										"nodeType": "StructuredDocumentation",
										"src": "2221:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 89,
									"name": "onlyOwner",
									"nameLocation": "2312:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 83,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2321:2:0"
									},
									"src": "2303:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 104,
										"nodeType": "Block",
										"src": "2496:89:0",
										"statements": [
											{
												"assignments": [
													97
												],
												"declarations": [
													{
														"constant": false,
														"id": 97,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "2529:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 104,
														"src": "2506:24:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
															"typeString": "struct OwnableUpgradeable.OwnableStorage"
														},
														"typeName": {
															"id": 96,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 95,
																"name": "OwnableStorage",
																"nameLocations": [
																	"2506:14:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 14,
																"src": "2506:14:0"
															},
															"referencedDeclaration": 14,
															"src": "2506:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
																"typeString": "struct OwnableUpgradeable.OwnableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 100,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 98,
														"name": "_getOwnableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 25,
														"src": "2533:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_OwnableStorage_$14_storage_ptr_$",
															"typeString": "function () pure returns (struct OwnableUpgradeable.OwnableStorage storage pointer)"
														}
													},
													"id": 99,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2533:20:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
														"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2506:47:0"
											},
											{
												"expression": {
													"expression": {
														"id": 101,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 97,
														"src": "2570:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
															"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
														}
													},
													"id": 102,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2572:6:0",
													"memberName": "_owner",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 13,
													"src": "2570:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 94,
												"id": 103,
												"nodeType": "Return",
												"src": "2563:15:0"
											}
										]
									},
									"documentation": {
										"id": 90,
										"nodeType": "StructuredDocumentation",
										"src": "2371:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 105,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "2450:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 91,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2455:2:0"
									},
									"returnParameters": {
										"id": 94,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 93,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 105,
												"src": "2487:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 92,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2487:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2486:9:0"
									},
									"scope": 194,
									"src": "2441:144:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 121,
										"nodeType": "Block",
										"src": "2703:117:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 113,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 109,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 105,
															"src": "2717:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 110,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2717:7:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 111,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1107,
															"src": "2728:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 112,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2728:12:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2717:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 120,
												"nodeType": "IfStatement",
												"src": "2713:101:0",
												"trueBody": {
													"id": 119,
													"nodeType": "Block",
													"src": "2742:72:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 115,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1107,
																			"src": "2790:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 116,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2790:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 114,
																	"name": "OwnableUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 30,
																	"src": "2763:26:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 117,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2763:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 118,
															"nodeType": "RevertStatement",
															"src": "2756:47:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 106,
										"nodeType": "StructuredDocumentation",
										"src": "2591:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 122,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "2667:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 107,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2678:2:0"
									},
									"returnParameters": {
										"id": 108,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2703:0:0"
									},
									"scope": 194,
									"src": "2658:162:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 135,
										"nodeType": "Block",
										"src": "3209:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 131,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3246:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 130,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3238:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 129,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3238:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 132,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3238:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 128,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 193,
														"src": "3219:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 133,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3219:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 134,
												"nodeType": "ExpressionStatement",
												"src": "3219:30:0"
											}
										]
									},
									"documentation": {
										"id": 123,
										"nodeType": "StructuredDocumentation",
										"src": "2826:324:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 136,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 126,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 125,
												"name": "onlyOwner",
												"nameLocations": [
													"3199:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 89,
												"src": "3199:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "3199:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "3164:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 124,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3181:2:0"
									},
									"returnParameters": {
										"id": 127,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3209:0:0"
									},
									"scope": 194,
									"src": "3155:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 163,
										"nodeType": "Block",
										"src": "3475:145:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 149,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 144,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 139,
														"src": "3489:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 147,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3509:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 146,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3501:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 145,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3501:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 148,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3501:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3489:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 158,
												"nodeType": "IfStatement",
												"src": "3485:91:0",
												"trueBody": {
													"id": 157,
													"nodeType": "Block",
													"src": "3513:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 153,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3562:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 152,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3554:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 151,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "3554:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 154,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3554:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 150,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 35,
																	"src": "3534:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 155,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3534:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 156,
															"nodeType": "RevertStatement",
															"src": "3527:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 160,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 139,
															"src": "3604:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 159,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 193,
														"src": "3585:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 161,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3585:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 162,
												"nodeType": "ExpressionStatement",
												"src": "3585:28:0"
											}
										]
									},
									"documentation": {
										"id": 137,
										"nodeType": "StructuredDocumentation",
										"src": "3262:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 164,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 142,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 141,
												"name": "onlyOwner",
												"nameLocations": [
													"3465:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 89,
												"src": "3465:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "3465:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "3414:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 140,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 139,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "3440:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 164,
												"src": "3432:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 138,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3432:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3431:18:0"
									},
									"returnParameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3475:0:0"
									},
									"scope": 194,
									"src": "3405:215:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 192,
										"nodeType": "Block",
										"src": "3837:185:0",
										"statements": [
											{
												"assignments": [
													172
												],
												"declarations": [
													{
														"constant": false,
														"id": 172,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "3870:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 192,
														"src": "3847:24:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
															"typeString": "struct OwnableUpgradeable.OwnableStorage"
														},
														"typeName": {
															"id": 171,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 170,
																"name": "OwnableStorage",
																"nameLocations": [
																	"3847:14:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 14,
																"src": "3847:14:0"
															},
															"referencedDeclaration": 14,
															"src": "3847:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
																"typeString": "struct OwnableUpgradeable.OwnableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 175,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 173,
														"name": "_getOwnableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 25,
														"src": "3874:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_OwnableStorage_$14_storage_ptr_$",
															"typeString": "function () pure returns (struct OwnableUpgradeable.OwnableStorage storage pointer)"
														}
													},
													"id": 174,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3874:20:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
														"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3847:47:0"
											},
											{
												"assignments": [
													177
												],
												"declarations": [
													{
														"constant": false,
														"id": 177,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "3912:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 192,
														"src": "3904:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 176,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3904:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 180,
												"initialValue": {
													"expression": {
														"id": 178,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 172,
														"src": "3923:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
															"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
														}
													},
													"id": 179,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3925:6:0",
													"memberName": "_owner",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 13,
													"src": "3923:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3904:27:0"
											},
											{
												"expression": {
													"id": 185,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 181,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 172,
															"src": "3941:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_OwnableStorage_$14_storage_ptr",
																"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
															}
														},
														"id": 183,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "3943:6:0",
														"memberName": "_owner",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 13,
														"src": "3941:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 184,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 167,
														"src": "3952:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3941:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 186,
												"nodeType": "ExpressionStatement",
												"src": "3941:19:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 188,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 177,
															"src": "3996:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 189,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 167,
															"src": "4006:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 187,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 41,
														"src": "3975:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 190,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3975:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 191,
												"nodeType": "EmitStatement",
												"src": "3970:45:0"
											}
										]
									},
									"documentation": {
										"id": 165,
										"nodeType": "StructuredDocumentation",
										"src": "3626:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 193,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "3783:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 168,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 167,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "3810:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "3802:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 166,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3802:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3801:18:0"
									},
									"returnParameters": {
										"id": 169,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3837:0:0"
									},
									"scope": 194,
									"src": "3774:248:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 195,
							"src": "749:3275:0",
							"usedErrors": [
								30,
								35,
								211,
								214
							],
							"usedEvents": [
								41,
								219
							]
						}
					],
					"src": "102:3923:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
					"exportedSymbols": {
						"Initializable": [
							462
						]
					},
					"id": 463,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 196,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "113:24:1"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Initializable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 197,
								"nodeType": "StructuredDocumentation",
								"src": "139:2209:1",
								"text": " @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="
							},
							"fullyImplemented": true,
							"id": 462,
							"linearizedBaseContracts": [
								462
							],
							"name": "Initializable",
							"nameLocation": "2367:13:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Initializable.InitializableStorage",
									"documentation": {
										"id": 198,
										"nodeType": "StructuredDocumentation",
										"src": "2387:293:1",
										"text": " @dev Storage of the initializable contract.\n It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n when using with upgradeable contracts.\n @custom:storage-location erc7201:openzeppelin.storage.Initializable"
									},
									"id": 205,
									"members": [
										{
											"constant": false,
											"id": 201,
											"mutability": "mutable",
											"name": "_initialized",
											"nameLocation": "2820:12:1",
											"nodeType": "VariableDeclaration",
											"scope": 205,
											"src": "2813:19:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 200,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2813:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 204,
											"mutability": "mutable",
											"name": "_initializing",
											"nameLocation": "2955:13:1",
											"nodeType": "VariableDeclaration",
											"scope": 205,
											"src": "2950:18:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 203,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "2950:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "InitializableStorage",
									"nameLocation": "2692:20:1",
									"nodeType": "StructDefinition",
									"scope": 462,
									"src": "2685:290:1",
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 208,
									"mutability": "constant",
									"name": "INITIALIZABLE_STORAGE",
									"nameLocation": "3123:21:1",
									"nodeType": "VariableDeclaration",
									"scope": 462,
									"src": "3098:115:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 206,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "3098:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307866306335376531363834306466303430663135303838646332663831666533393163333932336265633733653233613936363265666339633232396336613030",
										"id": 207,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "3147:66:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_108904022758810753673719992590105913556127789646572562039383141376366747609600_by_1",
											"typeString": "int_const 1089...(70 digits omitted)...9600"
										},
										"value": "0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00"
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 209,
										"nodeType": "StructuredDocumentation",
										"src": "3220:60:1",
										"text": " @dev The contract is already initialized."
									},
									"errorSelector": "f92ee8a9",
									"id": 211,
									"name": "InvalidInitialization",
									"nameLocation": "3291:21:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 210,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3312:2:1"
									},
									"src": "3285:30:1"
								},
								{
									"documentation": {
										"id": 212,
										"nodeType": "StructuredDocumentation",
										"src": "3321:57:1",
										"text": " @dev The contract is not initializing."
									},
									"errorSelector": "d7e6bcf8",
									"id": 214,
									"name": "NotInitializing",
									"nameLocation": "3389:15:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 213,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3404:2:1"
									},
									"src": "3383:24:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 215,
										"nodeType": "StructuredDocumentation",
										"src": "3413:90:1",
										"text": " @dev Triggered when the contract has been initialized or reinitialized."
									},
									"eventSelector": "c7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2",
									"id": 219,
									"name": "Initialized",
									"nameLocation": "3514:11:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 217,
												"indexed": false,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "3533:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "3526:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 216,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "3526:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3525:16:1"
									},
									"src": "3508:34:1"
								},
								{
									"body": {
										"id": 301,
										"nodeType": "Block",
										"src": "4092:1079:1",
										"statements": [
											{
												"assignments": [
													224
												],
												"declarations": [
													{
														"constant": false,
														"id": 224,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "4187:1:1",
														"nodeType": "VariableDeclaration",
														"scope": 301,
														"src": "4158:30:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage"
														},
														"typeName": {
															"id": 223,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 222,
																"name": "InitializableStorage",
																"nameLocations": [
																	"4158:20:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 205,
																"src": "4158:20:1"
															},
															"referencedDeclaration": 205,
															"src": "4158:20:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 227,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 225,
														"name": "_getInitializableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 461,
														"src": "4191:24:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$205_storage_ptr_$",
															"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
														}
													},
													"id": 226,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4191:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4158:59:1"
											},
											{
												"assignments": [
													229
												],
												"declarations": [
													{
														"constant": false,
														"id": 229,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nameLocation": "4284:14:1",
														"nodeType": "VariableDeclaration",
														"scope": 301,
														"src": "4279:19:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 228,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4279:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 233,
												"initialValue": {
													"id": 232,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4301:16:1",
													"subExpression": {
														"expression": {
															"id": 230,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 224,
															"src": "4302:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 231,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4304:13:1",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 204,
														"src": "4302:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4279:38:1"
											},
											{
												"assignments": [
													235
												],
												"declarations": [
													{
														"constant": false,
														"id": 235,
														"mutability": "mutable",
														"name": "initialized",
														"nameLocation": "4334:11:1",
														"nodeType": "VariableDeclaration",
														"scope": 301,
														"src": "4327:18:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"typeName": {
															"id": 234,
															"name": "uint64",
															"nodeType": "ElementaryTypeName",
															"src": "4327:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 238,
												"initialValue": {
													"expression": {
														"id": 236,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 224,
														"src": "4348:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 237,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "4350:12:1",
													"memberName": "_initialized",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 201,
													"src": "4348:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4327:35:1"
											},
											{
												"assignments": [
													240
												],
												"declarations": [
													{
														"constant": false,
														"id": 240,
														"mutability": "mutable",
														"name": "initialSetup",
														"nameLocation": "4709:12:1",
														"nodeType": "VariableDeclaration",
														"scope": 301,
														"src": "4704:17:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 239,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4704:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 246,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 245,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"id": 243,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 241,
															"name": "initialized",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 235,
															"src": "4724:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 242,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4739:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "4724:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 244,
														"name": "isTopLevelCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 229,
														"src": "4744:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4724:34:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4704:54:1"
											},
											{
												"assignments": [
													248
												],
												"declarations": [
													{
														"constant": false,
														"id": 248,
														"mutability": "mutable",
														"name": "construction",
														"nameLocation": "4773:12:1",
														"nodeType": "VariableDeclaration",
														"scope": 301,
														"src": "4768:17:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 247,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4768:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 261,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 260,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"id": 251,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 249,
															"name": "initialized",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 235,
															"src": "4788:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "31",
															"id": 250,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4803:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "4788:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 259,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 254,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4816:4:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Initializable_$462",
																				"typeString": "contract Initializable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Initializable_$462",
																				"typeString": "contract Initializable"
																			}
																		],
																		"id": 253,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4808:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 252,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4808:7:1",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 255,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4808:13:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 256,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4822:4:1",
																"memberName": "code",
																"nodeType": "MemberAccess",
																"src": "4808:18:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 257,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4827:6:1",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "4808:25:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 258,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4837:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "4808:30:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4788:50:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4768:70:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 266,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 263,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "4853:13:1",
														"subExpression": {
															"id": 262,
															"name": "initialSetup",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 240,
															"src": "4854:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 265,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "4870:13:1",
														"subExpression": {
															"id": 264,
															"name": "construction",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 248,
															"src": "4871:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4853:30:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 271,
												"nodeType": "IfStatement",
												"src": "4849:91:1",
												"trueBody": {
													"id": 270,
													"nodeType": "Block",
													"src": "4885:55:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 267,
																	"name": "InvalidInitialization",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 211,
																	"src": "4906:21:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 268,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4906:23:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 269,
															"nodeType": "RevertStatement",
															"src": "4899:30:1"
														}
													]
												}
											},
											{
												"expression": {
													"id": 276,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 272,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 224,
															"src": "4949:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 274,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "4951:12:1",
														"memberName": "_initialized",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 201,
														"src": "4949:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 275,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4966:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "4949:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 277,
												"nodeType": "ExpressionStatement",
												"src": "4949:18:1"
											},
											{
												"condition": {
													"id": 278,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 229,
													"src": "4981:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 286,
												"nodeType": "IfStatement",
												"src": "4977:67:1",
												"trueBody": {
													"id": 285,
													"nodeType": "Block",
													"src": "4997:47:1",
													"statements": [
														{
															"expression": {
																"id": 283,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 279,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 224,
																		"src": "5011:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																			"typeString": "struct Initializable.InitializableStorage storage pointer"
																		}
																	},
																	"id": 281,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "5013:13:1",
																	"memberName": "_initializing",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 204,
																	"src": "5011:15:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 282,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5029:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "5011:22:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 284,
															"nodeType": "ExpressionStatement",
															"src": "5011:22:1"
														}
													]
												}
											},
											{
												"id": 287,
												"nodeType": "PlaceholderStatement",
												"src": "5053:1:1"
											},
											{
												"condition": {
													"id": 288,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 229,
													"src": "5068:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 300,
												"nodeType": "IfStatement",
												"src": "5064:101:1",
												"trueBody": {
													"id": 299,
													"nodeType": "Block",
													"src": "5084:81:1",
													"statements": [
														{
															"expression": {
																"id": 293,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 289,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 224,
																		"src": "5098:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																			"typeString": "struct Initializable.InitializableStorage storage pointer"
																		}
																	},
																	"id": 291,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "5100:13:1",
																	"memberName": "_initializing",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 204,
																	"src": "5098:15:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 292,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5116:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "5098:23:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 294,
															"nodeType": "ExpressionStatement",
															"src": "5098:23:1"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"hexValue": "31",
																		"id": 296,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5152:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		}
																	],
																	"id": 295,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 219,
																	"src": "5140:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$returns$__$",
																		"typeString": "function (uint64)"
																	}
																},
																"id": 297,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5140:14:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 298,
															"nodeType": "EmitStatement",
															"src": "5135:19:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 220,
										"nodeType": "StructuredDocumentation",
										"src": "3548:516:1",
										"text": " @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n production.\n Emits an {Initialized} event."
									},
									"id": 302,
									"name": "initializer",
									"nameLocation": "4078:11:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4089:2:1"
									},
									"src": "4069:1102:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 348,
										"nodeType": "Block",
										"src": "6289:392:1",
										"statements": [
											{
												"assignments": [
													309
												],
												"declarations": [
													{
														"constant": false,
														"id": 309,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "6384:1:1",
														"nodeType": "VariableDeclaration",
														"scope": 348,
														"src": "6355:30:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage"
														},
														"typeName": {
															"id": 308,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 307,
																"name": "InitializableStorage",
																"nameLocations": [
																	"6355:20:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 205,
																"src": "6355:20:1"
															},
															"referencedDeclaration": 205,
															"src": "6355:20:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 312,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 310,
														"name": "_getInitializableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 461,
														"src": "6388:24:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$205_storage_ptr_$",
															"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
														}
													},
													"id": 311,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6388:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6355:59:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 319,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 313,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 309,
															"src": "6429:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 314,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6431:13:1",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 204,
														"src": "6429:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"id": 318,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 315,
																"name": "$",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 309,
																"src": "6448:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																	"typeString": "struct Initializable.InitializableStorage storage pointer"
																}
															},
															"id": 316,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6450:12:1",
															"memberName": "_initialized",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 201,
															"src": "6448:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">=",
														"rightExpression": {
															"id": 317,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 305,
															"src": "6466:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"src": "6448:25:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "6429:44:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 324,
												"nodeType": "IfStatement",
												"src": "6425:105:1",
												"trueBody": {
													"id": 323,
													"nodeType": "Block",
													"src": "6475:55:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 320,
																	"name": "InvalidInitialization",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 211,
																	"src": "6496:21:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 321,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6496:23:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 322,
															"nodeType": "RevertStatement",
															"src": "6489:30:1"
														}
													]
												}
											},
											{
												"expression": {
													"id": 329,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 325,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 309,
															"src": "6539:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 327,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6541:12:1",
														"memberName": "_initialized",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 201,
														"src": "6539:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 328,
														"name": "version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 305,
														"src": "6556:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "6539:24:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 330,
												"nodeType": "ExpressionStatement",
												"src": "6539:24:1"
											},
											{
												"expression": {
													"id": 335,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 331,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 309,
															"src": "6573:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 333,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6575:13:1",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 204,
														"src": "6573:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 334,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6591:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "6573:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 336,
												"nodeType": "ExpressionStatement",
												"src": "6573:22:1"
											},
											{
												"id": 337,
												"nodeType": "PlaceholderStatement",
												"src": "6605:1:1"
											},
											{
												"expression": {
													"id": 342,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 338,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 309,
															"src": "6616:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 340,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6618:13:1",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 204,
														"src": "6616:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 341,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6634:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "6616:23:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 343,
												"nodeType": "ExpressionStatement",
												"src": "6616:23:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 345,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 305,
															"src": "6666:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 344,
														"name": "Initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 219,
														"src": "6654:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$returns$__$",
															"typeString": "function (uint64)"
														}
													},
													"id": 346,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6654:20:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 347,
												"nodeType": "EmitStatement",
												"src": "6649:25:1"
											}
										]
									},
									"documentation": {
										"id": 303,
										"nodeType": "StructuredDocumentation",
										"src": "5177:1068:1",
										"text": " @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n Emits an {Initialized} event."
									},
									"id": 349,
									"name": "reinitializer",
									"nameLocation": "6259:13:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 306,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 305,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "6280:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "6273:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 304,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "6273:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6272:16:1"
									},
									"src": "6250:431:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 356,
										"nodeType": "Block",
										"src": "6919:48:1",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 352,
														"name": "_checkInitializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 370,
														"src": "6929:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 353,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6929:20:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 354,
												"nodeType": "ExpressionStatement",
												"src": "6929:20:1"
											},
											{
												"id": 355,
												"nodeType": "PlaceholderStatement",
												"src": "6959:1:1"
											}
										]
									},
									"documentation": {
										"id": 350,
										"nodeType": "StructuredDocumentation",
										"src": "6687:199:1",
										"text": " @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."
									},
									"id": 357,
									"name": "onlyInitializing",
									"nameLocation": "6900:16:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 351,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6916:2:1"
									},
									"src": "6891:76:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 369,
										"nodeType": "Block",
										"src": "7134:89:1",
										"statements": [
											{
												"condition": {
													"id": 363,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "7148:18:1",
													"subExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 361,
															"name": "_isInitializing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 438,
															"src": "7149:15:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																"typeString": "function () view returns (bool)"
															}
														},
														"id": 362,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7149:17:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 368,
												"nodeType": "IfStatement",
												"src": "7144:73:1",
												"trueBody": {
													"id": 367,
													"nodeType": "Block",
													"src": "7168:49:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 364,
																	"name": "NotInitializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 214,
																	"src": "7189:15:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 365,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7189:17:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 366,
															"nodeType": "RevertStatement",
															"src": "7182:24:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 358,
										"nodeType": "StructuredDocumentation",
										"src": "6973:104:1",
										"text": " @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}."
									},
									"id": 370,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkInitializing",
									"nameLocation": "7091:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 359,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7109:2:1"
									},
									"returnParameters": {
										"id": 360,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7134:0:1"
									},
									"scope": 462,
									"src": "7082:141:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 415,
										"nodeType": "Block",
										"src": "7758:373:1",
										"statements": [
											{
												"assignments": [
													376
												],
												"declarations": [
													{
														"constant": false,
														"id": 376,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "7853:1:1",
														"nodeType": "VariableDeclaration",
														"scope": 415,
														"src": "7824:30:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage"
														},
														"typeName": {
															"id": 375,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 374,
																"name": "InitializableStorage",
																"nameLocations": [
																	"7824:20:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 205,
																"src": "7824:20:1"
															},
															"referencedDeclaration": 205,
															"src": "7824:20:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 379,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 377,
														"name": "_getInitializableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 461,
														"src": "7857:24:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$205_storage_ptr_$",
															"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
														}
													},
													"id": 378,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7857:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7824:59:1"
											},
											{
												"condition": {
													"expression": {
														"id": 380,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 376,
														"src": "7898:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 381,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "7900:13:1",
													"memberName": "_initializing",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 204,
													"src": "7898:15:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 386,
												"nodeType": "IfStatement",
												"src": "7894:76:1",
												"trueBody": {
													"id": 385,
													"nodeType": "Block",
													"src": "7915:55:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 382,
																	"name": "InvalidInitialization",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 211,
																	"src": "7936:21:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 383,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7936:23:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 384,
															"nodeType": "RevertStatement",
															"src": "7929:30:1"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													},
													"id": 394,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 387,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 376,
															"src": "7983:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 388,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7985:12:1",
														"memberName": "_initialized",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 201,
														"src": "7983:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 391,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8006:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 390,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "8006:6:1",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	}
																],
																"id": 389,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "8001:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 392,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8001:12:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint64",
																"typeString": "type(uint64)"
															}
														},
														"id": 393,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "8014:3:1",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "8001:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "7983:34:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 414,
												"nodeType": "IfStatement",
												"src": "7979:146:1",
												"trueBody": {
													"id": 413,
													"nodeType": "Block",
													"src": "8019:106:1",
													"statements": [
														{
															"expression": {
																"id": 403,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 395,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 376,
																		"src": "8033:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
																			"typeString": "struct Initializable.InitializableStorage storage pointer"
																		}
																	},
																	"id": 397,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "8035:12:1",
																	"memberName": "_initialized",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 201,
																	"src": "8033:14:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 400,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8055:6:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint64_$",
																					"typeString": "type(uint64)"
																				},
																				"typeName": {
																					"id": 399,
																					"name": "uint64",
																					"nodeType": "ElementaryTypeName",
																					"src": "8055:6:1",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_type$_t_uint64_$",
																					"typeString": "type(uint64)"
																				}
																			],
																			"id": 398,
																			"name": "type",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967269,
																			"src": "8050:4:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 401,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8050:12:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_meta_type_t_uint64",
																			"typeString": "type(uint64)"
																		}
																	},
																	"id": 402,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "8063:3:1",
																	"memberName": "max",
																	"nodeType": "MemberAccess",
																	"src": "8050:16:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"src": "8033:33:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"id": 404,
															"nodeType": "ExpressionStatement",
															"src": "8033:33:1"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 408,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "8102:6:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint64_$",
																						"typeString": "type(uint64)"
																					},
																					"typeName": {
																						"id": 407,
																						"name": "uint64",
																						"nodeType": "ElementaryTypeName",
																						"src": "8102:6:1",
																						"typeDescriptions": {}
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_type$_t_uint64_$",
																						"typeString": "type(uint64)"
																					}
																				],
																				"id": 406,
																				"name": "type",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967269,
																				"src": "8097:4:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 409,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8097:12:1",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_meta_type_t_uint64",
																				"typeString": "type(uint64)"
																			}
																		},
																		"id": 410,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "8110:3:1",
																		"memberName": "max",
																		"nodeType": "MemberAccess",
																		"src": "8097:16:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint64",
																			"typeString": "uint64"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint64",
																			"typeString": "uint64"
																		}
																	],
																	"id": 405,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 219,
																	"src": "8085:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$returns$__$",
																		"typeString": "function (uint64)"
																	}
																},
																"id": 411,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8085:29:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 412,
															"nodeType": "EmitStatement",
															"src": "8080:34:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 371,
										"nodeType": "StructuredDocumentation",
										"src": "7229:475:1",
										"text": " @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."
									},
									"id": 416,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_disableInitializers",
									"nameLocation": "7718:20:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 372,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7738:2:1"
									},
									"returnParameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7758:0:1"
									},
									"scope": 462,
									"src": "7709:422:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 426,
										"nodeType": "Block",
										"src": "8306:63:1",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 422,
															"name": "_getInitializableStorage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 461,
															"src": "8323:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$205_storage_ptr_$",
																"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
															}
														},
														"id": 423,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8323:26:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 424,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "8350:12:1",
													"memberName": "_initialized",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 201,
													"src": "8323:39:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"functionReturnParameters": 421,
												"id": 425,
												"nodeType": "Return",
												"src": "8316:46:1"
											}
										]
									},
									"documentation": {
										"id": 417,
										"nodeType": "StructuredDocumentation",
										"src": "8137:99:1",
										"text": " @dev Returns the highest version that has been initialized. See {reinitializer}."
									},
									"id": 427,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getInitializedVersion",
									"nameLocation": "8250:22:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 418,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8272:2:1"
									},
									"returnParameters": {
										"id": 421,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 420,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 427,
												"src": "8298:6:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 419,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "8298:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8297:8:1"
									},
									"scope": 462,
									"src": "8241:128:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 437,
										"nodeType": "Block",
										"src": "8541:64:1",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 433,
															"name": "_getInitializableStorage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 461,
															"src": "8558:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$205_storage_ptr_$",
																"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
															}
														},
														"id": 434,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8558:26:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 435,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "8585:13:1",
													"memberName": "_initializing",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 204,
													"src": "8558:40:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 432,
												"id": 436,
												"nodeType": "Return",
												"src": "8551:47:1"
											}
										]
									},
									"documentation": {
										"id": 428,
										"nodeType": "StructuredDocumentation",
										"src": "8375:105:1",
										"text": " @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."
									},
									"id": 438,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isInitializing",
									"nameLocation": "8494:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 429,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8509:2:1"
									},
									"returnParameters": {
										"id": 432,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 431,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 438,
												"src": "8535:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 430,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8535:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8534:6:1"
									},
									"scope": 462,
									"src": "8485:120:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 446,
										"nodeType": "Block",
										"src": "8896:45:1",
										"statements": [
											{
												"expression": {
													"id": 444,
													"name": "INITIALIZABLE_STORAGE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 208,
													"src": "8913:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 443,
												"id": 445,
												"nodeType": "Return",
												"src": "8906:28:1"
											}
										]
									},
									"documentation": {
										"id": 439,
										"nodeType": "StructuredDocumentation",
										"src": "8611:203:1",
										"text": " @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\n NOTE: Consider following the ERC-7201 formula to derive storage locations."
									},
									"id": 447,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_initializableStorageSlot",
									"nameLocation": "8828:25:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 440,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8853:2:1"
									},
									"returnParameters": {
										"id": 443,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 442,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 447,
												"src": "8887:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 441,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8887:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8886:9:1"
									},
									"scope": 462,
									"src": "8819:122:1",
									"stateMutability": "pure",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 460,
										"nodeType": "Block",
										"src": "9161:115:1",
										"statements": [
											{
												"assignments": [
													455
												],
												"declarations": [
													{
														"constant": false,
														"id": 455,
														"mutability": "mutable",
														"name": "slot",
														"nameLocation": "9179:4:1",
														"nodeType": "VariableDeclaration",
														"scope": 460,
														"src": "9171:12:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 454,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "9171:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 458,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 456,
														"name": "_initializableStorageSlot",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 447,
														"src": "9186:25:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_bytes32_$",
															"typeString": "function () pure returns (bytes32)"
														}
													},
													"id": 457,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9186:27:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9171:42:1"
											},
											{
												"AST": {
													"nativeSrc": "9232:38:1",
													"nodeType": "YulBlock",
													"src": "9232:38:1",
													"statements": [
														{
															"nativeSrc": "9246:14:1",
															"nodeType": "YulAssignment",
															"src": "9246:14:1",
															"value": {
																"name": "slot",
																"nativeSrc": "9256:4:1",
																"nodeType": "YulIdentifier",
																"src": "9256:4:1"
															},
															"variableNames": [
																{
																	"name": "$.slot",
																	"nativeSrc": "9246:6:1",
																	"nodeType": "YulIdentifier",
																	"src": "9246:6:1"
																}
															]
														}
													]
												},
												"evmVersion": "prague",
												"externalReferences": [
													{
														"declaration": 452,
														"isOffset": false,
														"isSlot": true,
														"src": "9246:6:1",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 455,
														"isOffset": false,
														"isSlot": false,
														"src": "9256:4:1",
														"valueSize": 1
													}
												],
												"id": 459,
												"nodeType": "InlineAssembly",
												"src": "9223:47:1"
											}
										]
									},
									"documentation": {
										"id": 448,
										"nodeType": "StructuredDocumentation",
										"src": "8947:67:1",
										"text": " @dev Returns a pointer to the storage namespace."
									},
									"id": 461,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getInitializableStorage",
									"nameLocation": "9080:24:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 449,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9104:2:1"
									},
									"returnParameters": {
										"id": 453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 452,
												"mutability": "mutable",
												"name": "$",
												"nameLocation": "9158:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 461,
												"src": "9129:30:1",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
													"typeString": "struct Initializable.InitializableStorage"
												},
												"typeName": {
													"id": 451,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 450,
														"name": "InitializableStorage",
														"nameLocations": [
															"9129:20:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 205,
														"src": "9129:20:1"
													},
													"referencedDeclaration": 205,
													"src": "9129:20:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$205_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9128:32:1"
									},
									"scope": 462,
									"src": "9071:205:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 463,
							"src": "2349:6929:1",
							"usedErrors": [
								211,
								214
							],
							"usedEvents": [
								219
							]
						}
					],
					"src": "113:9166:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							1125
						],
						"ERC20Upgradeable": [
							1079
						],
						"IERC20": [
							1340
						],
						"IERC20Errors": [
							1167
						],
						"IERC20Metadata": [
							1366
						],
						"Initializable": [
							462
						]
					},
					"id": 1080,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 464,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "105:24:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 466,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1080,
							"sourceUnit": 1341,
							"src": "131:70:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 465,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1340,
										"src": "139:6:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"id": 468,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1080,
							"sourceUnit": 1367,
							"src": "202:97:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 467,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1366,
										"src": "210:14:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../../utils/ContextUpgradeable.sol",
							"id": 470,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1080,
							"sourceUnit": 1126,
							"src": "300:70:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 469,
										"name": "ContextUpgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1125,
										"src": "308:18:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
							"file": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
							"id": 472,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1080,
							"sourceUnit": 1263,
							"src": "371:83:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 471,
										"name": "IERC20Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1167,
										"src": "379:12:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../../proxy/utils/Initializable.sol",
							"id": 474,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1080,
							"sourceUnit": 463,
							"src": "455:66:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 473,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 462,
										"src": "463:13:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 476,
										"name": "Initializable",
										"nameLocations": [
											"1319:13:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 462,
										"src": "1319:13:2"
									},
									"id": 477,
									"nodeType": "InheritanceSpecifier",
									"src": "1319:13:2"
								},
								{
									"baseName": {
										"id": 478,
										"name": "ContextUpgradeable",
										"nameLocations": [
											"1334:18:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1125,
										"src": "1334:18:2"
									},
									"id": 479,
									"nodeType": "InheritanceSpecifier",
									"src": "1334:18:2"
								},
								{
									"baseName": {
										"id": 480,
										"name": "IERC20",
										"nameLocations": [
											"1354:6:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1340,
										"src": "1354:6:2"
									},
									"id": 481,
									"nodeType": "InheritanceSpecifier",
									"src": "1354:6:2"
								},
								{
									"baseName": {
										"id": 482,
										"name": "IERC20Metadata",
										"nameLocations": [
											"1362:14:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1366,
										"src": "1362:14:2"
									},
									"id": 483,
									"nodeType": "InheritanceSpecifier",
									"src": "1362:14:2"
								},
								{
									"baseName": {
										"id": 484,
										"name": "IERC20Errors",
										"nameLocations": [
											"1378:12:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1167,
										"src": "1378:12:2"
									},
									"id": 485,
									"nodeType": "InheritanceSpecifier",
									"src": "1378:12:2"
								}
							],
							"canonicalName": "ERC20Upgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 475,
								"nodeType": "StructuredDocumentation",
								"src": "523:757:2",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC-20\n applications."
							},
							"fullyImplemented": true,
							"id": 1079,
							"linearizedBaseContracts": [
								1079,
								1167,
								1366,
								1340,
								1125,
								462
							],
							"name": "ERC20Upgradeable",
							"nameLocation": "1299:16:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ERC20Upgradeable.ERC20Storage",
									"documentation": {
										"id": 486,
										"nodeType": "StructuredDocumentation",
										"src": "1397:63:2",
										"text": "@custom:storage-location erc7201:openzeppelin.storage.ERC20"
									},
									"id": 503,
									"members": [
										{
											"constant": false,
											"id": 490,
											"mutability": "mutable",
											"name": "_balances",
											"nameLocation": "1531:9:2",
											"nodeType": "VariableDeclaration",
											"scope": 503,
											"src": "1495:45:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"typeName": {
												"id": 489,
												"keyName": "account",
												"keyNameLocation": "1511:7:2",
												"keyType": {
													"id": 487,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1503:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "Mapping",
												"src": "1495:35:2",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
													"typeString": "mapping(address => uint256)"
												},
												"valueName": "",
												"valueNameLocation": "-1:-1:-1",
												"valueType": {
													"id": 488,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1522:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 496,
											"mutability": "mutable",
											"name": "_allowances",
											"nameLocation": "1615:11:2",
											"nodeType": "VariableDeclaration",
											"scope": 503,
											"src": "1551:75:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
												"typeString": "mapping(address => mapping(address => uint256))"
											},
											"typeName": {
												"id": 495,
												"keyName": "account",
												"keyNameLocation": "1567:7:2",
												"keyType": {
													"id": 491,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1559:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "Mapping",
												"src": "1551:63:2",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
													"typeString": "mapping(address => mapping(address => uint256))"
												},
												"valueName": "",
												"valueNameLocation": "-1:-1:-1",
												"valueType": {
													"id": 494,
													"keyName": "spender",
													"keyNameLocation": "1594:7:2",
													"keyType": {
														"id": 492,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "1586:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Mapping",
													"src": "1578:35:2",
													"typeDescriptions": {
														"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
														"typeString": "mapping(address => uint256)"
													},
													"valueName": "",
													"valueNameLocation": "-1:-1:-1",
													"valueType": {
														"id": 493,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "1605:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													}
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 498,
											"mutability": "mutable",
											"name": "_totalSupply",
											"nameLocation": "1645:12:2",
											"nodeType": "VariableDeclaration",
											"scope": 503,
											"src": "1637:20:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 497,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1637:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 500,
											"mutability": "mutable",
											"name": "_name",
											"nameLocation": "1675:5:2",
											"nodeType": "VariableDeclaration",
											"scope": 503,
											"src": "1668:12:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 499,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "1668:6:2",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 502,
											"mutability": "mutable",
											"name": "_symbol",
											"nameLocation": "1697:7:2",
											"nodeType": "VariableDeclaration",
											"scope": 503,
											"src": "1690:14:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 501,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "1690:6:2",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ERC20Storage",
									"nameLocation": "1472:12:2",
									"nodeType": "StructDefinition",
									"scope": 1079,
									"src": "1465:246:2",
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 506,
									"mutability": "constant",
									"name": "ERC20StorageLocation",
									"nameLocation": "1851:20:2",
									"nodeType": "VariableDeclaration",
									"scope": 1079,
									"src": "1826:114:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 504,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1826:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307835326336333234376531663437646231396435636530343630303330633439376630363763613463656266373162613938656561646162653230626163653030",
										"id": 505,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1874:66:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_37439836327923360225337895871394760624280537466773280374265222508165906222592_by_1",
											"typeString": "int_const 3743...(69 digits omitted)...2592"
										},
										"value": "0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 513,
										"nodeType": "Block",
										"src": "2021:79:2",
										"statements": [
											{
												"AST": {
													"nativeSrc": "2040:54:2",
													"nodeType": "YulBlock",
													"src": "2040:54:2",
													"statements": [
														{
															"nativeSrc": "2054:30:2",
															"nodeType": "YulAssignment",
															"src": "2054:30:2",
															"value": {
																"name": "ERC20StorageLocation",
																"nativeSrc": "2064:20:2",
																"nodeType": "YulIdentifier",
																"src": "2064:20:2"
															},
															"variableNames": [
																{
																	"name": "$.slot",
																	"nativeSrc": "2054:6:2",
																	"nodeType": "YulIdentifier",
																	"src": "2054:6:2"
																}
															]
														}
													]
												},
												"evmVersion": "prague",
												"externalReferences": [
													{
														"declaration": 510,
														"isOffset": false,
														"isSlot": true,
														"src": "2054:6:2",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 506,
														"isOffset": false,
														"isSlot": false,
														"src": "2064:20:2",
														"valueSize": 1
													}
												],
												"id": 512,
												"nodeType": "InlineAssembly",
												"src": "2031:63:2"
											}
										]
									},
									"id": 514,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getERC20Storage",
									"nameLocation": "1956:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 507,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1972:2:2"
									},
									"returnParameters": {
										"id": 511,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 510,
												"mutability": "mutable",
												"name": "$",
												"nameLocation": "2018:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 514,
												"src": "1997:22:2",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
													"typeString": "struct ERC20Upgradeable.ERC20Storage"
												},
												"typeName": {
													"id": 509,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 508,
														"name": "ERC20Storage",
														"nameLocations": [
															"1997:12:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 503,
														"src": "1997:12:2"
													},
													"referencedDeclaration": 503,
													"src": "1997:12:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1996:24:2"
									},
									"scope": 1079,
									"src": "1947:153:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 529,
										"nodeType": "Block",
										"src": "2355:55:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 525,
															"name": "name_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 517,
															"src": "2388:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"id": 526,
															"name": "symbol_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 519,
															"src": "2395:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 524,
														"name": "__ERC20_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 558,
														"src": "2365:22:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 527,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2365:38:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 528,
												"nodeType": "ExpressionStatement",
												"src": "2365:38:2"
											}
										]
									},
									"documentation": {
										"id": 515,
										"nodeType": "StructuredDocumentation",
										"src": "2106:152:2",
										"text": " @dev Sets the values for {name} and {symbol}.\n Both values are immutable: they can only be set once during construction."
									},
									"id": 530,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 522,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 521,
												"name": "onlyInitializing",
												"nameLocations": [
													"2338:16:2"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "2338:16:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "2338:16:2"
										}
									],
									"name": "__ERC20_init",
									"nameLocation": "2272:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 520,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 517,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2299:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 530,
												"src": "2285:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 516,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2285:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 519,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2320:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 530,
												"src": "2306:21:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 518,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2306:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2284:44:2"
									},
									"returnParameters": {
										"id": 523,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2355:0:2"
									},
									"scope": 1079,
									"src": "2263:147:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 557,
										"nodeType": "Block",
										"src": "2518:114:2",
										"statements": [
											{
												"assignments": [
													541
												],
												"declarations": [
													{
														"constant": false,
														"id": 541,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "2549:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 557,
														"src": "2528:22:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 540,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 539,
																"name": "ERC20Storage",
																"nameLocations": [
																	"2528:12:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 503,
																"src": "2528:12:2"
															},
															"referencedDeclaration": 503,
															"src": "2528:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 544,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 542,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 514,
														"src": "2553:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$503_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 543,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2553:18:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2528:43:2"
											},
											{
												"expression": {
													"id": 549,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 545,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 541,
															"src": "2581:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
															}
														},
														"id": 547,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "2583:5:2",
														"memberName": "_name",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 500,
														"src": "2581:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 548,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 532,
														"src": "2591:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2581:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 550,
												"nodeType": "ExpressionStatement",
												"src": "2581:15:2"
											},
											{
												"expression": {
													"id": 555,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 551,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 541,
															"src": "2606:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
															}
														},
														"id": 553,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "2608:7:2",
														"memberName": "_symbol",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 502,
														"src": "2606:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 554,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 534,
														"src": "2618:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2606:19:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 556,
												"nodeType": "ExpressionStatement",
												"src": "2606:19:2"
											}
										]
									},
									"id": 558,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 537,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 536,
												"name": "onlyInitializing",
												"nameLocations": [
													"2501:16:2"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "2501:16:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "2501:16:2"
										}
									],
									"name": "__ERC20_init_unchained",
									"nameLocation": "2425:22:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 535,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 532,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2462:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 558,
												"src": "2448:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 531,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2448:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 534,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2483:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 558,
												"src": "2469:21:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 533,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2469:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2447:44:2"
									},
									"returnParameters": {
										"id": 538,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2518:0:2"
									},
									"scope": 1079,
									"src": "2416:216:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1353
									],
									"body": {
										"id": 573,
										"nodeType": "Block",
										"src": "2757:84:2",
										"statements": [
											{
												"assignments": [
													566
												],
												"declarations": [
													{
														"constant": false,
														"id": 566,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "2788:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 573,
														"src": "2767:22:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 565,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 564,
																"name": "ERC20Storage",
																"nameLocations": [
																	"2767:12:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 503,
																"src": "2767:12:2"
															},
															"referencedDeclaration": 503,
															"src": "2767:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 569,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 567,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 514,
														"src": "2792:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$503_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 568,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2792:18:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2767:43:2"
											},
											{
												"expression": {
													"expression": {
														"id": 570,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 566,
														"src": "2827:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
														}
													},
													"id": 571,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2829:5:2",
													"memberName": "_name",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 500,
													"src": "2827:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 563,
												"id": 572,
												"nodeType": "Return",
												"src": "2820:14:2"
											}
										]
									},
									"documentation": {
										"id": 559,
										"nodeType": "StructuredDocumentation",
										"src": "2638:54:2",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 574,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2706:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 560,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2710:2:2"
									},
									"returnParameters": {
										"id": 563,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 562,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "2742:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 561,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2742:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2741:15:2"
									},
									"scope": 1079,
									"src": "2697:144:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1359
									],
									"body": {
										"id": 589,
										"nodeType": "Block",
										"src": "3016:86:2",
										"statements": [
											{
												"assignments": [
													582
												],
												"declarations": [
													{
														"constant": false,
														"id": 582,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "3047:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 589,
														"src": "3026:22:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 581,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 580,
																"name": "ERC20Storage",
																"nameLocations": [
																	"3026:12:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 503,
																"src": "3026:12:2"
															},
															"referencedDeclaration": 503,
															"src": "3026:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 585,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 583,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 514,
														"src": "3051:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$503_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 584,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3051:18:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3026:43:2"
											},
											{
												"expression": {
													"expression": {
														"id": 586,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 582,
														"src": "3086:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
														}
													},
													"id": 587,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3088:7:2",
													"memberName": "_symbol",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 502,
													"src": "3086:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 579,
												"id": 588,
												"nodeType": "Return",
												"src": "3079:16:2"
											}
										]
									},
									"documentation": {
										"id": 575,
										"nodeType": "StructuredDocumentation",
										"src": "2847:102:2",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 590,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2963:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 576,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2969:2:2"
									},
									"returnParameters": {
										"id": 579,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 578,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 590,
												"src": "3001:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 577,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3001:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3000:15:2"
									},
									"scope": 1079,
									"src": "2954:148:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1365
									],
									"body": {
										"id": 598,
										"nodeType": "Block",
										"src": "3791:26:2",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 596,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3808:2:2",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 595,
												"id": 597,
												"nodeType": "Return",
												"src": "3801:9:2"
											}
										]
									},
									"documentation": {
										"id": 591,
										"nodeType": "StructuredDocumentation",
										"src": "3108:622:2",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 599,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3744:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 592,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3752:2:2"
									},
									"returnParameters": {
										"id": 595,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 594,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 599,
												"src": "3784:5:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 593,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3784:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3783:7:2"
									},
									"scope": 1079,
									"src": "3735:82:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1289
									],
									"body": {
										"id": 614,
										"nodeType": "Block",
										"src": "3938:91:2",
										"statements": [
											{
												"assignments": [
													607
												],
												"declarations": [
													{
														"constant": false,
														"id": 607,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "3969:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 614,
														"src": "3948:22:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 606,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 605,
																"name": "ERC20Storage",
																"nameLocations": [
																	"3948:12:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 503,
																"src": "3948:12:2"
															},
															"referencedDeclaration": 503,
															"src": "3948:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 610,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 608,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 514,
														"src": "3973:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$503_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 609,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3973:18:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3948:43:2"
											},
											{
												"expression": {
													"expression": {
														"id": 611,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 607,
														"src": "4008:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
														}
													},
													"id": 612,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "4010:12:2",
													"memberName": "_totalSupply",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 498,
													"src": "4008:14:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 604,
												"id": 613,
												"nodeType": "Return",
												"src": "4001:21:2"
											}
										]
									},
									"documentation": {
										"id": 600,
										"nodeType": "StructuredDocumentation",
										"src": "3823:49:2",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 615,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3886:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 601,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3897:2:2"
									},
									"returnParameters": {
										"id": 604,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 603,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 615,
												"src": "3929:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 602,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3929:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3928:9:2"
									},
									"scope": 1079,
									"src": "3877:152:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1297
									],
									"body": {
										"id": 634,
										"nodeType": "Block",
										"src": "4161:97:2",
										"statements": [
											{
												"assignments": [
													625
												],
												"declarations": [
													{
														"constant": false,
														"id": 625,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "4192:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 634,
														"src": "4171:22:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 624,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 623,
																"name": "ERC20Storage",
																"nameLocations": [
																	"4171:12:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 503,
																"src": "4171:12:2"
															},
															"referencedDeclaration": 503,
															"src": "4171:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 628,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 626,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 514,
														"src": "4196:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$503_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 627,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4196:18:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4171:43:2"
											},
											{
												"expression": {
													"baseExpression": {
														"expression": {
															"id": 629,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 625,
															"src": "4231:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
															}
														},
														"id": 630,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4233:9:2",
														"memberName": "_balances",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 490,
														"src": "4231:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 632,
													"indexExpression": {
														"id": 631,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 618,
														"src": "4243:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4231:20:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 622,
												"id": 633,
												"nodeType": "Return",
												"src": "4224:27:2"
											}
										]
									},
									"documentation": {
										"id": 616,
										"nodeType": "StructuredDocumentation",
										"src": "4035:47:2",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 635,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "4096:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 619,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 618,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4114:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 635,
												"src": "4106:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 617,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4106:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4105:17:2"
									},
									"returnParameters": {
										"id": 622,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 621,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 635,
												"src": "4152:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 620,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4152:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4151:9:2"
									},
									"scope": 1079,
									"src": "4087:171:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1307
									],
									"body": {
										"id": 658,
										"nodeType": "Block",
										"src": "4528:103:2",
										"statements": [
											{
												"assignments": [
													646
												],
												"declarations": [
													{
														"constant": false,
														"id": 646,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4546:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 658,
														"src": "4538:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 645,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4538:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 649,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 647,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1107,
														"src": "4554:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 648,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4554:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4538:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 651,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 646,
															"src": "4586:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 652,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 638,
															"src": "4593:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 653,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 640,
															"src": "4597:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 650,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 786,
														"src": "4576:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 654,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4576:27:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 655,
												"nodeType": "ExpressionStatement",
												"src": "4576:27:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 656,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4620:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 644,
												"id": 657,
												"nodeType": "Return",
												"src": "4613:11:2"
											}
										]
									},
									"documentation": {
										"id": 636,
										"nodeType": "StructuredDocumentation",
										"src": "4264:184:2",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
									},
									"functionSelector": "a9059cbb",
									"id": 659,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "4462:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 641,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 638,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4479:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 659,
												"src": "4471:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 637,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4471:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 640,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4491:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 659,
												"src": "4483:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 639,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4483:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4470:27:2"
									},
									"returnParameters": {
										"id": 644,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 643,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 659,
												"src": "4522:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 642,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4522:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4521:6:2"
									},
									"scope": 1079,
									"src": "4453:178:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1317
									],
									"body": {
										"id": 682,
										"nodeType": "Block",
										"src": "4778:106:2",
										"statements": [
											{
												"assignments": [
													671
												],
												"declarations": [
													{
														"constant": false,
														"id": 671,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "4809:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 682,
														"src": "4788:22:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 670,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 669,
																"name": "ERC20Storage",
																"nameLocations": [
																	"4788:12:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 503,
																"src": "4788:12:2"
															},
															"referencedDeclaration": 503,
															"src": "4788:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 674,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 672,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 514,
														"src": "4813:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$503_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 673,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4813:18:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4788:43:2"
											},
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"expression": {
																"id": 675,
																"name": "$",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 671,
																"src": "4848:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
																	"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
																}
															},
															"id": 676,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4850:11:2",
															"memberName": "_allowances",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 496,
															"src": "4848:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 678,
														"indexExpression": {
															"id": 677,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 662,
															"src": "4862:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4848:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 680,
													"indexExpression": {
														"id": 679,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 664,
														"src": "4869:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4848:29:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 668,
												"id": 681,
												"nodeType": "Return",
												"src": "4841:36:2"
											}
										]
									},
									"documentation": {
										"id": 660,
										"nodeType": "StructuredDocumentation",
										"src": "4637:47:2",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 683,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "4698:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 665,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 662,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4716:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 683,
												"src": "4708:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 661,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4708:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 664,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4731:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 683,
												"src": "4723:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 663,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4723:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4707:32:2"
									},
									"returnParameters": {
										"id": 668,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 667,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 683,
												"src": "4769:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 666,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4769:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4768:9:2"
									},
									"scope": 1079,
									"src": "4689:195:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1327
									],
									"body": {
										"id": 706,
										"nodeType": "Block",
										"src": "5270:107:2",
										"statements": [
											{
												"assignments": [
													694
												],
												"declarations": [
													{
														"constant": false,
														"id": 694,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "5288:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 706,
														"src": "5280:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 693,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5280:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 697,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 695,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1107,
														"src": "5296:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 696,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5296:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5280:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 699,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 694,
															"src": "5327:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 700,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 686,
															"src": "5334:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 701,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 688,
															"src": "5343:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 698,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															962,
															1030
														],
														"referencedDeclaration": 962,
														"src": "5318:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 702,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5318:31:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 703,
												"nodeType": "ExpressionStatement",
												"src": "5318:31:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 704,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5366:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 692,
												"id": 705,
												"nodeType": "Return",
												"src": "5359:11:2"
											}
										]
									},
									"documentation": {
										"id": 684,
										"nodeType": "StructuredDocumentation",
										"src": "4890:296:2",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 707,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "5200:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 689,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 686,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "5216:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 707,
												"src": "5208:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 685,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5208:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 688,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5233:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 707,
												"src": "5225:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 687,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5225:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5207:32:2"
									},
									"returnParameters": {
										"id": 692,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 691,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 707,
												"src": "5264:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 690,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5264:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5263:6:2"
									},
									"scope": 1079,
									"src": "5191:186:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1339
									],
									"body": {
										"id": 738,
										"nodeType": "Block",
										"src": "6062:151:2",
										"statements": [
											{
												"assignments": [
													720
												],
												"declarations": [
													{
														"constant": false,
														"id": 720,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "6080:7:2",
														"nodeType": "VariableDeclaration",
														"scope": 738,
														"src": "6072:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 719,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6072:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 723,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 721,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1107,
														"src": "6090:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 722,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6090:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6072:30:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 725,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 710,
															"src": "6128:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 726,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 720,
															"src": "6134:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 727,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 714,
															"src": "6143:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 724,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1078,
														"src": "6112:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 728,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6112:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 729,
												"nodeType": "ExpressionStatement",
												"src": "6112:37:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 731,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 710,
															"src": "6169:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 732,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 712,
															"src": "6175:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 733,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 714,
															"src": "6179:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 730,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 786,
														"src": "6159:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 734,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6159:26:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 735,
												"nodeType": "ExpressionStatement",
												"src": "6159:26:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 736,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6202:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 718,
												"id": 737,
												"nodeType": "Return",
												"src": "6195:11:2"
											}
										]
									},
									"documentation": {
										"id": 708,
										"nodeType": "StructuredDocumentation",
										"src": "5383:581:2",
										"text": " @dev See {IERC20-transferFrom}.\n Skips emitting an {Approval} event indicating an allowance update. This is not\n required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
									},
									"functionSelector": "23b872dd",
									"id": 739,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5978:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 715,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 710,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5999:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 739,
												"src": "5991:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 709,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5991:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 712,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6013:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 739,
												"src": "6005:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 711,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6005:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 714,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6025:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 739,
												"src": "6017:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 713,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6017:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5990:41:2"
									},
									"returnParameters": {
										"id": 718,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 717,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 739,
												"src": "6056:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 716,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6056:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6055:6:2"
									},
									"scope": 1079,
									"src": "5969:244:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 785,
										"nodeType": "Block",
										"src": "6655:231:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 754,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 749,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 742,
														"src": "6669:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 752,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6685:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 751,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6677:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 750,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6677:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 753,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6677:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6669:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 763,
												"nodeType": "IfStatement",
												"src": "6665:86:2",
												"trueBody": {
													"id": 762,
													"nodeType": "Block",
													"src": "6689:62:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 758,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6737:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 757,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6729:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 756,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6729:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 759,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6729:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 755,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1142,
																	"src": "6710:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 760,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6710:30:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 761,
															"nodeType": "RevertStatement",
															"src": "6703:37:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 769,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 764,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 744,
														"src": "6764:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 767,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6778:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 766,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6770:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 765,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6770:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 768,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6770:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6764:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 778,
												"nodeType": "IfStatement",
												"src": "6760:86:2",
												"trueBody": {
													"id": 777,
													"nodeType": "Block",
													"src": "6782:64:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 773,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6832:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 772,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6824:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 771,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6824:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 774,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6824:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 770,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1147,
																	"src": "6803:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 775,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6803:32:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 776,
															"nodeType": "RevertStatement",
															"src": "6796:39:2"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 780,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 742,
															"src": "6863:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 781,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 744,
															"src": "6869:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 782,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 746,
															"src": "6873:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 779,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 878,
														"src": "6855:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 783,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6855:24:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 784,
												"nodeType": "ExpressionStatement",
												"src": "6855:24:2"
											}
										]
									},
									"documentation": {
										"id": 740,
										"nodeType": "StructuredDocumentation",
										"src": "6219:362:2",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 786,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "6595:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 747,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 742,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6613:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 786,
												"src": "6605:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 741,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6605:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 744,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6627:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 786,
												"src": "6619:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 743,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6619:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 746,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6639:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 786,
												"src": "6631:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 745,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6631:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6604:41:2"
									},
									"returnParameters": {
										"id": 748,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6655:0:2"
									},
									"scope": 1079,
									"src": "6586:300:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 877,
										"nodeType": "Block",
										"src": "7276:1095:2",
										"statements": [
											{
												"assignments": [
													798
												],
												"declarations": [
													{
														"constant": false,
														"id": 798,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "7307:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 877,
														"src": "7286:22:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 797,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 796,
																"name": "ERC20Storage",
																"nameLocations": [
																	"7286:12:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 503,
																"src": "7286:12:2"
															},
															"referencedDeclaration": 503,
															"src": "7286:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 801,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 799,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 514,
														"src": "7311:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$503_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 800,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7311:18:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7286:43:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 807,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 802,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 789,
														"src": "7343:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 805,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7359:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 804,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7351:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 803,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7351:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 806,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7351:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7343:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 844,
													"nodeType": "Block",
													"src": "7519:366:2",
													"statements": [
														{
															"assignments": [
																816
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 816,
																	"mutability": "mutable",
																	"name": "fromBalance",
																	"nameLocation": "7541:11:2",
																	"nodeType": "VariableDeclaration",
																	"scope": 844,
																	"src": "7533:19:2",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 815,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "7533:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 821,
															"initialValue": {
																"baseExpression": {
																	"expression": {
																		"id": 817,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 798,
																		"src": "7555:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
																			"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
																		}
																	},
																	"id": 818,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "7557:9:2",
																	"memberName": "_balances",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 490,
																	"src": "7555:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 820,
																"indexExpression": {
																	"id": 819,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 789,
																	"src": "7567:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7555:17:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "7533:39:2"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 824,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 822,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 816,
																	"src": "7590:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 823,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 793,
																	"src": "7604:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7590:19:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 832,
															"nodeType": "IfStatement",
															"src": "7586:115:2",
															"trueBody": {
																"id": 831,
																"nodeType": "Block",
																"src": "7611:90:2",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 826,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 789,
																					"src": "7661:4:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 827,
																					"name": "fromBalance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 816,
																					"src": "7667:11:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 828,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 793,
																					"src": "7680:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 825,
																				"name": "ERC20InsufficientBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1137,
																				"src": "7636:24:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																					"typeString": "function (address,uint256,uint256) pure returns (error)"
																				}
																			},
																			"id": 829,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7636:50:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 830,
																		"nodeType": "RevertStatement",
																		"src": "7629:57:2"
																	}
																]
															}
														},
														{
															"id": 843,
															"nodeType": "UncheckedBlock",
															"src": "7714:161:2",
															"statements": [
																{
																	"expression": {
																		"id": 841,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"expression": {
																					"id": 833,
																					"name": "$",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 798,
																					"src": "7821:1:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
																						"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
																					}
																				},
																				"id": 836,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "7823:9:2",
																				"memberName": "_balances",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 490,
																				"src": "7821:11:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 837,
																			"indexExpression": {
																				"id": 835,
																				"name": "from",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 789,
																				"src": "7833:4:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "7821:17:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 840,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 838,
																				"name": "fromBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 816,
																				"src": "7841:11:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 839,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 793,
																				"src": "7855:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7841:19:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7821:39:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 842,
																	"nodeType": "ExpressionStatement",
																	"src": "7821:39:2"
																}
															]
														}
													]
												},
												"id": 845,
												"nodeType": "IfStatement",
												"src": "7339:546:2",
												"trueBody": {
													"id": 814,
													"nodeType": "Block",
													"src": "7363:150:2",
													"statements": [
														{
															"expression": {
																"id": 812,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 808,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 798,
																		"src": "7479:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
																			"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
																		}
																	},
																	"id": 810,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "7481:12:2",
																	"memberName": "_totalSupply",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 498,
																	"src": "7479:14:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 811,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 793,
																	"src": "7497:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7479:23:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 813,
															"nodeType": "ExpressionStatement",
															"src": "7479:23:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 851,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 846,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 791,
														"src": "7899:2:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 849,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7913:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 848,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7905:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 847,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7905:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 850,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7905:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7899:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 869,
													"nodeType": "Block",
													"src": "8116:208:2",
													"statements": [
														{
															"id": 868,
															"nodeType": "UncheckedBlock",
															"src": "8130:184:2",
															"statements": [
																{
																	"expression": {
																		"id": 866,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"expression": {
																					"id": 860,
																					"name": "$",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 798,
																					"src": "8275:1:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
																						"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
																					}
																				},
																				"id": 863,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "8277:9:2",
																				"memberName": "_balances",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 490,
																				"src": "8275:11:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 864,
																			"indexExpression": {
																				"id": 862,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 791,
																				"src": "8287:2:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "8275:15:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"id": 865,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 793,
																			"src": "8294:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "8275:24:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 867,
																	"nodeType": "ExpressionStatement",
																	"src": "8275:24:2"
																}
															]
														}
													]
												},
												"id": 870,
												"nodeType": "IfStatement",
												"src": "7895:429:2",
												"trueBody": {
													"id": 859,
													"nodeType": "Block",
													"src": "7917:193:2",
													"statements": [
														{
															"id": 858,
															"nodeType": "UncheckedBlock",
															"src": "7931:169:2",
															"statements": [
																{
																	"expression": {
																		"id": 856,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"expression": {
																				"id": 852,
																				"name": "$",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 798,
																				"src": "8062:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
																					"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
																				}
																			},
																			"id": 854,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"memberLocation": "8064:12:2",
																			"memberName": "_totalSupply",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 498,
																			"src": "8062:14:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"id": 855,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 793,
																			"src": "8080:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "8062:23:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 857,
																	"nodeType": "ExpressionStatement",
																	"src": "8062:23:2"
																}
															]
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 872,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 789,
															"src": "8348:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 873,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 791,
															"src": "8354:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 874,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 793,
															"src": "8358:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 871,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1274,
														"src": "8339:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 875,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8339:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 876,
												"nodeType": "EmitStatement",
												"src": "8334:30:2"
											}
										]
									},
									"documentation": {
										"id": 787,
										"nodeType": "StructuredDocumentation",
										"src": "6892:304:2",
										"text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
									},
									"id": 878,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "7210:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 794,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 789,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "7226:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 878,
												"src": "7218:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 788,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7218:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 791,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7240:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 878,
												"src": "7232:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 790,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7232:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 793,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7252:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 878,
												"src": "7244:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 792,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7244:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7217:41:2"
									},
									"returnParameters": {
										"id": 795,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7276:0:2"
									},
									"scope": 1079,
									"src": "7201:1170:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 910,
										"nodeType": "Block",
										"src": "8770:152:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 891,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 886,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 881,
														"src": "8784:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 889,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8803:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 888,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8795:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 887,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "8795:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 890,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8795:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8784:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 900,
												"nodeType": "IfStatement",
												"src": "8780:91:2",
												"trueBody": {
													"id": 899,
													"nodeType": "Block",
													"src": "8807:64:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 895,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "8857:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 894,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "8849:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 893,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "8849:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 896,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8849:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 892,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1147,
																	"src": "8828:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 897,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8828:32:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 898,
															"nodeType": "RevertStatement",
															"src": "8821:39:2"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 904,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8896:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 903,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8888:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 902,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8888:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 905,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8888:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 906,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 881,
															"src": "8900:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 907,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 883,
															"src": "8909:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 901,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 878,
														"src": "8880:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 908,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8880:35:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 909,
												"nodeType": "ExpressionStatement",
												"src": "8880:35:2"
											}
										]
									},
									"documentation": {
										"id": 879,
										"nodeType": "StructuredDocumentation",
										"src": "8377:332:2",
										"text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 911,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "8723:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 884,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 881,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8737:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 911,
												"src": "8729:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 880,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8729:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 883,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8754:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 911,
												"src": "8746:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 882,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8746:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8728:32:2"
									},
									"returnParameters": {
										"id": 885,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8770:0:2"
									},
									"scope": 1079,
									"src": "8714:208:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 943,
										"nodeType": "Block",
										"src": "9296:150:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 924,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 919,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 914,
														"src": "9310:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 922,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9329:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 921,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "9321:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 920,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "9321:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 923,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9321:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9310:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 933,
												"nodeType": "IfStatement",
												"src": "9306:89:2",
												"trueBody": {
													"id": 932,
													"nodeType": "Block",
													"src": "9333:62:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 928,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9381:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 927,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9373:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 926,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "9373:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 929,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9373:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 925,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1142,
																	"src": "9354:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 930,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9354:30:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 931,
															"nodeType": "RevertStatement",
															"src": "9347:37:2"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 935,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 914,
															"src": "9412:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 938,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9429:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 937,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9421:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 936,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9421:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 939,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9421:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 940,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 916,
															"src": "9433:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 934,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 878,
														"src": "9404:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 941,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9404:35:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 942,
												"nodeType": "ExpressionStatement",
												"src": "9404:35:2"
											}
										]
									},
									"documentation": {
										"id": 912,
										"nodeType": "StructuredDocumentation",
										"src": "8928:307:2",
										"text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
									},
									"id": 944,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "9249:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 917,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 914,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9263:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "9255:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 913,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9255:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 916,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9280:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "9272:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 915,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9272:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9254:32:2"
									},
									"returnParameters": {
										"id": 918,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9296:0:2"
									},
									"scope": 1079,
									"src": "9240:206:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 961,
										"nodeType": "Block",
										"src": "10056:54:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 955,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 947,
															"src": "10075:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 956,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 949,
															"src": "10082:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 957,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 951,
															"src": "10091:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "74727565",
															"id": 958,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10098:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 954,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															962,
															1030
														],
														"referencedDeclaration": 1030,
														"src": "10066:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (address,address,uint256,bool)"
														}
													},
													"id": 959,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10066:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 960,
												"nodeType": "ExpressionStatement",
												"src": "10066:37:2"
											}
										]
									},
									"documentation": {
										"id": 945,
										"nodeType": "StructuredDocumentation",
										"src": "9452:525:2",
										"text": " @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
									},
									"id": 962,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "9991:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 952,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 947,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10008:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 962,
												"src": "10000:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 946,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10000:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 949,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10023:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 962,
												"src": "10015:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 948,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10015:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 951,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10040:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 962,
												"src": "10032:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 950,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10032:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9999:47:2"
									},
									"returnParameters": {
										"id": 953,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10056:0:2"
									},
									"scope": 1079,
									"src": "9982:128:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1029,
										"nodeType": "Block",
										"src": "11055:389:2",
										"statements": [
											{
												"assignments": [
													976
												],
												"declarations": [
													{
														"constant": false,
														"id": 976,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "11086:1:2",
														"nodeType": "VariableDeclaration",
														"scope": 1029,
														"src": "11065:22:2",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 975,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 974,
																"name": "ERC20Storage",
																"nameLocations": [
																	"11065:12:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 503,
																"src": "11065:12:2"
															},
															"referencedDeclaration": 503,
															"src": "11065:12:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 979,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 977,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 514,
														"src": "11090:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$503_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 978,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11090:18:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11065:43:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 985,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 980,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 965,
														"src": "11122:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 983,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11139:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 982,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "11131:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 981,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "11131:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 984,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "11131:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "11122:19:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 994,
												"nodeType": "IfStatement",
												"src": "11118:89:2",
												"trueBody": {
													"id": 993,
													"nodeType": "Block",
													"src": "11143:64:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 989,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11193:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 988,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "11185:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 987,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "11185:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 990,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11185:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 986,
																	"name": "ERC20InvalidApprover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1161,
																	"src": "11164:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 991,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11164:32:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 992,
															"nodeType": "RevertStatement",
															"src": "11157:39:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1000,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 995,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 967,
														"src": "11220:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 998,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11239:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 997,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "11231:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 996,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "11231:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 999,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "11231:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "11220:21:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1009,
												"nodeType": "IfStatement",
												"src": "11216:90:2",
												"trueBody": {
													"id": 1008,
													"nodeType": "Block",
													"src": "11243:63:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1004,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11292:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1003,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "11284:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1002,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "11284:7:2",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1005,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11284:10:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1001,
																	"name": "ERC20InvalidSpender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1166,
																	"src": "11264:19:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 1006,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11264:31:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1007,
															"nodeType": "RevertStatement",
															"src": "11257:38:2"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1018,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"expression": {
																	"id": 1010,
																	"name": "$",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 976,
																	"src": "11315:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ERC20Storage_$503_storage_ptr",
																		"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
																	}
																},
																"id": 1014,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "11317:11:2",
																"memberName": "_allowances",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 496,
																"src": "11315:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 1015,
															"indexExpression": {
																"id": 1012,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 965,
																"src": "11329:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "11315:20:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1016,
														"indexExpression": {
															"id": 1013,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 967,
															"src": "11336:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11315:29:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1017,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 969,
														"src": "11347:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11315:37:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1019,
												"nodeType": "ExpressionStatement",
												"src": "11315:37:2"
											},
											{
												"condition": {
													"id": 1020,
													"name": "emitEvent",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 971,
													"src": "11366:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1028,
												"nodeType": "IfStatement",
												"src": "11362:76:2",
												"trueBody": {
													"id": 1027,
													"nodeType": "Block",
													"src": "11377:61:2",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 1022,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 965,
																		"src": "11405:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1023,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 967,
																		"src": "11412:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1024,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 969,
																		"src": "11421:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1021,
																	"name": "Approval",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1283,
																	"src": "11396:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 1025,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11396:31:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1026,
															"nodeType": "EmitStatement",
															"src": "11391:36:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 963,
										"nodeType": "StructuredDocumentation",
										"src": "10116:836:2",
										"text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```solidity\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
									},
									"id": 1030,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "10966:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 972,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 965,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10983:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 1030,
												"src": "10975:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 964,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10975:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 967,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10998:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1030,
												"src": "10990:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 966,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10990:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 969,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11015:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 1030,
												"src": "11007:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 968,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11007:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 971,
												"mutability": "mutable",
												"name": "emitEvent",
												"nameLocation": "11027:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 1030,
												"src": "11022:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 970,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11022:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10974:63:2"
									},
									"returnParameters": {
										"id": 973,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11055:0:2"
									},
									"scope": 1079,
									"src": "10957:487:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1077,
										"nodeType": "Block",
										"src": "11815:387:2",
										"statements": [
											{
												"assignments": [
													1041
												],
												"declarations": [
													{
														"constant": false,
														"id": 1041,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "11833:16:2",
														"nodeType": "VariableDeclaration",
														"scope": 1077,
														"src": "11825:24:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1040,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11825:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1046,
												"initialValue": {
													"arguments": [
														{
															"id": 1043,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1033,
															"src": "11862:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1044,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1035,
															"src": "11869:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1042,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 683,
														"src": "11852:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 1045,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11852:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11825:52:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1053,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1047,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1041,
														"src": "11891:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1050,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11915:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1049,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "11915:7:2",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 1048,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "11910:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1051,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11910:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 1052,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "11924:3:2",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "11910:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11891:36:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1076,
												"nodeType": "IfStatement",
												"src": "11887:309:2",
												"trueBody": {
													"id": 1075,
													"nodeType": "Block",
													"src": "11929:267:2",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1056,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1054,
																	"name": "currentAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1041,
																	"src": "11947:16:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 1055,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1037,
																	"src": "11966:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "11947:24:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1064,
															"nodeType": "IfStatement",
															"src": "11943:130:2",
															"trueBody": {
																"id": 1063,
																"nodeType": "Block",
																"src": "11973:100:2",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 1058,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1035,
																					"src": "12025:7:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 1059,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1041,
																					"src": "12034:16:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 1060,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1037,
																					"src": "12052:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 1057,
																				"name": "ERC20InsufficientAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1156,
																				"src": "11998:26:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																					"typeString": "function (address,uint256,uint256) pure returns (error)"
																				}
																			},
																			"id": 1061,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "11998:60:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 1062,
																		"nodeType": "RevertStatement",
																		"src": "11991:67:2"
																	}
																]
															}
														},
														{
															"id": 1074,
															"nodeType": "UncheckedBlock",
															"src": "12086:100:2",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 1066,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1033,
																				"src": "12123:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 1067,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1035,
																				"src": "12130:7:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1070,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1068,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1041,
																					"src": "12139:16:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 1069,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1037,
																					"src": "12158:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12139:24:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"hexValue": "66616c7365",
																				"id": 1071,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12165:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "false"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			],
																			"id": 1065,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				962,
																				1030
																			],
																			"referencedDeclaration": 1030,
																			"src": "12114:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
																				"typeString": "function (address,address,uint256,bool)"
																			}
																		},
																		"id": 1072,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "12114:57:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 1073,
																	"nodeType": "ExpressionStatement",
																	"src": "12114:57:2"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1031,
										"nodeType": "StructuredDocumentation",
										"src": "11450:271:2",
										"text": " @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
									},
									"id": 1078,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "11735:15:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1038,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1033,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "11759:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 1078,
												"src": "11751:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1032,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11751:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1035,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "11774:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1078,
												"src": "11766:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1034,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11766:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1037,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11791:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 1078,
												"src": "11783:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1036,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11783:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11750:47:2"
									},
									"returnParameters": {
										"id": 1039,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11815:0:2"
									},
									"scope": 1079,
									"src": "11726:476:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1080,
							"src": "1281:10923:2",
							"usedErrors": [
								211,
								214,
								1137,
								1142,
								1147,
								1156,
								1161,
								1166
							],
							"usedEvents": [
								219,
								1274,
								1283
							]
						}
					],
					"src": "105:12100:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							1125
						],
						"Initializable": [
							462
						]
					},
					"id": 1126,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1081,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 1083,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1126,
							"sourceUnit": 463,
							"src": "126:63:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1082,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 462,
										"src": "134:13:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1085,
										"name": "Initializable",
										"nameLocations": [
											"728:13:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 462,
										"src": "728:13:3"
									},
									"id": 1086,
									"nodeType": "InheritanceSpecifier",
									"src": "728:13:3"
								}
							],
							"canonicalName": "ContextUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1084,
								"nodeType": "StructuredDocumentation",
								"src": "191:496:3",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1125,
							"linearizedBaseContracts": [
								1125,
								462
							],
							"name": "ContextUpgradeable",
							"nameLocation": "706:18:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1091,
										"nodeType": "Block",
										"src": "800:7:3",
										"statements": []
									},
									"id": 1092,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1089,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1088,
												"name": "onlyInitializing",
												"nameLocations": [
													"783:16:3"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "783:16:3"
											},
											"nodeType": "ModifierInvocation",
											"src": "783:16:3"
										}
									],
									"name": "__Context_init",
									"nameLocation": "757:14:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1087,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "771:2:3"
									},
									"returnParameters": {
										"id": 1090,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "800:0:3"
									},
									"scope": 1125,
									"src": "748:59:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1097,
										"nodeType": "Block",
										"src": "875:7:3",
										"statements": []
									},
									"id": 1098,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1095,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1094,
												"name": "onlyInitializing",
												"nameLocations": [
													"858:16:3"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "858:16:3"
											},
											"nodeType": "ModifierInvocation",
											"src": "858:16:3"
										}
									],
									"name": "__Context_init_unchained",
									"nameLocation": "822:24:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1093,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "846:2:3"
									},
									"returnParameters": {
										"id": 1096,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "875:0:3"
									},
									"scope": 1125,
									"src": "813:69:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1106,
										"nodeType": "Block",
										"src": "949:34:3",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1103,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "966:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1104,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "970:6:3",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "966:10:3",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1102,
												"id": 1105,
												"nodeType": "Return",
												"src": "959:17:3"
											}
										]
									},
									"id": 1107,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "896:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1099,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "906:2:3"
									},
									"returnParameters": {
										"id": 1102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1101,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1107,
												"src": "940:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "940:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "939:9:3"
									},
									"scope": 1125,
									"src": "887:96:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1115,
										"nodeType": "Block",
										"src": "1056:32:3",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1112,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1073:3:3",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1113,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "1077:4:3",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "1073:8:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1111,
												"id": 1114,
												"nodeType": "Return",
												"src": "1066:15:3"
											}
										]
									},
									"id": 1116,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "998:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1108,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1006:2:3"
									},
									"returnParameters": {
										"id": 1111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1110,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1116,
												"src": "1040:14:3",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1109,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1040:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1039:16:3"
									},
									"scope": 1125,
									"src": "989:99:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1123,
										"nodeType": "Block",
										"src": "1166:25:3",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 1121,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1183:1:3",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 1120,
												"id": 1122,
												"nodeType": "Return",
												"src": "1176:8:3"
											}
										]
									},
									"id": 1124,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "1103:20:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1117,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1123:2:3"
									},
									"returnParameters": {
										"id": 1120,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1119,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1124,
												"src": "1157:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1118,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1157:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1156:9:3"
									},
									"scope": 1125,
									"src": "1094:97:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1126,
							"src": "688:505:3",
							"usedErrors": [
								211,
								214
							],
							"usedEvents": [
								219
							]
						}
					],
					"src": "101:1093:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
					"exportedSymbols": {
						"IERC1155Errors": [
							1262
						],
						"IERC20Errors": [
							1167
						],
						"IERC721Errors": [
							1215
						]
					},
					"id": 1263,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1127,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1128,
								"nodeType": "StructuredDocumentation",
								"src": "138:141:4",
								"text": " @dev Standard ERC-20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens."
							},
							"fullyImplemented": true,
							"id": 1167,
							"linearizedBaseContracts": [
								1167
							],
							"name": "IERC20Errors",
							"nameLocation": "290:12:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1129,
										"nodeType": "StructuredDocumentation",
										"src": "309:309:4",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "e450d38c",
									"id": 1137,
									"name": "ERC20InsufficientBalance",
									"nameLocation": "629:24:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1131,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "662:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1137,
												"src": "654:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1130,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "654:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1133,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "678:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1137,
												"src": "670:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1132,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "670:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1135,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "695:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1137,
												"src": "687:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1134,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "687:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "653:49:4"
									},
									"src": "623:80:4"
								},
								{
									"documentation": {
										"id": 1138,
										"nodeType": "StructuredDocumentation",
										"src": "709:152:4",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "96c6fd1e",
									"id": 1142,
									"name": "ERC20InvalidSender",
									"nameLocation": "872:18:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1141,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1140,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "899:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1142,
												"src": "891:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1139,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "891:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "890:16:4"
									},
									"src": "866:41:4"
								},
								{
									"documentation": {
										"id": 1143,
										"nodeType": "StructuredDocumentation",
										"src": "913:159:4",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "ec442f05",
									"id": 1147,
									"name": "ERC20InvalidReceiver",
									"nameLocation": "1083:20:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1145,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1112:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1147,
												"src": "1104:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1144,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1104:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1103:18:4"
									},
									"src": "1077:45:4"
								},
								{
									"documentation": {
										"id": 1148,
										"nodeType": "StructuredDocumentation",
										"src": "1128:345:4",
										"text": " @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "fb8f41b2",
									"id": 1156,
									"name": "ERC20InsufficientAllowance",
									"nameLocation": "1484:26:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1155,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1150,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1519:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1156,
												"src": "1511:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1149,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1511:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1152,
												"mutability": "mutable",
												"name": "allowance",
												"nameLocation": "1536:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 1156,
												"src": "1528:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1151,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1528:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1154,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "1555:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1156,
												"src": "1547:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1153,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1547:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1510:52:4"
									},
									"src": "1478:85:4"
								},
								{
									"documentation": {
										"id": 1157,
										"nodeType": "StructuredDocumentation",
										"src": "1569:174:4",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "e602df05",
									"id": 1161,
									"name": "ERC20InvalidApprover",
									"nameLocation": "1754:20:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1160,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1159,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "1783:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1161,
												"src": "1775:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1158,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1775:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1774:18:4"
									},
									"src": "1748:45:4"
								},
								{
									"documentation": {
										"id": 1162,
										"nodeType": "StructuredDocumentation",
										"src": "1799:195:4",
										"text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "94280d62",
									"id": 1166,
									"name": "ERC20InvalidSpender",
									"nameLocation": "2005:19:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1165,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1164,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2033:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1166,
												"src": "2025:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1163,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2025:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2024:17:4"
									},
									"src": "1999:43:4"
								}
							],
							"scope": 1263,
							"src": "280:1764:4",
							"usedErrors": [
								1137,
								1142,
								1147,
								1156,
								1161,
								1166
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1168,
								"nodeType": "StructuredDocumentation",
								"src": "2046:143:4",
								"text": " @dev Standard ERC-721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens."
							},
							"fullyImplemented": true,
							"id": 1215,
							"linearizedBaseContracts": [
								1215
							],
							"name": "IERC721Errors",
							"nameLocation": "2200:13:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1169,
										"nodeType": "StructuredDocumentation",
										"src": "2220:219:4",
										"text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "89c62b64",
									"id": 1173,
									"name": "ERC721InvalidOwner",
									"nameLocation": "2450:18:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1172,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1171,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2477:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1173,
												"src": "2469:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1170,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2469:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2468:15:4"
									},
									"src": "2444:40:4"
								},
								{
									"documentation": {
										"id": 1174,
										"nodeType": "StructuredDocumentation",
										"src": "2490:132:4",
										"text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "7e273289",
									"id": 1178,
									"name": "ERC721NonexistentToken",
									"nameLocation": "2633:22:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1176,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2664:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1178,
												"src": "2656:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1175,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2656:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2655:17:4"
									},
									"src": "2627:46:4"
								},
								{
									"documentation": {
										"id": 1179,
										"nodeType": "StructuredDocumentation",
										"src": "2679:289:4",
										"text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "64283d7b",
									"id": 1187,
									"name": "ERC721IncorrectOwner",
									"nameLocation": "2979:20:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1186,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1181,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3008:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1187,
												"src": "3000:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1180,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3000:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1183,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3024:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1187,
												"src": "3016:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1182,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3016:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1185,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3041:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1187,
												"src": "3033:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1184,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3033:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2999:48:4"
									},
									"src": "2973:75:4"
								},
								{
									"documentation": {
										"id": 1188,
										"nodeType": "StructuredDocumentation",
										"src": "3054:152:4",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "73c6ac6e",
									"id": 1192,
									"name": "ERC721InvalidSender",
									"nameLocation": "3217:19:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1191,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1190,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3245:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1192,
												"src": "3237:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1189,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3237:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3236:16:4"
									},
									"src": "3211:42:4"
								},
								{
									"documentation": {
										"id": 1193,
										"nodeType": "StructuredDocumentation",
										"src": "3259:159:4",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "64a0ae92",
									"id": 1197,
									"name": "ERC721InvalidReceiver",
									"nameLocation": "3429:21:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1195,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3459:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1197,
												"src": "3451:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1194,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3451:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3450:18:4"
									},
									"src": "3423:46:4"
								},
								{
									"documentation": {
										"id": 1198,
										"nodeType": "StructuredDocumentation",
										"src": "3475:247:4",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "177e802f",
									"id": 1204,
									"name": "ERC721InsufficientApproval",
									"nameLocation": "3733:26:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1203,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1200,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3768:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1204,
												"src": "3760:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1199,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3760:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1202,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3786:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1204,
												"src": "3778:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1201,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3778:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3759:35:4"
									},
									"src": "3727:68:4"
								},
								{
									"documentation": {
										"id": 1205,
										"nodeType": "StructuredDocumentation",
										"src": "3801:174:4",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "a9fbf51f",
									"id": 1209,
									"name": "ERC721InvalidApprover",
									"nameLocation": "3986:21:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1207,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "4016:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1209,
												"src": "4008:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1206,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4008:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4007:18:4"
									},
									"src": "3980:46:4"
								},
								{
									"documentation": {
										"id": 1210,
										"nodeType": "StructuredDocumentation",
										"src": "4032:197:4",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "5b08ba18",
									"id": 1214,
									"name": "ERC721InvalidOperator",
									"nameLocation": "4240:21:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1213,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1212,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4270:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1214,
												"src": "4262:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1211,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4262:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4261:18:4"
									},
									"src": "4234:46:4"
								}
							],
							"scope": 1263,
							"src": "2190:2092:4",
							"usedErrors": [
								1173,
								1178,
								1187,
								1192,
								1197,
								1204,
								1209,
								1214
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1155Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1216,
								"nodeType": "StructuredDocumentation",
								"src": "4284:145:4",
								"text": " @dev Standard ERC-1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens."
							},
							"fullyImplemented": true,
							"id": 1262,
							"linearizedBaseContracts": [
								1262
							],
							"name": "IERC1155Errors",
							"nameLocation": "4440:14:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1217,
										"nodeType": "StructuredDocumentation",
										"src": "4461:361:4",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "03dee4c5",
									"id": 1227,
									"name": "ERC1155InsufficientBalance",
									"nameLocation": "4833:26:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1226,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1219,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4868:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1227,
												"src": "4860:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1218,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4860:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1221,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "4884:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1227,
												"src": "4876:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1220,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4876:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1223,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "4901:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1227,
												"src": "4893:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1222,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4893:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1225,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4917:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1227,
												"src": "4909:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1224,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4909:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4859:66:4"
									},
									"src": "4827:99:4"
								},
								{
									"documentation": {
										"id": 1228,
										"nodeType": "StructuredDocumentation",
										"src": "4932:152:4",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "01a83514",
									"id": 1232,
									"name": "ERC1155InvalidSender",
									"nameLocation": "5095:20:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1231,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1230,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5124:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 1232,
												"src": "5116:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1229,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5116:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5115:16:4"
									},
									"src": "5089:43:4"
								},
								{
									"documentation": {
										"id": 1233,
										"nodeType": "StructuredDocumentation",
										"src": "5138:159:4",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "57f447ce",
									"id": 1237,
									"name": "ERC1155InvalidReceiver",
									"nameLocation": "5308:22:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1236,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1235,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5339:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1237,
												"src": "5331:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1234,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5331:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5330:18:4"
									},
									"src": "5302:47:4"
								},
								{
									"documentation": {
										"id": 1238,
										"nodeType": "StructuredDocumentation",
										"src": "5355:256:4",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "e237d922",
									"id": 1244,
									"name": "ERC1155MissingApprovalForAll",
									"nameLocation": "5622:28:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1240,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5659:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1244,
												"src": "5651:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1239,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5651:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1242,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5677:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1244,
												"src": "5669:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1241,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5669:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5650:33:4"
									},
									"src": "5616:68:4"
								},
								{
									"documentation": {
										"id": 1245,
										"nodeType": "StructuredDocumentation",
										"src": "5690:174:4",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "3e31884e",
									"id": 1249,
									"name": "ERC1155InvalidApprover",
									"nameLocation": "5875:22:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1248,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1247,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "5906:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1249,
												"src": "5898:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1246,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5898:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5897:18:4"
									},
									"src": "5869:47:4"
								},
								{
									"documentation": {
										"id": 1250,
										"nodeType": "StructuredDocumentation",
										"src": "5922:197:4",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "ced3e100",
									"id": 1254,
									"name": "ERC1155InvalidOperator",
									"nameLocation": "6130:22:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1253,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1252,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6161:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1254,
												"src": "6153:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1251,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6153:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6152:18:4"
									},
									"src": "6124:47:4"
								},
								{
									"documentation": {
										"id": 1255,
										"nodeType": "StructuredDocumentation",
										"src": "6177:280:4",
										"text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
									},
									"errorSelector": "5b059991",
									"id": 1261,
									"name": "ERC1155InvalidArrayLength",
									"nameLocation": "6468:25:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1260,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1257,
												"mutability": "mutable",
												"name": "idsLength",
												"nameLocation": "6502:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 1261,
												"src": "6494:17:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1256,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6494:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1259,
												"mutability": "mutable",
												"name": "valuesLength",
												"nameLocation": "6521:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 1261,
												"src": "6513:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1258,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6513:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6493:41:4"
									},
									"src": "6462:73:4"
								}
							],
							"scope": 1263,
							"src": "4430:2107:4",
							"usedErrors": [
								1227,
								1232,
								1237,
								1244,
								1249,
								1254,
								1261
							],
							"usedEvents": []
						}
					],
					"src": "112:6426:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							1340
						]
					},
					"id": 1341,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1264,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1265,
								"nodeType": "StructuredDocumentation",
								"src": "132:71:5",
								"text": " @dev Interface of the ERC-20 standard as defined in the ERC."
							},
							"fullyImplemented": false,
							"id": 1340,
							"linearizedBaseContracts": [
								1340
							],
							"name": "IERC20",
							"nameLocation": "214:6:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1266,
										"nodeType": "StructuredDocumentation",
										"src": "227:158:5",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 1274,
									"name": "Transfer",
									"nameLocation": "396:8:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1273,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1268,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "421:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1274,
												"src": "405:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1267,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "405:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1270,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "443:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 1274,
												"src": "427:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1269,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "427:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1272,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "455:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1274,
												"src": "447:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1271,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "447:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "404:57:5"
									},
									"src": "390:72:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1275,
										"nodeType": "StructuredDocumentation",
										"src": "468:148:5",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 1283,
									"name": "Approval",
									"nameLocation": "627:8:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1282,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1277,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "652:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1283,
												"src": "636:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1276,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "636:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1279,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "675:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1283,
												"src": "659:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1278,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "659:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1281,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "692:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1283,
												"src": "684:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1280,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "684:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "635:63:5"
									},
									"src": "621:78:5"
								},
								{
									"documentation": {
										"id": 1284,
										"nodeType": "StructuredDocumentation",
										"src": "705:65:5",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 1289,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "784:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1285,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "795:2:5"
									},
									"returnParameters": {
										"id": 1288,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1287,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1289,
												"src": "821:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1286,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "821:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "820:9:5"
									},
									"scope": 1340,
									"src": "775:55:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1290,
										"nodeType": "StructuredDocumentation",
										"src": "836:71:5",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 1297,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1292,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1297,
												"src": "931:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1291,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:5"
									},
									"returnParameters": {
										"id": 1296,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1295,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1297,
												"src": "971:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1294,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:5"
									},
									"scope": 1340,
									"src": "912:68:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1298,
										"nodeType": "StructuredDocumentation",
										"src": "986:213:5",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 1307,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1213:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1303,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1300,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1230:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 1307,
												"src": "1222:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1299,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1222:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1302,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1242:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1307,
												"src": "1234:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1301,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1234:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1221:27:5"
									},
									"returnParameters": {
										"id": 1306,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1305,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1307,
												"src": "1267:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1304,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1267:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1266:6:5"
									},
									"scope": 1340,
									"src": "1204:69:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1308,
										"nodeType": "StructuredDocumentation",
										"src": "1279:264:5",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 1317,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1557:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1310,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1575:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1317,
												"src": "1567:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1309,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1567:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1312,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1590:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1317,
												"src": "1582:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1311,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1582:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1566:32:5"
									},
									"returnParameters": {
										"id": 1316,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1315,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1317,
												"src": "1622:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1314,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1622:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1621:9:5"
									},
									"scope": 1340,
									"src": "1548:83:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1318,
										"nodeType": "StructuredDocumentation",
										"src": "1637:667:5",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 1327,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2318:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1323,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1320,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2334:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1327,
												"src": "2326:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1319,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2326:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1322,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2351:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1327,
												"src": "2343:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1321,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2343:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2325:32:5"
									},
									"returnParameters": {
										"id": 1326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1325,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1327,
												"src": "2376:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1324,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2376:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2375:6:5"
									},
									"scope": 1340,
									"src": "2309:73:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1328,
										"nodeType": "StructuredDocumentation",
										"src": "2388:297:5",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 1339,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2699:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1335,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1330,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2720:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1339,
												"src": "2712:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1329,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2712:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1332,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2734:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 1339,
												"src": "2726:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1331,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2726:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1334,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2746:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1339,
												"src": "2738:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1333,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2738:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2711:41:5"
									},
									"returnParameters": {
										"id": 1338,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1337,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1339,
												"src": "2771:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1336,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2771:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2770:6:5"
									},
									"scope": 1340,
									"src": "2690:87:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1341,
							"src": "204:2575:5",
							"usedErrors": [],
							"usedEvents": [
								1274,
								1283
							]
						}
					],
					"src": "106:2674:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							1340
						],
						"IERC20Metadata": [
							1366
						]
					},
					"id": 1367,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1342,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "125:24:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 1344,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1367,
							"sourceUnit": 1341,
							"src": "151:37:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1343,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1340,
										"src": "159:6:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1346,
										"name": "IERC20",
										"nameLocations": [
											"306:6:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1340,
										"src": "306:6:6"
									},
									"id": 1347,
									"nodeType": "InheritanceSpecifier",
									"src": "306:6:6"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1345,
								"nodeType": "StructuredDocumentation",
								"src": "190:87:6",
								"text": " @dev Interface for the optional metadata functions from the ERC-20 standard."
							},
							"fullyImplemented": false,
							"id": 1366,
							"linearizedBaseContracts": [
								1366,
								1340
							],
							"name": "IERC20Metadata",
							"nameLocation": "288:14:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1348,
										"nodeType": "StructuredDocumentation",
										"src": "319:54:6",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1353,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "387:4:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1349,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "391:2:6"
									},
									"returnParameters": {
										"id": 1352,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1351,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1353,
												"src": "417:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1350,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "417:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "416:15:6"
									},
									"scope": 1366,
									"src": "378:54:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1354,
										"nodeType": "StructuredDocumentation",
										"src": "438:56:6",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 1359,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "508:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1355,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "514:2:6"
									},
									"returnParameters": {
										"id": 1358,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1357,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1359,
												"src": "540:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1356,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "540:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "539:15:6"
									},
									"scope": 1366,
									"src": "499:56:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1360,
										"nodeType": "StructuredDocumentation",
										"src": "561:65:6",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 1365,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "640:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1361,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "648:2:6"
									},
									"returnParameters": {
										"id": 1364,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1363,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1365,
												"src": "674:5:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1362,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "674:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "673:7:6"
									},
									"scope": 1366,
									"src": "631:50:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1367,
							"src": "278:405:6",
							"usedErrors": [],
							"usedEvents": [
								1274,
								1283
							]
						}
					],
					"src": "125:559:6"
				},
				"id": 6
			},
			"contracts/Mock/CustomToken.sol": {
				"ast": {
					"absolutePath": "contracts/Mock/CustomToken.sol",
					"exportedSymbols": {
						"CustomToken": [
							1427
						],
						"ERC20Upgradeable": [
							1079
						],
						"OwnableUpgradeable": [
							194
						]
					},
					"id": 1428,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1368,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".9"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
							"id": 1370,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1428,
							"sourceUnit": 1080,
							"src": "57:102:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1369,
										"name": "ERC20Upgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1079,
										"src": "65:16:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"id": 1372,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1428,
							"sourceUnit": 195,
							"src": "160:101:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1371,
										"name": "OwnableUpgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 194,
										"src": "168:18:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1373,
										"name": "ERC20Upgradeable",
										"nameLocations": [
											"287:16:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1079,
										"src": "287:16:7"
									},
									"id": 1374,
									"nodeType": "InheritanceSpecifier",
									"src": "287:16:7"
								},
								{
									"baseName": {
										"id": 1375,
										"name": "OwnableUpgradeable",
										"nameLocations": [
											"305:18:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 194,
										"src": "305:18:7"
									},
									"id": 1376,
									"nodeType": "InheritanceSpecifier",
									"src": "305:18:7"
								}
							],
							"canonicalName": "CustomToken",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1427,
							"linearizedBaseContracts": [
								1427,
								194,
								1079,
								1167,
								1366,
								1340,
								1125,
								462
							],
							"name": "CustomToken",
							"nameLocation": "272:11:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1406,
										"nodeType": "Block",
										"src": "431:136:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1386,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "456:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1387,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "460:6:7",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "456:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1385,
														"name": "__Ownable_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 54,
														"src": "441:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1388,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "441:26:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1389,
												"nodeType": "ExpressionStatement",
												"src": "441:26:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1391,
															"name": "name",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1378,
															"src": "490:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"id": 1392,
															"name": "symbol",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1380,
															"src": "496:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1390,
														"name": "__ERC20_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 530,
														"src": "477:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 1393,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "477:26:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1394,
												"nodeType": "ExpressionStatement",
												"src": "477:26:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1396,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "519:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1397,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "523:6:7",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "519:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1403,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "3230305f3030305f303030",
																"id": 1398,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "531:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_200000000_by_1",
																	"typeString": "int_const 200000000"
																},
																"value": "200_000_000"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1402,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1399,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "545:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1400,
																		"name": "decimals",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 599,
																		"src": "549:8:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																			"typeString": "function () view returns (uint8)"
																		}
																	},
																	"id": 1401,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "549:10:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "545:14:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "531:28:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1395,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 911,
														"src": "513:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1404,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "513:47:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1405,
												"nodeType": "ExpressionStatement",
												"src": "513:47:7"
											}
										]
									},
									"functionSelector": "4cd88b76",
									"id": 1407,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1383,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1382,
												"name": "initializer",
												"nameLocations": [
													"415:11:7"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 302,
												"src": "415:11:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "415:11:7"
										}
									],
									"name": "initialize",
									"nameLocation": "339:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1378,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "364:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1407,
												"src": "350:18:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1377,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "350:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1380,
												"mutability": "mutable",
												"name": "symbol",
												"nameLocation": "384:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1407,
												"src": "370:20:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1379,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "370:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "349:42:7"
									},
									"returnParameters": {
										"id": 1384,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "431:0:7"
									},
									"scope": 1427,
									"src": "330:237:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1425,
										"nodeType": "Block",
										"src": "606:67:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1415,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 105,
																"src": "628:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1416,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "628:7:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1422,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "3230305f3030305f303030",
																"id": 1417,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "637:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_200000000_by_1",
																	"typeString": "int_const 200000000"
																},
																"value": "200_000_000"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1421,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1418,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "651:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1419,
																		"name": "decimals",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 599,
																		"src": "655:8:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																			"typeString": "function () view returns (uint8)"
																		}
																	},
																	"id": 1420,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "655:10:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "651:14:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "637:28:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1412,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "616:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_CustomToken_$1427_$",
																"typeString": "type(contract super CustomToken)"
															}
														},
														"id": 1414,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "622:5:7",
														"memberName": "_mint",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 911,
														"src": "616:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1423,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "616:50:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1424,
												"nodeType": "ExpressionStatement",
												"src": "616:50:7"
											}
										]
									},
									"functionSelector": "1249c58b",
									"id": 1426,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1410,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1409,
												"name": "onlyOwner",
												"nameLocations": [
													"596:9:7"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 89,
												"src": "596:9:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "596:9:7"
										}
									],
									"name": "mint",
									"nameLocation": "582:4:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1408,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "586:2:7"
									},
									"returnParameters": {
										"id": 1411,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "606:0:7"
									},
									"scope": 1427,
									"src": "573:100:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 1428,
							"src": "263:412:7",
							"usedErrors": [
								30,
								35,
								211,
								214,
								1137,
								1142,
								1147,
								1156,
								1161,
								1166
							],
							"usedEvents": [
								41,
								219,
								1274,
								1283
							]
						}
					],
					"src": "32:644:7"
				},
				"id": 7
			}
		}
	}
}